<?xml version="1.0"?>
<doc>
    <assembly>
        <name>X10D</name>
    </assembly>
    <members>
        <member name="T:X10D.Collections.ArrayExtensions">
            <summary>
                Extension methods for <see cref="T:System.Array" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.ArrayExtensions.AsReadOnly``1(``0[])">
            <summary>
                Returns a read-only wrapper for the array.
            </summary>
            <param name="array">The one-dimensional, zero-based array to wrap in a read-only wrapper.</param>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> wrapper for the specified array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.ArrayExtensions.Clear``1(``0[])">
            <summary>
                Clears the contents of an array.
            </summary>
            <param name="array">The array to clear.</param>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.ArrayExtensions.Clear``1(``0[],System.Range)">
            <summary>
                Sets a range of elements in an array to the default value of each element type.
            </summary>
            <param name="array">The array whose elements need to be cleared.</param>
            <param name="range">A range defining the start index and number of elements to clear.</param>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.ArrayExtensions.Clear``1(``0[],System.Int32,System.Int32)">
            <summary>
                Sets a range of elements in an array to the default value of each element type.
            </summary>
            <param name="array">The array whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</para>
                -or-
                <para><paramref name="length" /> is less zero.</para>
                -or-
                <para>The sum of <paramref name="index" /> and <paramref name="length"/> is greater than the size of array.</para>
            </exception>
        </member>
        <member name="T:X10D.Collections.BoolListExtensions">
            <summary>
                Collection-related extension methods for <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.BoolListExtensions.PackByte(System.Collections.Generic.IReadOnlyList{System.Boolean})">
            <summary>
                Packs a collection of booleans into a <see cref="T:System.Byte" />.
            </summary>
            <param name="source">The collection of booleans to pack.</param>
            <returns>An 8-bit unsigned integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 8 elements.</exception>
            <author>Alpha Anar</author>
        </member>
        <member name="M:X10D.Collections.BoolListExtensions.PackInt16(System.Collections.Generic.IReadOnlyList{System.Boolean})">
            <summary>
                Packs a collection of booleans into a <see cref="T:System.Int16" />.
            </summary>
            <param name="source">The collection of booleans to pack.</param>
            <returns>A 16-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 16 elements.</exception>
        </member>
        <member name="M:X10D.Collections.BoolListExtensions.PackInt32(System.Collections.Generic.IReadOnlyList{System.Boolean})">
            <summary>
                Packs a collection of booleans into a <see cref="T:System.Int32" />.
            </summary>
            <param name="source">The collection of booleans to pack.</param>
            <returns>A 32-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 32 elements.</exception>
        </member>
        <member name="M:X10D.Collections.BoolListExtensions.PackInt64(System.Collections.Generic.IReadOnlyList{System.Boolean})">
            <summary>
                Packs a collection of booleans into a <see cref="T:System.Int64" />.
            </summary>
            <param name="source">The collection of booleans to pack.</param>
            <returns>A 64-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 64 elements.</exception>
        </member>
        <member name="T:X10D.Collections.ByteExtensions">
            <summary>
                Collection-related extension methods for <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.ByteExtensions.Unpack(System.Byte)">
            <summary>
                Unpacks this 8-bit unsigned integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <returns>An array of <see cref="T:System.Boolean" /> with length 8.</returns>
        </member>
        <member name="M:X10D.Collections.ByteExtensions.Unpack(System.Byte,System.Span{System.Boolean})">
            <summary>
                Unpacks this 8-bit unsigned integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <param name="destination">When this method returns, contains the unpacked booleans from <paramref name="value" />.</param>
            <exception cref="T:System.ArgumentException"><paramref name="destination" /> is not large enough to contain the result.</exception>
        </member>
        <member name="T:X10D.Collections.CollectionExtensions">
            <summary>
                Collection-related extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.CollectionExtensions.ClearAndDisposeAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Calls <see cref="M:System.IDisposable.Dispose" /> on each item in the collection, then clears the collection by calling
                <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.
            </summary>
            <param name="source">The collection to clear, and whose elements should be disposed.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> is read-only.</exception>
            <seealso cref="M:X10D.Collections.EnumerableExtensions.DisposeAll``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:X10D.Collections.CollectionExtensions.ClearAndDisposeAllAsync``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Asynchronously calls <see cref="M:System.IAsyncDisposable.DisposeAsync" /> on each item in the collection, then clears the
                collection by calling <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.
            </summary>
            <param name="source">The collection to clear, and whose elements should be disposed.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> is read-only.</exception>
            <seealso cref="M:X10D.Collections.EnumerableExtensions.DisposeAllAsync``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="T:X10D.Collections.DictionaryExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.Dictionary`2" /> and similar types.
            </summary>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
                Adds a key/value pair to the <see cref="T:System.Collections.Generic.Dictionary`2" /> if the key does not already exist, or updates a
                key/value pair in the <see cref="T:System.Collections.Generic.Dictionary`2" /> by using the specified function if the key already
                exists.
            </summary>
            <param name="dictionary">The dictionary to update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's existing value.
            </param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
                The new value for the key. This will be either be <paramref name="addValue" /> (if the key was absent) or the result
                of <paramref name="updateValueFactory" /> (if the key was present).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="dictionary" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="updateValueFactory" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
                Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist, or updates a
                key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> by using the specified function if the key already
                exists.
            </summary>
            <param name="dictionary">The dictionary to update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's existing value.
            </param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
                The new value for the key. This will be either be <paramref name="addValue" /> (if the key was absent) or the result
                of <paramref name="updateValueFactory" /> (if the key was present).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="dictionary" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="updateValueFactory" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the <see cref="T:System.Collections.Generic.Dictionary`2" /> if the key does
                not already exist, or to update a key/value pair in the <see cref="T:System.Collections.Generic.Dictionary`2" /> if the key already
                exists.
            </summary>
            <param name="dictionary">The dictionary to update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's existing value.
            </param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
                The new value for the key. This will be either be the result of <paramref name="addValueFactory "/> (if the key was
                absent) or the result of <paramref name="updateValueFactory" /> (if the key was present).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="dictionary" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="addValueFactory" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="updateValueFactory" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does
                not already exist, or to update a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already
                exists.
            </summary>
            <param name="dictionary">The dictionary to update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's existing value.
            </param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
                The new value for the key. This will be either be the result of <paramref name="addValueFactory "/> (if the key was
                absent) or the result of <paramref name="updateValueFactory" /> (if the key was present).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="dictionary" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="addValueFactory" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="updateValueFactory" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.AddOrUpdate``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``2,``1},System.Func{``0,``1,``2,``1},``2)">
            <summary>
                Uses the specified functions and argument to add a key/value pair to the <see cref="T:System.Collections.Generic.Dictionary`2" /> if
                the key does not already exist, or to update a key/value pair in the <see cref="T:System.Collections.Generic.Dictionary`2" /> if th
                key already exists.
            </summary>
            <param name="dictionary">The dictionary to update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's existing value.
            </param>
            <param name="factoryArgument">
                An argument to pass into <paramref name="addValueFactory" /> and <paramref name="updateValueFactory" />.
            </param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <typeparam name="TArg">
                The type of an argument to pass into <paramref name="addValueFactory" /> and <paramref name="updateValueFactory" />.
            </typeparam>
            <returns>
                The new value for the key. This will be either be the result of <paramref name="addValueFactory "/> (if the key was
                absent) or the result of <paramref name="updateValueFactory" /> (if the key was present).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="dictionary" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="addValueFactory" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="updateValueFactory" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.AddOrUpdate``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``2,``1},System.Func{``0,``1,``2,``1},``2)">
            <summary>
                Uses the specified functions and argument to add a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if
                the key does not already exist, or to update a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if th
                key already exists.
            </summary>
            <param name="dictionary">The dictionary to update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's existing value.
            </param>
            <param name="factoryArgument">
                An argument to pass into <paramref name="addValueFactory" /> and <paramref name="updateValueFactory" />.
            </param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <typeparam name="TArg">
                The type of an argument to pass into <paramref name="addValueFactory" /> and <paramref name="updateValueFactory" />.
            </typeparam>
            <returns>
                The new value for the key. This will be either be the result of <paramref name="addValueFactory "/> (if the key was
                absent) or the result of <paramref name="updateValueFactory" /> (if the key was present).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="dictionary" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="addValueFactory" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="updateValueFactory" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.ToConnectionString``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to a data connection
                string.
            </summary>
            <typeparam name="TKey">The type of the key element of the key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value element of the key/value pair.</typeparam>
            <param name="source">The source dictionary.</param>
            <returns>A <see cref="T:System.String" /> representing the dictionary as a key=value set, concatenated with <c>;</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.ToConnectionString``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``1,System.String})">
            <summary>
                Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to a data connection
                string.
            </summary>
            <typeparam name="TKey">The type of the key element of the key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value element of the key/value pair.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="selector">
                A transform function to apply to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> of each element.
            </param>
            <returns>A <see cref="T:System.String" /> representing the dictionary as a key=value set, concatenated with <c>;</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="selector" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.ToConnectionString``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
                Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to an data connection
                string.
            </summary>
            <typeparam name="TKey">The type of the key element of the key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value element of the key/value pair.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="keySelector">
                A transform function to apply to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> of each element.
            </param>
            <param name="valueSelector">
                A transform function to apply to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> of each element.
            </param>
            <returns>A <see cref="T:System.String" /> representing the dictionary as a key=value set, concatenated with <c>;</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="keySelector" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="valueSelector" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.ToGetParameters``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to a HTTP GET query string.
            </summary>
            <typeparam name="TKey">The type of the key element of the key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value element of the key/value pair.</typeparam>
            <param name="source">The source dictionary.</param>
            <returns>A <see cref="T:System.String" /> representing the dictionary as a key=value set, concatenated with <c>&amp;</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.ToGetParameters``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``1,System.String})">
            <summary>
                Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to a HTTP GET query string.
            </summary>
            <typeparam name="TKey">The type of the key element of the key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value element of the key/value pair.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="selector">
                A transform function to apply to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> of each element.
            </param>
            <returns>A <see cref="T:System.String" /> representing the dictionary as a key=value set, concatenated with <c>&amp;</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="selector" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.DictionaryExtensions.ToGetParameters``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
                Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to a HTTP GET query string.
            </summary>
            <typeparam name="TKey">The type of the key element of the key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value element of the key/value pair.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="keySelector">
                A transform function to apply to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> of each element.
            </param>
            <param name="valueSelector">
                A transform function to apply to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> of each element.
            </param>
            <returns>A <see cref="T:System.String" /> representing the dictionary as a key=value set, concatenated with <c>&amp;</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="keySelector" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="valueSelector" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="T:X10D.Collections.EnumerableExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.CountWhereNot``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns a number that represents how many elements in the specified sequence do not satisfy a condition.
            </summary>
            <param name="source">A sequence that contains elements to be tested and counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>
                A number that represents how many elements in the sequence do not satisfy the condition in the
                <paramref name="predicate" /> function.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
            <exception cref="T:System.OverflowException">
                The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.
            </exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.FirstWhereNot``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the first element in a sequence that does not satisfy a specified condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" /></typeparam>
            <returns>The first element in the sequence that fails the test in the specified predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                <para>No element satisfies the condition in predicate.</para>
                 -or-
                <para>The source sequence is empty.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.FirstWhereNotOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the first element in a sequence that does not satisfy a specified condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" /></typeparam>
            <returns>
                <see langword="default(TSource)" /> if <paramref name="source" /> is empty or if no element passes the test specified
                by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source" /> that fails the test
                specified by <paramref name="predicate" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
                Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements on which to perform <paramref name="action" />.
            </param>
            <param name="action">
                The <see cref="T:System.Action`2" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1" />. The
                <see cref="T:System.Int32" /> argument passed to this delegate represents the index.
            </param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="action" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements on which to perform <paramref name="action" />.
            </param>
            <param name="action">
                The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="action" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.DisposeAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Calls <see cref="M:System.IDisposable.Dispose" /> on all elements of the <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="source">The enumerable collection whose elements to dispose.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <seealso cref="M:X10D.Collections.CollectionExtensions.ClearAndDisposeAll``1(System.Collections.Generic.ICollection{``0})" />
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.DisposeAllAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Asynchronously calls <see cref="M:System.IAsyncDisposable.DisposeAsync" /> on all elements of the
                <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="source">The enumerable collection whose elements to dispose.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <seealso cref="M:X10D.Collections.CollectionExtensions.ClearAndDisposeAllAsync``1(System.Collections.Generic.ICollection{``0})" />
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.LastWhereNot``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the last element in a sequence that does not satisfy a specified condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" /></typeparam>
            <returns>The last element in the sequence that fails the test in the specified predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                <para>No element satisfies the condition in predicate.</para>
                 -or-
                <para>The source sequence is empty.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.LastWhereNotOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the last element in a sequence that does not satisfy a specified condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" /></typeparam>
            <returns>
                <see langword="default(TSource)" /> if <paramref name="source" /> is empty or if no element passes the test specified
                by <paramref name="predicate"/>; otherwise, the last element in <paramref name="source" /> that fails the test
                specified by <paramref name="predicate" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.Shuffled``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
                Reorganizes the elements in an enumerable by implementing a Fisher-Yates shuffle, and returns th shuffled result.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to shuffle.</param>
            <param name="random">Optional. The <see cref="T:System.Random" /> instance to use for the shuffling.</param>
            <returns>The shuffled collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.WhereNot``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Filters a sequence of values based on a predicate, such that all elements in the result do not match the predicate.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that do not satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
        </member>
        <member name="M:X10D.Collections.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Filters a sequence of values by omitting elements that are <see langword="null" /> (<see langword="Nothing" /> in
                Visual Basic).
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that are not <see langword="null" />
                (<see langword="Nothing" /> in Visual Basic).
            </returns>
        </member>
        <member name="T:X10D.Collections.Int16Extensions">
            <summary>
                Collection-related extension methods for <see cref="T:System.Int16" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.Int16Extensions.Unpack(System.Int16)">
            <summary>
                Unpacks this 16-bit signed integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <returns>An array of <see cref="T:System.Boolean" /> with length 16.</returns>
        </member>
        <member name="M:X10D.Collections.Int16Extensions.Unpack(System.Int16,System.Span{System.Boolean})">
            <summary>
                Unpacks this 16-bit signed integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <param name="destination">When this method returns, contains the unpacked booleans from <paramref name="value" />.</param>
            <exception cref="T:System.ArgumentException"><paramref name="destination" /> is not large enough to contain the result.</exception>
        </member>
        <member name="T:X10D.Collections.Int32Extensions">
            <summary>
                Collection-related extension methods for <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.Int32Extensions.Unpack(System.Int32)">
            <summary>
                Unpacks this 32-bit signed integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <returns>An array of <see cref="T:System.Boolean" /> with length 32.</returns>
        </member>
        <member name="M:X10D.Collections.Int32Extensions.Unpack(System.Int32,System.Span{System.Boolean})">
            <summary>
                Unpacks this 32-bit signed integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <param name="destination">When this method returns, contains the unpacked booleans from <paramref name="value" />.</param>
            <exception cref="T:System.ArgumentException"><paramref name="destination" /> is not large enough to contain the result.</exception>
        </member>
        <member name="T:X10D.Collections.Int64Extensions">
            <summary>
                Collection-related extension methods for <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.Int64Extensions.Unpack(System.Int64)">
            <summary>
                Unpacks this 64-bit signed integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <returns>An array of <see cref="T:System.Boolean" /> with length 64.</returns>
        </member>
        <member name="M:X10D.Collections.Int64Extensions.Unpack(System.Int64,System.Span{System.Boolean})">
            <summary>
                Unpacks this 64-bit signed integer into a boolean list, treating it as a bit field.
            </summary>
            <param name="value">The value to unpack.</param>
            <param name="destination">When this method returns, contains the unpacked booleans from <paramref name="value" />.</param>
            <exception cref="T:System.ArgumentException"><paramref name="destination" /> is not large enough to contain the result.</exception>
        </member>
        <member name="T:X10D.Collections.ListExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.IList`1" /> and <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
            </summary>
        </member>
        <member name="M:X10D.Collections.ListExtensions.Fill``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Assigns the given value to each element of the list.
            </summary>
            <param name="source">The list to be filled.</param>
            <param name="value">The value to assign to each list element.</param>
            <typeparam name="T">The type of the elements in the list.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.Fill``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32)">
            <summary>
                Assigns the given value to the elements of the list which are within the range of <paramref name="startIndex" />
                (inclusive) and the next <paramref name="count" /> number of indices.
            </summary>
            <param name="source">The list to be filled.</param>
            <param name="value">The value to assign to each list element.</param>
            <param name="startIndex">A 32-bit integer that represents the index in the list at which filling begins.</param>
            <param name="count">The number of elements to fill.</param>
            <typeparam name="T">The type of the elements in the list.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex" /> is less than 0.</para>
                -or-
                <para><paramref name="count" /> is less than 0.</para>
                -or-
                <para><paramref name="startIndex" /> + <paramref name="count" /> exceeds the bounds of the list.</para>
            </exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
                Searches for the specified object and returns the zero-based index of the first occurrence within the entire
                <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
            </summary>
            <param name="source">The list to search</param>
            <param name="item">
                The object to locate in the <see cref="T:System.Collections.Generic.IReadOnlyList`1" />. The value can be <see langword="true" /> for reference
                types.
            </param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                The zero-based index of the first occurrence of item within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise,
                -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the first occurrence within the range of
                elements in the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> that extends from the specified index to the last element.
            </summary>
            <param name="source">The list to search</param>
            <param name="item">
                The object to locate in the <see cref="T:System.Collections.Generic.IReadOnlyList`1" />. The value can be <see langword="true" /> for reference
                types.
            </param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                The zero-based index of the first occurrence of item within the range of elements in the
                <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> that starts at index and contains count number of elements, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
            </exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the first occurrence within the range of
                elements in the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> that starts at the specified index and contains the specified number
                of elements.
            </summary>
            <param name="source">The list to search</param>
            <param name="item">
                The object to locate in the <see cref="T:System.Collections.Generic.IReadOnlyList`1" />. The value can be <see langword="true" /> for reference
                types.
            </param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                The zero-based index of the first occurrence of item within the range of elements in the
                <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> that starts at index and contains count number of elements, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
                </para>
                -or-
                <para><paramref name="count" /> is less than 0.</para>
                -or-
                <para>
                    <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the
                    <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
                </para>
            </exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.Random``1(System.Collections.Generic.IReadOnlyList{``0},System.Random)">
            <summary>
                Returns a random element from the current list using a specified <see cref="T:System.Random" /> instance.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source collection from which to draw.</param>
            <param name="random">
                The <see cref="T:System.Random" /> instance to use for the shuffling. If <see langword="null" /> is specified, a shared
                instance is used.
            </param>
            <returns>A random element of type <typeparamref name="T" /> from <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <example>
                <code lang="csharp">
            var list = new List&lt;int&gt; { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
            var number = list.Random();
                </code>
            </example>
        </member>
        <member name="M:X10D.Collections.ListExtensions.RemoveRange``1(System.Collections.Generic.IList{``0},System.Range)">
            <summary>
                Removes a range of elements from the list.
            </summary>
            <param name="source">The list whose elements to remove.</param>
            <param name="range">The range of elements to remove.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="range" /> defines an invalid range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="range" /> defines an end index whose value is greater than or equal to the count of elements in the
                list.
            </exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
                Reorganizes the elements in a list by implementing a Fisher-Yates shuffle.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IList`1" /> to shuffle.</param>
            <param name="random">
                The <see cref="T:System.Random" /> instance to use for the shuffling. If <see langword="null" /> is specified, a shared
                instance is used.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.Slice``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
                Forms a slice out of the current list that begins at a specified index.
            </summary>
            <param name="source">The list to slice.</param>
            <param name="start">The index at which to begin the slice.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                A list that consists of all elements of the current list from <paramref name="start" /> to the end of the list.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="start" /> is less than zero or greater than <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count" />.
            </exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.Slice``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
                Forms a slice out of the current list that begins at a specified index for a specified length.
            </summary>
            <param name="source">The list to slice.</param>
            <param name="start">The index at which to begin the slice.</param>
            <param name="length">The desired length for the slice.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                A list that consists of all elements of the current list from <paramref name="start" /> to the end of the list.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="start" /> or <paramref name="start" /> + <paramref name="length" /> is less than zero or greater than
                <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count" />.
            </exception>
        </member>
        <member name="M:X10D.Collections.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Swaps all elements in a list with the elements in another list.
            </summary>
            <param name="source">The first list.</param>
            <param name="other">The second list.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" /> and <paramref name="other" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="other" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="T:X10D.Collections.SpanExtensions">
            <summary>
                Extension methods for <see cref="T:System.Span`1" /> and <see cref="T:System.ReadOnlySpan`1" />
            </summary>
        </member>
        <member name="M:X10D.Collections.SpanExtensions.Count``1(System.Span{``0}@,``0)">
            <summary>
                Returns the number of times that a specified element appears in a span of elements of the same type.
            </summary>
            <param name="source">The source to search.</param>
            <param name="element">The element to count.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>The number of times that <paramref name="element" /> appears in <paramref name="source" />.</returns>
        </member>
        <member name="M:X10D.Collections.SpanExtensions.Count``1(System.ReadOnlySpan{``0}@,``0)">
            <summary>
                Returns the number of times that a specified element appears in a read-only span of elements of the same type.
            </summary>
            <param name="source">The source to search.</param>
            <param name="element">The element to count.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>The number of times that <paramref name="element" /> appears in <paramref name="source" />.</returns>
        </member>
        <member name="M:X10D.Collections.SpanExtensions.AsReadOnly``1(System.Span{``0}@)">
            <summary>
                Returns a read-only <see cref="T:System.ReadOnlySpan`1" /> wrapper for the current span.
            </summary>
            <param name="source">The source span.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>A <see cref="T:System.ReadOnlySpan`1" /> which wraps the elements in <paramref name="source" />.</returns>
        </member>
        <member name="M:X10D.Collections.SpanExtensions.Split``1(System.Span{``0}@,``0)">
            <summary>
                Splits a span of elements into sub-spans based on a delimiting element.
            </summary>
            <param name="source">The span to split.</param>
            <param name="delimiter">The delimiting element.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                An enumerator which wraps <paramref name="source"/> and delimits the elements based on <paramref name="delimiter" />.
            </returns>
        </member>
        <member name="M:X10D.Collections.SpanExtensions.Split``1(System.ReadOnlySpan{``0}@,``0)">
            <summary>
                Splits a span of elements into sub-spans based on a delimiting element.
            </summary>
            <param name="source">The span to split.</param>
            <param name="delimiter">The delimiting element.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                An enumerator which wraps <paramref name="source"/> and delimits the elements based on <paramref name="delimiter" />.
            </returns>
        </member>
        <member name="M:X10D.Collections.SpanExtensions.Split``1(System.Span{``0}@,System.ReadOnlySpan{``0}@)">
            <summary>
                Splits a span of elements into sub-spans based on a span of delimiting elements.
            </summary>
            <param name="source">The span to split.</param>
            <param name="delimiter">The span of delimiting elements.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                An enumerator which wraps <paramref name="source"/> and delimits the elements based on <paramref name="delimiter" />.
            </returns>
        </member>
        <member name="M:X10D.Collections.SpanExtensions.Split``1(System.ReadOnlySpan{``0}@,System.ReadOnlySpan{``0}@)">
            <summary>
                Splits a span of elements into sub-spans based on a span of delimiting elements.
            </summary>
            <param name="source">The span to split.</param>
            <param name="delimiter">The span of delimiting elements.</param>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <returns>
                An enumerator which wraps <paramref name="source"/> and delimits the elements based on <paramref name="delimiter" />.
            </returns>
        </member>
        <member name="T:X10D.Collections.SpanSplitEnumerator`1">
            <summary>
                Enumerates the elements of a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
            <typeparam name="T">The type of elements in the span.</typeparam>
        </member>
        <member name="M:X10D.Collections.SpanSplitEnumerator`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Collections.SpanSplitEnumerator`1" /> struct.
            </summary>
            <param name="source">The source span.</param>
            <param name="delimiter">The delimiting span of elements.</param>
        </member>
        <member name="M:X10D.Collections.SpanSplitEnumerator`1.#ctor(System.ReadOnlySpan{`0},`0)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Collections.SpanSplitEnumerator`1" /> struct.
            </summary>
            <param name="source">The source span.</param>
            <param name="delimiter">The delimiting element.</param>
        </member>
        <member name="P:X10D.Collections.SpanSplitEnumerator`1.Current">
            <summary>
                Gets the element at the current position of the enumerator.
            </summary>
            <value>The element in the <see cref="T:System.ReadOnlySpan`1" /> at the current position of the enumerator.</value>
        </member>
        <member name="M:X10D.Collections.SpanSplitEnumerator`1.GetEnumerator">
            <summary>
                Returns the current enumerator.
            </summary>
            <returns>The current instance of <see cref="T:X10D.Collections.SpanSplitEnumerator`1" />.</returns>
            <remarks>
                This method exists to provide the ability to enumerate within a <c>foreach</c> loop. It should not be called
                manually.
            </remarks>
        </member>
        <member name="M:X10D.Collections.SpanSplitEnumerator`1.MoveNext">
            <summary>
                Advances the enumerator to the next element of the <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
            <returns>
                <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" />
                if the enumerator has passed the end of the span.
            </returns>
        </member>
        <member name="T:X10D.Core.EnumExtensions">
            <summary>
                Extension methods for <see langword="enum" /> types.
            </summary>
        </member>
        <member name="M:X10D.Core.EnumExtensions.Next``1(``0)">
            <summary>
                Returns the value which is defined proceeding this value in the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="value">The value whose proceeding value to retrieve.</param>
            <returns>
                A value of <typeparamref name="T" /> that is considered to be the next value defined after <paramref name="value" />,
                or the first value if <paramref name="value" /> is the final field of the enumeration.
            </returns>
        </member>
        <member name="M:X10D.Core.EnumExtensions.NextUnchecked``1(``0)">
            <summary>
                Returns the value which is defined proceeding this value in the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="value">The value whose proceeding value to retrieve.</param>
            <returns>
                A value of <typeparamref name="T" /> that is considered to be the next value defined after
                <paramref name="value" />.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="value" /> is the final field of the enumeration.</exception>
        </member>
        <member name="M:X10D.Core.EnumExtensions.Previous``1(``0)">
            <summary>
                Returns the value which is defined preceeding this value in the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="value">The value whose preceeding value to retrieve.</param>
            <returns>
                A value of <typeparamref name="T" /> that is considered to be the previous value defined after
                <paramref name="value" />, or the last value if <paramref name="value" /> is the first field of the enumeration.
            </returns>
        </member>
        <member name="M:X10D.Core.EnumExtensions.PreviousUnchecked``1(``0)">
            <summary>
                Returns the value which is defined preceeding this value in the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="value">The value whose preceeding value to retrieve.</param>
            <returns>
                A value of <typeparamref name="T" /> that is considered to be the previous value defined after
                <paramref name="value" />, or the last value if <paramref name="value" /> is the first field of the enumeration.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="value" /> is the first field of the enumeration.</exception>
        </member>
        <member name="T:X10D.Core.Extensions">
            <summary>
                Extension methods which apply to all types.
            </summary>
        </member>
        <member name="M:X10D.Core.Extensions.AsArrayValue``1(``0)">
            <summary>
                Returns an array containing the specified value.
            </summary>
            <param name="value">The value to encapsulate.</param>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <returns>
                An array of type <typeparamref name="T" /> with length 1, whose only element is <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Core.Extensions.AsEnumerableValue``1(``0)">
            <summary>
                Returns an enumerable collection containing the specified value.
            </summary>
            <param name="value">The value to encapsulate.</param>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <returns>
                An enumerable collection of type <typeparamref name="T" />, whose only element is <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Core.Extensions.RepeatValue``1(``0,System.Int32)">
            <summary>
                Returns an enumerable collection containing the current value repeated a specified number of times.
            </summary>
            <param name="value">The value to repeat.</param>
            <param name="count">The number of times to repeat <paramref name="value" />.</param>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <returns>An enumerable collection containing <paramref name="value" /> repeated <paramref name="count" /> times.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" /> is less than 0.</exception>
        </member>
        <member name="T:X10D.Core.NullableExtensions">
            <summary>
                Extension methods for <see cref="T:System.Nullable`1" />
            </summary>
        </member>
        <member name="M:X10D.Core.NullableExtensions.TryGetValue``1(System.Nullable{``0},``0@)">
            <summary>
                Attempts to get the value of a <see cref="T:System.Nullable`1" />, and returns a value indicating the success of the
                operation.
            </summary>
            <param name="value">The nullable value.</param>
            <param name="result">
                When this method returns, contains the result of <see cref="P:System.Nullable`1.Value" />, if
                <see cref="P:System.Nullable`1.HasValue" /> is <see langword="true" />; otherwise, returns the default value for
                <typeparamref name="T" />.
            </param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>
                <see langword="true" /> if the value's <see cref="P:System.Nullable`1.HasValue" /> is <see langword="true" />; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="T:X10D.Core.RandomExtensions">
            <summary>
                Extension methods for <see cref="T:System.Random" />.
            </summary>
        </member>
        <member name="M:X10D.Core.RandomExtensions.Next``1(System.Random)">
            <summary>
                Returns a random value that defined in a specified enum.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <typeparam name="T">An enum type.</typeparam>
            <returns>
                A <typeparamref name="T" /> value at index <c>n</c> where <c>n = </c><see cref="M:System.Random.Next(System.Int32)" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextBoolean(System.Random)">
            <summary>
                Returns either <see langword="true" /> or <see langword="false" /> based on the next generation of the current
                <see cref="T:System.Random" />.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>
                <see langword="true" /> if the return value from <see cref="M:System.Random.NextDouble" /> is greater than or
                equal to 0.5
                -or-
                <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextDouble(System.Random,System.Double)">
            <summary>
                Returns a non-negative random double-precision floating point number that is less than the specified maximum.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number returned. This value must be greater than or equal to 0.
            </param>
            <returns>
                A random double-precision floating point number that is greater than or equal to 0, and less than
                <paramref name="maxValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
                Returns a random double-precision floating point number that is within a specified range.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number returned. This value must be greater than or equal to
                <paramref name="minValue" />.
            </param>
            <returns>
                A random double-precision floating point number between <paramref name="minValue" /> and
                <paramref name="maxValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="maxValue" /> is less than <paramref name="minValue" />.
            </exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextFrom``1(System.Random,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns a random element from <paramref name="source" /> using the <see cref="T:System.Random" /> instance.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="source">The source collection from which to draw.</param>
            <returns>A random element of type <typeparamref name="T" /> from <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="random" /> is is <see langword="null" />
                -or-
                <paramref name="source" /> is <see langword="null" />.
            </exception>
            <example>
                <code lang="csharp">
            var list = new List&lt;int&gt; { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
            var random = new Random();
            var number = random.NextFrom(list);
            </code>
            </example>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextFrom``1(System.Random,System.Span{``0})">
             <summary>
                 Returns a random element from the specified span of elements using the current <see cref="T:System.Random" /> instance.
             </summary>
             <typeparam name="T">The element type.</typeparam>
             <param name="random">The <see cref="T:System.Random" /> instance.</param>
             <param name="source">The span of elements from which to draw.</param>
             <returns>A random element of type <typeparamref name="T" /> from <paramref name="source" />.</returns>
             <exception cref="T:System.ArgumentNullException">
                 <paramref name="random" /> is is <see langword="null" />
                 -or-
                 <paramref name="source" /> is <see langword="null" />.
             </exception>
             <example>
                 <code lang="csharp">
             Span&lt;int&gt; span = stackalloc span[5];
             // populate the span ...
            
             var random = new Random();
             var number = random.NextFrom(span);
             </code>
             </example>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextFrom``1(System.Random,System.ReadOnlySpan{``0})">
             <summary>
                 Returns a random element from the specified readonly span of elements using the current <see cref="T:System.Random" />
                 instance.
             </summary>
             <typeparam name="T">The element type.</typeparam>
             <param name="random">The <see cref="T:System.Random" /> instance.</param>
             <param name="source">The readonly span of elements from which to draw.</param>
             <returns>A random element of type <typeparamref name="T" /> from <paramref name="source" />.</returns>
             <exception cref="T:System.ArgumentNullException">
                 <paramref name="random" /> is is <see langword="null" />
                 -or-
                 <paramref name="source" /> is <see langword="null" />.
             </exception>
             <example>
                 <code lang="csharp">
             Span&lt;int&gt; span = stackalloc span[5];
             // populate the span ...
            
             var random = new Random();
             var number = random.NextFrom(span.AsReadOnly());
             </code>
             </example>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextByte(System.Random)">
            <summary>
                Returns a non-negative random integer.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>
                An 8-bit unsigned integer that is greater than or equal to 0, and less than <see cref="F:System.Byte.MaxValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextByte(System.Random,System.Byte)">
            <summary>
                Returns a non-negative random integer.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or
                equal to 0.
            </param>
            <returns>
                An 8-bit unsigned integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the
                range of return values ordinarily includes 0 but not <paramref name="maxValue" />. However, if
                <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextByte(System.Random,System.Byte,System.Byte)">
            <summary>
                Returns a non-negative random integer.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or
                equal to <paramref name="minValue" />.
            </param>
            <returns>
                An 8-bit unsigned integer greater than or equal to <paramref name="minValue" /> and less than
                <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not
                <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />,
                <paramref name="minValue" /> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="minValue" /> is greater than <paramref name="maxValue" />.
            </exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextInt16(System.Random)">
            <summary>
                Returns a non-negative random integer.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>
                An 16-bit signed integer that is greater than or equal to 0, and less than <see cref="F:System.Int16.MaxValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextInt16(System.Random,System.Int16)">
            <summary>
                Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or
                equal to 0.
            </param>
            <returns>
                A 16-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the
                range of return values ordinarily includes 0 but not <paramref name="maxValue" />. However, if
                <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextInt16(System.Random,System.Int16,System.Int16)">
            <summary>
                Returns a random integer that is within a specified range.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or
                equal to <paramref name="minValue" />.
            </param>
            <returns>
                An 8-bit unsigned integer greater than or equal to <paramref name="minValue" /> and less than
                <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not
                <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />,
                <paramref name="minValue" /> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="minValue" /> is greater than <paramref name="maxValue" />.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextSingle(System.Random)">
            <summary>
                Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextSingle(System.Random,System.Single)">
            <summary>
                Returns a non-negative random single-precision floating point number that is less than the specified maximum.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number returned. This value must be greater than or equal to 0.
            </param>
            <returns>
                A random single-precision floating point number that is greater than or equal to 0, and less than
                <paramref name="maxValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="maxValue" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextSingle(System.Random,System.Single,System.Single)">
            <summary>
                Returns a random single-precision floating point number that is within a specified range.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number returned. This value must be greater than or equal to
                <paramref name="minValue" />.
            </param>
            <returns>
                A random single-precision floating point number between <paramref name="minValue" /> and
                <paramref name="maxValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="maxValue" /> is less than <paramref name="minValue" />.
            </exception>
        </member>
        <member name="M:X10D.Core.RandomExtensions.NextString(System.Random,System.Collections.Generic.IReadOnlyList{System.Char},System.Int32)">
            <summary>
                Returns a new string of a specified length which is composed of specified characters.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <param name="source">The source collection of characters to poll.</param>
            <param name="length">The length of the new string to generate.</param>
            <returns>
                A <see cref="T:System.String" /> whose length is equal to that of <paramref name="length" />, composed of characters
                specified by the characters in <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="random" /> is <see langword="null" />.
                -or-
                <paramref name="source" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is less than 0.</exception>
        </member>
        <member name="T:X10D.Core.SpanExtensions">
            <summary>
            Extension methods for <see cref="T:System.Span`1"/> and <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="M:X10D.Core.SpanExtensions.Contains``1(System.Span{``0},``0)">
            <summary>
                Returns a value indicating whether a specific enumeration value is contained with the current span of elements.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="span" />.</typeparam>
            <param name="span">The span of elements.</param>
            <param name="value">The value to search for.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is contained with <paramref name="span" />; otherwise,
                <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentException">The size of <typeparamref name="T" /> is unsupported.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
            <summary>
                Returns a value indicating whether a specific enumeration value is contained with the current readonly span of
                elements.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="span" />.</typeparam>
            <param name="span">The readonly span of elements.</param>
            <param name="value">The value to search for.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is contained with <paramref name="span" />; otherwise,
                <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentException">The size of <typeparamref name="T" /> is unsupported.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackByte(System.Span{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.Span`1"/> of booleans into a <see cref="T:System.Byte" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>An 8-bit unsigned integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 8 elements.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackByte(System.ReadOnlySpan{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.ReadOnlySpan`1"/> of booleans into a <see cref="T:System.Byte" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>An 8-bit unsigned integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 8 elements.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackInt16(System.Span{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.Span`1"/> of booleans into a <see cref="T:System.Int16" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>A 16-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 16 elements.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackInt16(System.ReadOnlySpan{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.ReadOnlySpan`1"/> of booleans into a <see cref="T:System.Int16" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>A 16-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 16 elements.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackInt32(System.Span{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.Span`1"/> of booleans into a <see cref="T:System.Int32" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>A 32-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 32 elements.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackInt32(System.ReadOnlySpan{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.ReadOnlySpan`1"/> of booleans into a <see cref="T:System.Int32" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>A 32-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 32 elements.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackInt64(System.Span{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.Span`1"/> of booleans into a <see cref="T:System.Int64" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>A 64-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 64 elements.</exception>
        </member>
        <member name="M:X10D.Core.SpanExtensions.PackInt64(System.ReadOnlySpan{System.Boolean})">
            <summary>
                Packs a <see cref="T:System.ReadOnlySpan`1"/> of booleans into a <see cref="T:System.Int64" />.
            </summary>
            <param name="source">The span of booleans to pack.</param>
            <returns>A 64-bit signed integer containing the packed booleans.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> contains more than 64 elements.</exception>
        </member>
        <member name="T:X10D.Drawing.Circle">
            <summary>
                Represents a circle that is composed of a 32-bit signed integer center point and radius.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Circle.Empty">
            <summary>
                The empty circle. That is, a circle whose center point is (0, 0) and whose radius is 0.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Circle.Unit">
            <summary>
                The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Circle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Circle" /> struct.
            </summary>
            <param name="centerX">The X coordinate of the center point.</param>
            <param name="centerY">The Y coordinate of the center point.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:X10D.Drawing.Circle.#ctor(System.Drawing.Point,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Circle" /> struct.
            </summary>
            <param name="center">The center point of the circle.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="P:X10D.Drawing.Circle.Area">
            <summary>
                Gets the area of the circle.
            </summary>
            <value>The area of the circle, calculated as <c>πr²</c>.</value>
        </member>
        <member name="P:X10D.Drawing.Circle.Center">
            <summary>
                Gets the center point of the circle.
            </summary>
            <value>The center point.</value>
        </member>
        <member name="P:X10D.Drawing.Circle.Circumference">
            <summary>
                Gets the circumference of the circle.
            </summary>
            <value>The circumference of the circle, calculated as <c>2πr</c>.</value>
        </member>
        <member name="P:X10D.Drawing.Circle.Diameter">
            <summary>
                Gets the diameter of the circle.
            </summary>
            <value>The diameter. This is always twice the <see cref="P:X10D.Drawing.Circle.Radius" />.</value>
        </member>
        <member name="P:X10D.Drawing.Circle.Radius">
            <summary>
                Gets the radius of the circle.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="M:X10D.Drawing.Circle.op_Equality(X10D.Drawing.Circle,X10D.Drawing.Circle)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Circle" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Circle.op_Inequality(X10D.Drawing.Circle,X10D.Drawing.Circle)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Circle" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Circle.op_LessThan(X10D.Drawing.Circle,X10D.Drawing.Circle)">
            <summary>
                Returns a value indicating whether the radius of one circle is less than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Circle.Radius" /> of <paramref name="left" /> is less than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Circle.op_GreaterThan(X10D.Drawing.Circle,X10D.Drawing.Circle)">
            <summary>
                Returns a value indicating whether the radius of one circle is greater than to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Circle.Radius" /> of <paramref name="left" /> is greater than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Circle.op_LessThanOrEqual(X10D.Drawing.Circle,X10D.Drawing.Circle)">
            <summary>
                Returns a value indicating whether the radius of one circle is less than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Circle.Radius" /> of <paramref name="left" /> is less than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Circle.op_GreaterThanOrEqual(X10D.Drawing.Circle,X10D.Drawing.Circle)">
            <summary>
                Returns a value indicating whether the radius of one circle is greater than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Circle.Radius" /> of <paramref name="left" /> is greater than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Circle.op_Explicit(X10D.Drawing.CircleF)~X10D.Drawing.Circle">
            <summary>
                Explicitly converts a <see cref="T:X10D.Drawing.Circle" /> to a <see cref="T:X10D.Drawing.CircleF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted circle.</returns>
        </member>
        <member name="M:X10D.Drawing.Circle.FromCircleF(X10D.Drawing.CircleF)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Circle" /> to a <see cref="T:X10D.Drawing.CircleF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted circle.</returns>
        </member>
        <member name="M:X10D.Drawing.Circle.CompareTo(System.Object)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.Circle" />.
             </summary>
             <param name="obj">The other object.</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="obj" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Circle.Radius" /> of this instance is less than that of <paramref name="obj" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="obj" />, or the <see cref="P:X10D.Drawing.Circle.Radius" /> of both this instance
                             and <paramref name="obj" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Circle.Radius" /> of this instance is greater than that of <paramref name="obj" />, or
                             <paramref name="obj" /> is <see langword="null" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>Comparison only takes into consideration the <see cref="P:X10D.Drawing.Circle.Radius" />.</remarks>
             <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not an instance of <see cref="T:X10D.Drawing.Circle" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Circle.CompareTo(X10D.Drawing.Circle)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.Circle" />.
             </summary>
             <param name="other">The other circle.</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="other" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Circle.Radius" /> of this instance is less than that of <paramref name="other" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="other" />, or the <see cref="P:X10D.Drawing.Circle.Radius" /> of both this instance
                             and <paramref name="other" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Circle.Radius" /> of this instance is greater than that of <paramref name="other" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>Comparison only takes into consideration the <see cref="P:X10D.Drawing.Circle.Radius" />.</remarks>
        </member>
        <member name="M:X10D.Drawing.Circle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Circle.Equals(X10D.Drawing.Circle)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Circle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.CircleF">
            <summary>
                Represents a circle that is composed of a single-precision floating-point center point and radius.
            </summary>
        </member>
        <member name="F:X10D.Drawing.CircleF.Empty">
            <summary>
                The empty circle. That is, a circle whose center point is (0, 0) and whose radius is 0.
            </summary>
        </member>
        <member name="F:X10D.Drawing.CircleF.Unit">
            <summary>
                The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1.
            </summary>
        </member>
        <member name="M:X10D.Drawing.CircleF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.CircleF" /> struct.
            </summary>
            <param name="centerX">The X coordinate of the center point.</param>
            <param name="centerY">The Y coordinate of the center point.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:X10D.Drawing.CircleF.#ctor(System.Numerics.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.CircleF" /> struct.
            </summary>
            <param name="center">The center point of the circle.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:X10D.Drawing.CircleF.#ctor(System.Drawing.PointF,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.CircleF" /> struct.
            </summary>
            <param name="center">The center point of the circle.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="P:X10D.Drawing.CircleF.Area">
            <summary>
                Gets the area of the circle.
            </summary>
            <value>The area of the circle, calculated as <c>πr²</c>.</value>
        </member>
        <member name="P:X10D.Drawing.CircleF.Center">
            <summary>
                Gets the center point of the circle.
            </summary>
            <value>The center point.</value>
        </member>
        <member name="P:X10D.Drawing.CircleF.Circumference">
            <summary>
                Gets the circumference of the circle.
            </summary>
            <value>The circumference of the circle, calculated as <c>2πr</c>.</value>
        </member>
        <member name="P:X10D.Drawing.CircleF.Diameter">
            <summary>
                Gets the diameter of the circle.
            </summary>
            <value>The diameter. This is always twice the <see cref="P:X10D.Drawing.CircleF.Radius" />.</value>
        </member>
        <member name="P:X10D.Drawing.CircleF.Radius">
            <summary>
                Gets the radius of the circle.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="M:X10D.Drawing.CircleF.op_Equality(X10D.Drawing.CircleF,X10D.Drawing.CircleF)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.CircleF" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.op_Inequality(X10D.Drawing.CircleF,X10D.Drawing.CircleF)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.CircleF" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.op_LessThan(X10D.Drawing.CircleF,X10D.Drawing.CircleF)">
            <summary>
                Returns a value indicating whether the radius of one circle is less than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.CircleF.Radius" /> of <paramref name="left" /> is less than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.op_GreaterThan(X10D.Drawing.CircleF,X10D.Drawing.CircleF)">
            <summary>
                Returns a value indicating whether the radius of one circle is greater than to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.CircleF.Radius" /> of <paramref name="left" /> is greater than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.op_LessThanOrEqual(X10D.Drawing.CircleF,X10D.Drawing.CircleF)">
            <summary>
                Returns a value indicating whether the radius of one circle is less than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.CircleF.Radius" /> of <paramref name="left" /> is less than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.op_GreaterThanOrEqual(X10D.Drawing.CircleF,X10D.Drawing.CircleF)">
            <summary>
                Returns a value indicating whether the radius of one circle is greater than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.CircleF.Radius" /> of <paramref name="left" /> is greater than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.op_Implicit(X10D.Drawing.Circle)~X10D.Drawing.CircleF">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Circle" /> to a <see cref="T:X10D.Drawing.CircleF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted circle.</returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.FromCircle(X10D.Drawing.Circle)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Circle" /> to a <see cref="T:X10D.Drawing.CircleF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted circle.</returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.CompareTo(System.Object)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.CircleF" />.
             </summary>
             <param name="obj">The other object.</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="obj" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.CircleF.Radius" /> of this instance is less than that of <paramref name="obj" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="obj" />, or the <see cref="P:X10D.Drawing.CircleF.Radius" /> of both this instance
                             and <paramref name="obj" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.CircleF.Radius" /> of this instance is greater than that of <paramref name="obj" />, or
                             <paramref name="obj" /> is <see langword="null" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>Comparison only takes into consideration the <see cref="P:X10D.Drawing.CircleF.Radius" />.</remarks>
             <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not an instance of <see cref="T:X10D.Drawing.CircleF" />.</exception>
        </member>
        <member name="M:X10D.Drawing.CircleF.CompareTo(X10D.Drawing.CircleF)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.CircleF" />.
             </summary>
             <param name="other">The other circle.</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="other" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.CircleF.Radius" /> of this instance is less than that of <paramref name="other" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="other" />, or the <see cref="P:X10D.Drawing.CircleF.Radius" /> of both this instance
                             and <paramref name="other" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.CircleF.Radius" /> of this instance is greater than that of <paramref name="other" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>Comparison only takes into consideration the <see cref="P:X10D.Drawing.CircleF.Radius" />.</remarks>
        </member>
        <member name="M:X10D.Drawing.CircleF.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.CircleF.Equals(X10D.Drawing.CircleF)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.CircleF.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.ColorExtensions">
            <summary>
                Drawing-related extensions for <see cref="T:System.Drawing.Color" />.
            </summary>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.Deconstruct(System.Drawing.Color,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
                Deconstructs the current color into its ARGB components.
            </summary>
            <param name="color">The source color.</param>
            <param name="a">
                When this method returns, contains the <see cref="P:System.Drawing.Color.A" /> component of <paramref name="color" />.
            </param>
            <param name="r">
                When this method returns, contains the <see cref="P:System.Drawing.Color.R" /> component of <paramref name="color" />.
            </param>
            <param name="g">
                When this method returns, contains the <see cref="P:System.Drawing.Color.G" /> component of <paramref name="color" />.
            </param>
            <param name="b">
                When this method returns, contains the <see cref="P:System.Drawing.Color.B" /> component of <paramref name="color" />.
            </param>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.Deconstruct(System.Drawing.Color,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
                Deconstructs the current color into its RGB components.
            </summary>
            <param name="color">The source color.</param>
            <param name="r">
                When this method returns, contains the <see cref="P:System.Drawing.Color.R" /> component of <paramref name="color" />.
            </param>
            <param name="g">
                When this method returns, contains the <see cref="P:System.Drawing.Color.G" /> component of <paramref name="color" />.
            </param>
            <param name="b">
                When this method returns, contains the <see cref="P:System.Drawing.Color.B" /> component of <paramref name="color" />.
            </param>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.GetClosestConsoleColor(System.Drawing.Color)">
            <summary>
                Returns a <see cref="T:System.ConsoleColor" /> which most closely resembles the current color.
            </summary>
            <param name="color">The source color.</param>
            <returns>The closest <see cref="T:System.ConsoleColor" />.</returns>
            <author>Glenn Slayden, https://stackoverflow.com/a/12340136/1467293</author>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.Inverted(System.Drawing.Color)">
            <summary>
                Returns a new <see cref="T:System.Drawing.Color" /> with the red, green, and blue components inverted. Alpha is not affected.
            </summary>
            <param name="color">The color to invert.</param>
            <returns>The inverted color.</returns>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.WithA(System.Drawing.Color,System.Int32)">
            <summary>
                Returns a vector whose red, green, and blue components are the same as the specified color, and whose alpha component
                is a new value.
            </summary>
            <param name="color">The color to copy.</param>
            <param name="a">The new alpha component value.</param>
            <returns>
                A new instance of <see cref="T:System.Drawing.Color" /> whose <see cref="P:System.Drawing.Color.R" />, <see cref="P:System.Drawing.Color.G" />, and
                <see cref="P:System.Drawing.Color.B" /> components are the same as that of <paramref name="color" />, and whose
                <see cref="P:System.Drawing.Color.A" /> component is <paramref name="a" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.WithB(System.Drawing.Color,System.Int32)">
            <summary>
                Returns a vector whose red, green, and alpha components are the same as the specified color, and whose blue component
                is a new value.
            </summary>
            <param name="color">The color to copy.</param>
            <param name="b">The new blue component value.</param>
            <returns>
                A new instance of <see cref="T:System.Drawing.Color" /> whose <see cref="P:System.Drawing.Color.R" />, <see cref="P:System.Drawing.Color.G" />, and
                <see cref="P:System.Drawing.Color.A" /> components are the same as that of <paramref name="color" />, and whose
                <see cref="P:System.Drawing.Color.B" /> component is <paramref name="b" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.WithG(System.Drawing.Color,System.Int32)">
            <summary>
                Returns a vector whose red, blue, and alpha components are the same as the specified color, and whose green component
                is a new value.
            </summary>
            <param name="color">The color to copy.</param>
            <param name="g">The new green component value.</param>
            <returns>
                A new instance of <see cref="T:System.Drawing.Color" /> whose <see cref="P:System.Drawing.Color.R" />, <see cref="P:System.Drawing.Color.B" />, and
                <see cref="P:System.Drawing.Color.A" /> components are the same as that of <paramref name="color" />, and whose
                <see cref="P:System.Drawing.Color.G" /> component is <paramref name="g" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.ColorExtensions.WithR(System.Drawing.Color,System.Int32)">
            <summary>
                Returns a vector whose green, blue, and alpha components are the same as the specified color, and whose red component
                is a new value.
            </summary>
            <param name="color">The color to copy.</param>
            <param name="r">The new red component value.</param>
            <returns>
                A new instance of <see cref="T:System.Drawing.Color" /> whose <see cref="P:System.Drawing.Color.G" />, <see cref="P:System.Drawing.Color.B" />, and
                <see cref="P:System.Drawing.Color.A" /> components are the same as that of <paramref name="color" />, and whose
                <see cref="P:System.Drawing.Color.R" /> component is <paramref name="r" />.
            </returns>
        </member>
        <member name="T:X10D.Drawing.Cuboid">
            <summary>
                Represents a cuboid in 3D space, which uses single-precision floating-point numbers for its coordinates.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Cuboid.Empty">
            <summary>
                The empty cuboid. That is, a cuboid whose size is zero.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Cuboid.Cube">
            <summary>
                A cube. That is, a cuboid whose size is the same in all three dimensions.
            </summary>
            <value>A cube with the size (1, 1, 1).</value>
        </member>
        <member name="M:X10D.Drawing.Cuboid.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Cuboid" /> struct.
            </summary>
            <param name="centerX">The center X coordinate.</param>
            <param name="centerY">The center Y coordinate.</param>
            <param name="centerZ">The center Z coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:X10D.Drawing.Cuboid.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Cuboid" /> struct.
            </summary>
            <param name="centerX">The center X coordinate.</param>
            <param name="centerY">The center Y coordinate.</param>
            <param name="centerZ">The center Z coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
        </member>
        <member name="M:X10D.Drawing.Cuboid.#ctor(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Cuboid" /> struct.
            </summary>
            <param name="center">The center point.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:X10D.Drawing.Cuboid.#ctor(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Cuboid" /> struct.
            </summary>
            <param name="center">The center point.</param>
            <param name="size">The size.</param>
            <param name="orientation">The orientation of the cuboid.</param>
        </member>
        <member name="M:X10D.Drawing.Cuboid.#ctor(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Cuboid" /> struct.
            </summary>
            <param name="center">The center point.</param>
            <param name="size">The size.</param>
            <param name="orientation">The orientation of the cuboid.</param>
        </member>
        <member name="P:X10D.Drawing.Cuboid.Center">
            <summary>
                Gets the center point of the cuboid.
            </summary>
            <value>The center point.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.Orientation">
            <summary>
                Gets the orientation of this cuboid.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.Size">
            <summary>
                Gets the size of the cuboid.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalFrontTopLeft">
            <summary>
                Gets the front-top-left corner of the box, in local space.
            </summary>
            <value>The front-top-left corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalFrontTopRight">
            <summary>
                Gets the front-top-right corner of the box, in local space.
            </summary>
            <value>The front-top-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalFrontBottomLeft">
            <summary>
                Gets the front-bottom-left corner of the box, in local space.
            </summary>
            <value>The front-bottom-left corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalFrontBottomRight">
            <summary>
                Gets the front-bottom-right corner of the box, in local space.
            </summary>
            <value>The front-bottom-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalBackTopLeft">
            <summary>
                Gets the back-top-left corner of the box, in local space.
            </summary>
            <value>The back-top-left corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalBackTopRight">
            <summary>
                Gets the back-top-right corner of the box, in local space.
            </summary>
            <value>The back-top-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalBackBottomLeft">
            <summary>
                Gets the back-bottom-left corner of the box, in local space.
            </summary>
            <value>The back-bottom-left corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.LocalBackBottomRight">
            <summary>
                Gets the back-bottom-right corner of the box, in local space.
            </summary>
            <value>The back-bottom-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.FrontTopLeft">
            <summary>
                Gets the front-top-left corner of the box, in world space.
            </summary>
            <value>The front-top-left corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.FrontTopRight">
            <summary>
                Gets the front-top-right corner of the box, in world space.
            </summary>
            <value>The front-top-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.FrontBottomLeft">
            <summary>
                Gets the front-bottom-left corner of the box, in world space.
            </summary>
            <value>The front-bottom-left corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.FrontBottomRight">
            <summary>
                Gets the front-bottom-right corner of the box, in world space.
            </summary>
            <value>The front-bottom-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.BackTopLeft">
            <summary>
                Gets the back-bottom-left corner of the box, in world space.
            </summary>
            <value>The back-bottom-left corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.BackTopRight">
            <summary>
                Gets the back-bottom-right corner of the box, in world space.
            </summary>
            <value>The back-bottom-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.BackBottomLeft">
            <summary>
                Gets the back-bottom-right corner of the box, in world space.
            </summary>
            <value>The back-bottom-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.BackBottomRight">
            <summary>
                Gets the back-bottom-right corner of the box, in world space.
            </summary>
            <value>The back-bottom-right corner.</value>
        </member>
        <member name="P:X10D.Drawing.Cuboid.Volume">
            <summary>
                Gets the volume of this cuboid.
            </summary>
            <value>The volume.</value>
        </member>
        <member name="M:X10D.Drawing.Cuboid.op_Equality(X10D.Drawing.Cuboid,X10D.Drawing.Cuboid)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Cuboid" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Cuboid.op_Inequality(X10D.Drawing.Cuboid,X10D.Drawing.Cuboid)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Cuboid" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Cuboid.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Cuboid.Equals(X10D.Drawing.Cuboid)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Cuboid.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.Ellipse">
            <summary>
                Represents an ellipse that is composed of a 32-bit signed integer center point and radius.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Ellipse.Empty">
            <summary>
                The empty ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 0.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Ellipse.Unit">
            <summary>
                The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Ellipse.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Ellipse" /> struct.
            </summary>
            <param name="centerX">The X coordinate of the center point.</param>
            <param name="centerY">The Y coordinate of the center point.</param>
            <param name="horizontalRadius">The horizontal radius of the ellipse.</param>
            <param name="verticalRadius">The vertical radius of the ellipse.</param>
        </member>
        <member name="M:X10D.Drawing.Ellipse.#ctor(System.Drawing.Point,System.Drawing.Size)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Ellipse" /> struct.
            </summary>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
        </member>
        <member name="P:X10D.Drawing.Ellipse.Area">
            <summary>
                Gets the area of the ellipse.
            </summary>
            <value>The area of the ellipse, calculated as <c>πab</c>.</value>
        </member>
        <member name="P:X10D.Drawing.Ellipse.Center">
            <summary>
                Gets the center point of the ellipse.
            </summary>
            <value>The center point.</value>
        </member>
        <member name="P:X10D.Drawing.Ellipse.ApproximateCircumference">
            <summary>
                Gets the approximate circumference of the ellipse.
            </summary>
            <value>
                The approximate circumference of the ellipse, calculated as
                <c>π(a+b)(3([(a-b)²]/(a+b)²(sqrt(-3(((a-b)²)/(a+b)²)+4+10))+1)</c>.
            </value>
        </member>
        <member name="P:X10D.Drawing.Ellipse.HorizontalRadius">
            <summary>
                Gets the horizontal radius of the ellipse.
            </summary>
            <value>The horizontal radius.</value>
        </member>
        <member name="P:X10D.Drawing.Ellipse.Radius">
            <summary>
                Gets the radius of the ellipse.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:X10D.Drawing.Ellipse.VerticalRadius">
            <summary>
                Gets the vertical radius of the ellipse.
            </summary>
            <value>The vertical radius.</value>
        </member>
        <member name="M:X10D.Drawing.Ellipse.op_Equality(X10D.Drawing.Ellipse@,X10D.Drawing.Ellipse@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Ellipse" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Ellipse.op_Inequality(X10D.Drawing.Ellipse@,X10D.Drawing.Ellipse@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Ellipse" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Ellipse.op_Implicit(X10D.Drawing.Circle@)~X10D.Drawing.Ellipse">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Circle" /> to an <see cref="T:X10D.Drawing.Ellipse" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.Ellipse.op_Explicit(X10D.Drawing.EllipseF@)~X10D.Drawing.Ellipse">
            <summary>
                Explicitly converts an <see cref="T:X10D.Drawing.EllipseF" /> to an <see cref="T:X10D.Drawing.Ellipse" />.
            </summary>
            <param name="ellipse">The ellipse to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.Ellipse.FromCircle(X10D.Drawing.Circle@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Circle" /> to an <see cref="T:X10D.Drawing.Ellipse" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.Ellipse.FromEllipseF(X10D.Drawing.EllipseF@)">
            <summary>
                Converts an <see cref="T:X10D.Drawing.EllipseF" /> to an <see cref="T:X10D.Drawing.Ellipse" />.
            </summary>
            <param name="ellipse">The ellipse to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.Ellipse.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Ellipse.Equals(X10D.Drawing.Ellipse)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Ellipse.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.EllipseF">
            <summary>
                Represents an ellipse that is composed of a single-precision floating-point center point and radius.
            </summary>
        </member>
        <member name="F:X10D.Drawing.EllipseF.Empty">
            <summary>
                The empty ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 0.
            </summary>
        </member>
        <member name="F:X10D.Drawing.EllipseF.Unit">
            <summary>
                The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1.
            </summary>
        </member>
        <member name="M:X10D.Drawing.EllipseF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.EllipseF" /> struct.
            </summary>
            <param name="centerX">The X coordinate of the center point.</param>
            <param name="centerY">The Y coordinate of the center point.</param>
            <param name="horizontalRadius">The horizontal radius of the ellipse.</param>
            <param name="verticalRadius">The vertical radius of the ellipse.</param>
        </member>
        <member name="M:X10D.Drawing.EllipseF.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Ellipse" /> struct.
            </summary>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
        </member>
        <member name="M:X10D.Drawing.EllipseF.#ctor(System.Drawing.PointF,System.Numerics.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Ellipse" /> struct.
            </summary>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
        </member>
        <member name="M:X10D.Drawing.EllipseF.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Ellipse" /> struct.
            </summary>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
        </member>
        <member name="P:X10D.Drawing.EllipseF.Area">
            <summary>
                Gets the area of the ellipse.
            </summary>
            <value>The area of the ellipse, calculated as <c>πab</c>.</value>
        </member>
        <member name="P:X10D.Drawing.EllipseF.Center">
            <summary>
                Gets the center point of the ellipse.
            </summary>
            <value>The center point.</value>
        </member>
        <member name="P:X10D.Drawing.EllipseF.ApproximateCircumference">
            <summary>
                Gets the approximate circumference of the ellipse.
            </summary>
            <value>
                The approximate circumference of the ellipse, calculated as
                <c>π(a+b)(3([(a-b)²]/(a+b)²(sqrt(-3(((a-b)²)/(a+b)²)+4+10))+1)</c>.
            </value>
        </member>
        <member name="P:X10D.Drawing.EllipseF.HorizontalRadius">
            <summary>
                Gets the horizontal radius of the ellipse.
            </summary>
            <value>The horizontal radius.</value>
        </member>
        <member name="P:X10D.Drawing.EllipseF.Radius">
            <summary>
                Gets the radius of the ellipse.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:X10D.Drawing.EllipseF.VerticalRadius">
            <summary>
                Gets the vertical radius of the ellipse.
            </summary>
            <value>The vertical radius.</value>
        </member>
        <member name="M:X10D.Drawing.EllipseF.op_Equality(X10D.Drawing.EllipseF@,X10D.Drawing.EllipseF@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.EllipseF" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.op_Inequality(X10D.Drawing.EllipseF@,X10D.Drawing.EllipseF@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.EllipseF" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.op_Implicit(X10D.Drawing.Circle@)~X10D.Drawing.EllipseF">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Circle" /> to an <see cref="T:X10D.Drawing.EllipseF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.op_Implicit(X10D.Drawing.CircleF@)~X10D.Drawing.EllipseF">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.CircleF" /> to an <see cref="T:X10D.Drawing.EllipseF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.op_Implicit(X10D.Drawing.Ellipse@)~X10D.Drawing.EllipseF">
            <summary>
                Implicitly converts an <see cref="T:X10D.Drawing.Ellipse" /> to an <see cref="T:X10D.Drawing.EllipseF" />.
            </summary>
            <param name="ellipse">The ellipse to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.FromCircle(X10D.Drawing.Circle@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Circle" /> to an <see cref="T:X10D.Drawing.EllipseF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.FromCircleF(X10D.Drawing.CircleF@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.CircleF" /> to an <see cref="T:X10D.Drawing.EllipseF" />.
            </summary>
            <param name="circle">The circle to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.FromEllipse(X10D.Drawing.Ellipse@)">
            <summary>
                Converts an <see cref="T:X10D.Drawing.Ellipse" /> to an <see cref="T:X10D.Drawing.EllipseF" />.
            </summary>
            <param name="ellipse">The ellipse to convert.</param>
            <returns>The converted ellipse.</returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.EllipseF.Equals(X10D.Drawing.EllipseF)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.EllipseF.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.Line">
            <summary>
                Represents a line in 2D space that is composed of 32-bit signed integer X and Y coordinates.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line.Empty">
            <summary>
                The empty line. That is, a line whose start and end points are at (0, 0).
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line.One">
            <summary>
                The line whose start point is at (0, 0) and end point is at (1, 1).
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line.UnitX">
            <summary>
                The line whose start point is at (0, 0) and end point is at (1, 0).
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line.UnitY">
            <summary>
                The line whose start point is at (0, 0) and end point is at (0, 1).
            </summary>
        </member>
        <member name="M:X10D.Drawing.Line.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Line" /> struct by taking the start and end points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="P:X10D.Drawing.Line.End">
            <summary>
                Gets the end point of the line.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="P:X10D.Drawing.Line.Length">
            <summary>
                Gets the length of this line.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:X10D.Drawing.Line.LengthSquared">
            <summary>
                Gets the length of this line, squared.
            </summary>
            <value>The squared length.</value>
        </member>
        <member name="P:X10D.Drawing.Line.Start">
            <summary>
                Gets the start point of the line.
            </summary>
            <value>The start point.</value>
        </member>
        <member name="M:X10D.Drawing.Line.op_Equality(X10D.Drawing.Line@,X10D.Drawing.Line@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Line" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line.op_Inequality(X10D.Drawing.Line@,X10D.Drawing.Line@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Line" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line.op_LessThan(X10D.Drawing.Line@,X10D.Drawing.Line@)">
            <summary>
                Returns a value indicating whether the length of one line is less than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line.Length" /> of <paramref name="left" /> is less than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line.op_GreaterThan(X10D.Drawing.Line@,X10D.Drawing.Line@)">
            <summary>
                Returns a value indicating whether the length of one line is greater than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line.Length" /> of <paramref name="left" /> is greater than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line.op_LessThanOrEqual(X10D.Drawing.Line@,X10D.Drawing.Line@)">
            <summary>
                Returns a value indicating whether the length of one line is less than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line.Length" /> of <paramref name="left" /> is less than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line.op_GreaterThanOrEqual(X10D.Drawing.Line@,X10D.Drawing.Line@)">
            <summary>
                Returns a value indicating whether the length of one line is greater than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line.Length" /> of <paramref name="left" /> is greater than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line.op_Explicit(X10D.Drawing.LineF@)~X10D.Drawing.Line">
            <summary>
                Explicitly converts a <see cref="T:X10D.Drawing.Line" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line.op_Explicit(X10D.Drawing.Line3D@)~X10D.Drawing.Line">
            <summary>
                Explicitly converts a <see cref="T:X10D.Drawing.Line3D" /> to a <see cref="T:X10D.Drawing.Line" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line.FromLine3D(X10D.Drawing.Line3D@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Line3D" /> to a <see cref="T:X10D.Drawing.Line" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line.FromLineF(X10D.Drawing.LineF@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Line" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line.CompareTo(System.Object)">
             <summary>
                 Compares this instance to another object.
             </summary>
             <param name="obj">The object with with which to compare</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="obj"/>.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line.Length" /> of this instance is less than that of <paramref name="obj" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="obj" />, or the <see cref="P:X10D.Drawing.Line.Length" /> of both this instance
                             and <paramref name="obj" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line.Length" /> of this instance is greater than that of <paramref name="obj" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>
                 Comparison internally measures the <see cref="P:X10D.Drawing.Line.LengthSquared" /> property to avoid calls to <see cref="M:System.MathF.Sqrt(System.Single)" />.
             <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not an instance of <see cref="T:X10D.Drawing.Line" />.</exception>
             </remarks>
        </member>
        <member name="M:X10D.Drawing.Line.CompareTo(X10D.Drawing.Line)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.Line" />.
             </summary>
             <param name="other"></param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="other" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line.Length" /> of this instance is less than that of <paramref name="other" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="other" />, or the <see cref="P:X10D.Drawing.Line.Length" /> of both this instance
                             and <paramref name="other" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line.Length" /> of this instance is greater than that of <paramref name="other" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>
                 Comparison internally measures the <see cref="P:X10D.Drawing.Line.LengthSquared" /> property to avoid calls to <see cref="M:System.MathF.Sqrt(System.Single)" />.
             </remarks>
        </member>
        <member name="M:X10D.Drawing.Line.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Line.Equals(X10D.Drawing.Line)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.Line3D">
            <summary>
                Represents a line in 3D space that is composed of 32-bit signed integer X, Y and Z coordinates.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line3D.Empty">
            <summary>
                The empty line. That is, a line whose start and end points are at (0, 0).
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line3D.One">
            <summary>
                The line whose start point is at (0, 0, 0) and end point is at (1, 1, 1).
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line3D.UnitX">
            <summary>
                The line whose start point is at (0, 0, 0) and end point is at (1, 0, 0).
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line3D.UnitY">
            <summary>
                The line whose start point is at (0, 0, 0) and end point is at (0, 1, 0).
            </summary>
        </member>
        <member name="F:X10D.Drawing.Line3D.UnitZ">
            <summary>
                The line whose start point is at (0, 0, 0) and end point is at (0, 0, 1).
            </summary>
        </member>
        <member name="M:X10D.Drawing.Line3D.#ctor(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Line3D" /> struct by taking the start and end points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="P:X10D.Drawing.Line3D.End">
            <summary>
                Gets the end point of the line.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="P:X10D.Drawing.Line3D.Length">
            <summary>
                Gets the length of this line.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:X10D.Drawing.Line3D.LengthSquared">
            <summary>
                Gets the length of this line, squared.
            </summary>
            <value>The squared length.</value>
        </member>
        <member name="P:X10D.Drawing.Line3D.Start">
            <summary>
                Gets the start point of the line.
            </summary>
            <value>The start point.</value>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_Equality(X10D.Drawing.Line3D,X10D.Drawing.Line3D)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Line3D" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_Inequality(X10D.Drawing.Line3D,X10D.Drawing.Line3D)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Line3D" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_LessThan(X10D.Drawing.Line3D@,X10D.Drawing.Line3D@)">
            <summary>
                Returns a value indicating whether the length of one line is less than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line3D.Length" /> of <paramref name="left" /> is less than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_GreaterThan(X10D.Drawing.Line3D@,X10D.Drawing.Line3D@)">
            <summary>
                Returns a value indicating whether the length of one line is greater than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line3D.Length" /> of <paramref name="left" /> is greater than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_LessThanOrEqual(X10D.Drawing.Line3D@,X10D.Drawing.Line3D@)">
            <summary>
                Returns a value indicating whether the length of one line is less than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line3D.Length" /> of <paramref name="left" /> is less than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_GreaterThanOrEqual(X10D.Drawing.Line3D@,X10D.Drawing.Line3D@)">
            <summary>
                Returns a value indicating whether the length of one line is greater than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Line3D.Length" /> of <paramref name="left" /> is greater than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_Implicit(X10D.Drawing.Line@)~X10D.Drawing.Line3D">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Line" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.op_Implicit(X10D.Drawing.LineF@)~X10D.Drawing.Line3D">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.LineF" /> to a <see cref="T:X10D.Drawing.Line3D" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.FromLine(X10D.Drawing.Line@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Line" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.FromLineF(X10D.Drawing.LineF@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.LineF" /> to a <see cref="T:X10D.Drawing.Line3D" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.CompareTo(System.Object)">
             <summary>
                 Compares this instance to another object.
             </summary>
             <param name="obj">The object with with which to compare</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="obj"/>.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line3D.Length" /> of this instance is less than that of <paramref name="obj" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="obj" />, or the <see cref="P:X10D.Drawing.Line3D.Length" /> of both this instance
                             and <paramref name="obj" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line3D.Length" /> of this instance is greater than that of <paramref name="obj" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>
                 Comparison internally measures the <see cref="P:X10D.Drawing.Line3D.LengthSquared" /> property to avoid calls to <see cref="M:System.MathF.Sqrt(System.Single)" />.
             <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not an instance of <see cref="T:X10D.Drawing.Line3D" />.</exception>
             </remarks>
        </member>
        <member name="M:X10D.Drawing.Line3D.CompareTo(X10D.Drawing.Line3D)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.Line3D" />.
             </summary>
             <param name="other"></param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="other" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line3D.Length" /> of this instance is less than that of <paramref name="other" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="other" />, or the <see cref="P:X10D.Drawing.Line3D.Length" /> of both this instance
                             and <paramref name="other" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Line3D.Length" /> of this instance is greater than that of <paramref name="other" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>
                 Comparison internally measures the <see cref="P:X10D.Drawing.Line3D.LengthSquared" /> property to avoid calls to <see cref="M:System.MathF.Sqrt(System.Single)" />.
             </remarks>
        </member>
        <member name="M:X10D.Drawing.Line3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Line3D.Equals(X10D.Drawing.Line3D)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Line3D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.LineF">
            <summary>
                Represents a line in 2D space that is composed of single-precision floating-point X and Y coordinates.
            </summary>
        </member>
        <member name="F:X10D.Drawing.LineF.Empty">
            <summary>
                The empty line. That is, a line whose start and end points are at (0, 0).
            </summary>
        </member>
        <member name="F:X10D.Drawing.LineF.One">
            <summary>
                The line whose start point is at (0, 0) and end point is at (1, 1).
            </summary>
        </member>
        <member name="F:X10D.Drawing.LineF.UnitX">
            <summary>
                The line whose start point is at (0, 0) and end point is at (1, 0).
            </summary>
        </member>
        <member name="F:X10D.Drawing.LineF.UnitY">
            <summary>
                The line whose start point is at (0, 0) and end point is at (0, 1).
            </summary>
        </member>
        <member name="M:X10D.Drawing.LineF.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.LineF" /> struct by taking the start and end points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="M:X10D.Drawing.LineF.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.LineF" /> struct by taking the start and end points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="P:X10D.Drawing.LineF.End">
            <summary>
                Gets the end point of the line.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="P:X10D.Drawing.LineF.Length">
            <summary>
                Gets the length of this line.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:X10D.Drawing.LineF.LengthSquared">
            <summary>
                Gets the length of this line, squared.
            </summary>
            <value>The squared length.</value>
        </member>
        <member name="P:X10D.Drawing.LineF.Start">
            <summary>
                Gets the start point of the line.
            </summary>
            <value>The start point.</value>
        </member>
        <member name="M:X10D.Drawing.LineF.op_Equality(X10D.Drawing.LineF@,X10D.Drawing.LineF@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.LineF" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.LineF.op_Inequality(X10D.Drawing.LineF@,X10D.Drawing.LineF@)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.LineF" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.LineF.op_LessThan(X10D.Drawing.LineF@,X10D.Drawing.LineF@)">
            <summary>
                Returns a value indicating whether the length of one line is less than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.LineF.Length" /> of <paramref name="left" /> is less than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.LineF.op_GreaterThan(X10D.Drawing.LineF@,X10D.Drawing.LineF@)">
            <summary>
                Returns a value indicating whether the length of one line is greater than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.LineF.Length" /> of <paramref name="left" /> is greater than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.LineF.op_LessThanOrEqual(X10D.Drawing.LineF@,X10D.Drawing.LineF@)">
            <summary>
                Returns a value indicating whether the length of one line is less than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.LineF.Length" /> of <paramref name="left" /> is less than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.LineF.op_GreaterThanOrEqual(X10D.Drawing.LineF@,X10D.Drawing.LineF@)">
            <summary>
                Returns a value indicating whether the length of one line is greater than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.LineF.Length" /> of <paramref name="left" /> is greater than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.LineF.op_Implicit(X10D.Drawing.Line@)~X10D.Drawing.LineF">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Line" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.LineF.op_Explicit(X10D.Drawing.Line3D@)~X10D.Drawing.LineF">
            <summary>
                Explicitly converts a <see cref="T:X10D.Drawing.Line3D" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.LineF.FromLine(X10D.Drawing.Line@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Line" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.LineF.FromLine3D(X10D.Drawing.Line3D@)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Line3D" /> to a <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="line">The line to convert.</param>
            <returns>The converted line.</returns>
        </member>
        <member name="M:X10D.Drawing.LineF.CompareTo(System.Object)">
             <summary>
                 Compares this instance to another object.
             </summary>
             <param name="obj">The object with with which to compare</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="obj"/>.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.LineF.Length" /> of this instance is less than that of <paramref name="obj" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="obj" />, or the <see cref="P:X10D.Drawing.LineF.Length" /> of both this instance
                             and <paramref name="obj" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.LineF.Length" /> of this instance is greater than that of <paramref name="obj" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>
                 Comparison internally measures the <see cref="P:X10D.Drawing.LineF.LengthSquared" /> property to avoid calls to <see cref="M:System.MathF.Sqrt(System.Single)" />.
             <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not an instance of <see cref="T:X10D.Drawing.Line" />.</exception>
             </remarks>
        </member>
        <member name="M:X10D.Drawing.LineF.CompareTo(X10D.Drawing.LineF)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.Line" />.
             </summary>
             <param name="other"></param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="other" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.LineF.Length" /> of this instance is less than that of <paramref name="other" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="other" />, or the <see cref="P:X10D.Drawing.LineF.Length" /> of both this instance
                             and <paramref name="other" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.LineF.Length" /> of this instance is greater than that of <paramref name="other" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>
                 Comparison internally measures the <see cref="P:X10D.Drawing.LineF.LengthSquared" /> property to avoid calls to <see cref="M:System.MathF.Sqrt(System.Single)" />.
             </remarks>
        </member>
        <member name="M:X10D.Drawing.LineF.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.LineF.Equals(X10D.Drawing.LineF)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.LineF.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.PointExtensions">
            <summary>
                Drawing-related extension methods for <see cref="T:System.Drawing.Point" />.
            </summary>
        </member>
        <member name="M:X10D.Drawing.PointExtensions.IsOnLine(System.Drawing.Point,X10D.Drawing.LineF)">
            <summary>
                Determines if the current <see cref="T:System.Drawing.Point" /> lies on the specified <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="point">The point to check.</param>
            <param name="line">The line on which the point may lie.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="line" />; otherwise
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PointExtensions.IsOnLine(System.Drawing.Point,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
                Determines if the current <see cref="T:System.Drawing.Point" /> lies on the specified line.
            </summary>
            <param name="point">The point to check.</param>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="start" /> and
                <paramref name="end" />; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PointExtensions.IsOnLine(System.Drawing.Point,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Determines if the current <see cref="T:System.Drawing.Point" /> lies on the specified line.
            </summary>
            <param name="point">The point to check.</param>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="start" /> and
                <paramref name="end" />; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PointExtensions.ToSize(System.Drawing.Point)">
            <summary>
                Converts the current <see cref="T:System.Drawing.Point" /> to a <see cref="T:System.Drawing.Size" />.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size" />.</returns>
        </member>
        <member name="M:X10D.Drawing.PointExtensions.ToSizeF(System.Drawing.Point)">
            <summary>
                Converts the current <see cref="T:System.Drawing.Point" /> to a <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The resulting <see cref="T:System.Drawing.SizeF" />.</returns>
        </member>
        <member name="M:X10D.Drawing.PointExtensions.ToVector2(System.Drawing.Point)">
            <summary>
                Converts the current <see cref="T:System.Drawing.Point" /> to a <see cref="T:System.Numerics.Vector2" />.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The resulting <see cref="T:System.Numerics.Vector2" />.</returns>
        </member>
        <member name="T:X10D.Drawing.PointFExtensions">
            <summary>
                Drawing-related extension methods for <see cref="T:System.Drawing.PointF" />.
            </summary>
        </member>
        <member name="M:X10D.Drawing.PointFExtensions.IsOnLine(System.Drawing.PointF,X10D.Drawing.LineF)">
            <summary>
                Determines if the current <see cref="T:System.Drawing.PointF" /> lies on the specified <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="point">The point to check.</param>
            <param name="line">The line on which the point may lie.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="line" />; otherwise
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PointFExtensions.IsOnLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
                Determines if the current <see cref="T:System.Drawing.PointF" /> lies on the specified <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="point">The point to check.</param>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="start" /> and
                <paramref name="end" />; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PointFExtensions.IsOnLine(System.Drawing.PointF,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Determines if the current <see cref="T:System.Drawing.PointF" /> lies on the specified <see cref="T:X10D.Drawing.LineF" />.
            </summary>
            <param name="point">The point to check.</param>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="start" /> and
                <paramref name="end" />; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PointFExtensions.Round(System.Drawing.PointF)">
            <summary>
                Rounds the components in the current <see cref="T:System.Drawing.PointF" /> to the nearest integer.
            </summary>
            <param name="point">The point whose components to round.</param>
            <returns>The rounded point.</returns>
        </member>
        <member name="M:X10D.Drawing.PointFExtensions.Round(System.Drawing.PointF,System.Single)">
            <summary>
                Rounds the components in the current <see cref="T:System.Drawing.PointF" /> to the nearest multiple of a specified number.
            </summary>
            <param name="point">The point whose components to round.</param>
            <param name="nearest">The nearest multiple to which the components should be rounded.</param>
            <returns>The rounded point.</returns>
        </member>
        <member name="M:X10D.Drawing.PointFExtensions.ToSizeF(System.Drawing.PointF)">
            <summary>
                Converts the current <see cref="T:System.Drawing.PointF" /> to a <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The resulting <see cref="T:System.Drawing.SizeF" />.</returns>
        </member>
        <member name="M:X10D.Drawing.PointFExtensions.ToVector2(System.Drawing.PointF)">
            <summary>
                Converts the current <see cref="T:System.Drawing.PointF" /> to a <see cref="T:System.Numerics.Vector2" />.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The resulting <see cref="T:System.Numerics.Vector2" />.</returns>
        </member>
        <member name="T:X10D.Drawing.Polygon">
            <summary>
                Represents a 2D polygon composed of 32-bit signed integer vertices.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Polygon.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Polygon" /> class.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Polygon.#ctor(X10D.Drawing.Polygon)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Polygon" /> class by copying the specified polygon.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Polygon.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Point})">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Polygon" /> class by constructing it from the specified vertices.
            </summary>
            <param name="vertices">An enumerable collection of vertices from which the polygon should be constructed.</param>
        </member>
        <member name="P:X10D.Drawing.Polygon.Empty">
            <summary>
                Gets an empty polygon. That is, a polygon with no vertices.
            </summary>
            <value>An empty polygon.</value>
        </member>
        <member name="P:X10D.Drawing.Polygon.IsConvex">
            <summary>
                Returns a value indicating whether this polygon is convex.
            </summary>
            <value><see langword="true" /> if this polygon is convex; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:X10D.Drawing.Polygon.VertexCount">
            <summary>
                Gets the number of vertices in this polygon.
            </summary>
            <value>An <see cref="T:System.Int32" /> value, representing the number of vertices in this polygon.</value>
        </member>
        <member name="P:X10D.Drawing.Polygon.Vertices">
            <summary>
                Gets a read-only view of the vertices in this polygon.
            </summary>
            <value>
                A <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of <see cref="T:System.Drawing.Point" /> values, representing the vertices of this polygon.
            </value>
        </member>
        <member name="M:X10D.Drawing.Polygon.op_Equality(X10D.Drawing.Polygon,X10D.Drawing.Polygon)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Polygon" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polygon.op_Inequality(X10D.Drawing.Polygon,X10D.Drawing.Polygon)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Polygon" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polygon.op_Explicit(X10D.Drawing.PolygonF)~X10D.Drawing.Polygon">
            <summary>
                Explicitly converts a <see cref="T:X10D.Drawing.Polygon" /> to a <see cref="T:X10D.Drawing.PolygonF" />.
            </summary>
            <param name="polygon">The polygon to convert.</param>
            <returns>The converted polygon.</returns>
        </member>
        <member name="M:X10D.Drawing.Polygon.FromPolygonF(X10D.Drawing.PolygonF)">
            <summary>
                Explicitly converts a <see cref="T:X10D.Drawing.Polygon" /> to a <see cref="T:X10D.Drawing.PolygonF" />.
            </summary>
            <param name="polygon">The polygon to convert.</param>
            <returns>The converted polygon.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="polygon" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Polygon.AddVertex(System.Drawing.Point)">
            <summary>
                Adds a vertex to this polygon.
            </summary>
            <param name="vertex">The vertex to add.</param>
        </member>
        <member name="M:X10D.Drawing.Polygon.AddVertices(System.Collections.Generic.IEnumerable{System.Drawing.Point})">
            <summary>
                Adds a collection of vertices to this polygon.
            </summary>
            <param name="vertices">An enumerable collection of vertices to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Polygon.ClearVertices">
            <summary>
                Clears all vertices from this polygon.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Polygon.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Polygon.Equals(X10D.Drawing.Polygon)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polygon.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.PolygonF">
            <summary>
                Represents a 2D polygon composed of single-precision floating-vertex vertices.
            </summary>
        </member>
        <member name="M:X10D.Drawing.PolygonF.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.PolygonF" /> class.
            </summary>
        </member>
        <member name="M:X10D.Drawing.PolygonF.#ctor(X10D.Drawing.PolygonF)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.PolygonF" /> class by copying the specified polygon.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="polygon" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.PolygonF.#ctor(System.Collections.Generic.IEnumerable{System.Numerics.Vector2})">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.PolygonF" /> class by constructing it from the specified vertices.
            </summary>
            <param name="vertices">An enumerable collection of vertices from which the polygon should be constructed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.PolygonF.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.PolygonF" /> class by constructing it from the specified vertices.
            </summary>
            <param name="vertices">An enumerable collection of vertices from which the polygon should be constructed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:X10D.Drawing.PolygonF.Empty">
            <summary>
                Gets an empty polygon. That is, a polygon with no vertices.
            </summary>
            <value>An empty polygon.</value>
        </member>
        <member name="P:X10D.Drawing.PolygonF.IsConvex">
            <summary>
                Returns a value indicating whether this polygon is convex.
            </summary>
            <value><see langword="true" /> if this polygon is convex; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:X10D.Drawing.PolygonF.VertexCount">
            <summary>
                Gets the number of vertices in this polygon.
            </summary>
            <value>An <see cref="T:System.Int32" /> value, representing the number of vertices in this polygon.</value>
        </member>
        <member name="P:X10D.Drawing.PolygonF.Vertices">
            <summary>
                Gets a read-only view of the vertices in this polygon.
            </summary>
            <value>
                A <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of <see cref="T:System.Drawing.PointF" /> values, representing the vertices of this polygon.
            </value>
        </member>
        <member name="M:X10D.Drawing.PolygonF.op_Equality(X10D.Drawing.PolygonF,X10D.Drawing.PolygonF)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.PolygonF" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PolygonF.op_Inequality(X10D.Drawing.PolygonF,X10D.Drawing.PolygonF)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.PolygonF" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PolygonF.op_Implicit(X10D.Drawing.Polygon)~X10D.Drawing.PolygonF">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Polygon" /> to a <see cref="T:X10D.Drawing.PolygonF" />.
            </summary>
            <param name="polygon">The polygon to convert.</param>
            <returns>The converted polygon.</returns>
        </member>
        <member name="M:X10D.Drawing.PolygonF.FromPolygon(X10D.Drawing.Polygon)">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Polygon" /> to a <see cref="T:X10D.Drawing.PolygonF" />.
            </summary>
            <param name="polygon">The polygon to convert.</param>
            <returns>The converted polygon.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="polygon" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.PolygonF.AddVertex(System.Drawing.PointF)">
            <summary>
                Adds a vertex to this polygon.
            </summary>
            <param name="vertex">The vertex to add.</param>
        </member>
        <member name="M:X10D.Drawing.PolygonF.AddVertex(System.Numerics.Vector2)">
            <summary>
                Adds a vertex to this polygon.
            </summary>
            <param name="vertex">The vertex to add.</param>
        </member>
        <member name="M:X10D.Drawing.PolygonF.AddVertices(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
                Adds a collection of vertices to this polygon.
            </summary>
            <param name="vertices">An enumerable collection of vertices to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.PolygonF.AddVertices(System.Collections.Generic.IEnumerable{System.Numerics.Vector2})">
            <summary>
                Adds a collection of vertices to this polygon.
            </summary>
            <param name="vertices">An enumerable collection of vertices to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.PolygonF.ClearVertices">
            <summary>
                Clears all vertices from this polygon.
            </summary>
        </member>
        <member name="M:X10D.Drawing.PolygonF.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.PolygonF.Equals(X10D.Drawing.PolygonF)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.PolygonF.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.Polyhedron">
            <summary>
                Represents a 3D polyhedron composed of single-precision floating-point points.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Polyhedron" /> class.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.#ctor(X10D.Drawing.Polyhedron)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Polyhedron" /> class by copying the specified polyhedron.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="polyhedron" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.#ctor(System.Collections.Generic.IEnumerable{System.Numerics.Vector3})">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Polyhedron" /> class by constructing it from the specified vertices.
            </summary>
            <param name="vertices">An enumerable collection of vertices from which the polyhedron should be constructed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:X10D.Drawing.Polyhedron.Empty">
            <summary>
                Gets an empty polyhedron. That is, a polygon with no vertices.
            </summary>
            <value>An empty polyhedron.</value>
        </member>
        <member name="P:X10D.Drawing.Polyhedron.VertexCount">
            <summary>
                Gets the number of vertices in this polyhedron.
            </summary>
            <value>An <see cref="T:System.Int32" /> value, representing the number of vertices in this polyhedron.</value>
        </member>
        <member name="P:X10D.Drawing.Polyhedron.Vertices">
            <summary>
                Gets a read-only view of the vertices in this polyhedron.
            </summary>
            <value>
                A <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of <see cref="T:System.Numerics.Vector3" /> values, representing the vertices of this polyhedron.
            </value>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.op_Equality(X10D.Drawing.Polyhedron,X10D.Drawing.Polyhedron)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Polyhedron" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.op_Inequality(X10D.Drawing.Polyhedron,X10D.Drawing.Polyhedron)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Polyhedron" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.op_Implicit(X10D.Drawing.Polygon)~X10D.Drawing.Polyhedron">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.Polygon" /> to a <see cref="T:X10D.Drawing.Polyhedron" />.
            </summary>
            <param name="polygon">The polyhedron to convert.</param>
            <returns>
                The converted polyhedron, or <see langword="null" /> if <paramref name="polygon" /> is <see langword="null" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.op_Implicit(X10D.Drawing.PolygonF)~X10D.Drawing.Polyhedron">
            <summary>
                Implicitly converts a <see cref="T:X10D.Drawing.PolygonF" /> to a <see cref="T:X10D.Drawing.Polyhedron" />.
            </summary>
            <param name="polygon">The polyhedron to convert.</param>
            <returns>
                The converted polyhedron, or <see langword="null" /> if <paramref name="polygon" /> is <see langword="null" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.FromPolygon(X10D.Drawing.Polygon)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.Polygon" /> to a <see cref="T:X10D.Drawing.Polyhedron" />.
            </summary>
            <param name="polygon">The polyhedron to convert.</param>
            <returns>The converted polyhedron.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="polygon" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.FromPolygonF(X10D.Drawing.PolygonF)">
            <summary>
                Converts a <see cref="T:X10D.Drawing.PolygonF" /> to a <see cref="T:X10D.Drawing.Polyhedron" />.
            </summary>
            <param name="polygon">The polyhedron to convert.</param>
            <returns>The converted polyhedron.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="polygon" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.AddVertex(System.Numerics.Vector3)">
            <summary>
                Adds a vertex to this polyhedron.
            </summary>
            <param name="vertex">The vertex to add.</param>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.AddVertices(System.Collections.Generic.IEnumerable{System.Numerics.Vector3})">
            <summary>
                Adds a collection of vertices to this polyhedron.
            </summary>
            <param name="vertices">An enumerable collection of vertices to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.ClearVertices">
            <summary>
                Clears all vertices from this polyhedron.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Polyhedron.Equals(X10D.Drawing.Polyhedron)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Polyhedron.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Drawing.RandomExtensions">
            <summary>
                Extension methods for <see cref="T:System.Random" />.
            </summary>
        </member>
        <member name="M:X10D.Drawing.RandomExtensions.NextColorRgb(System.Random)">
            <summary>
                Returns a color of random components for red, green, and blue.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>A <see cref="T:System.Drawing.Color" /> whose red, green, and blue components are all random, and whose alpha is 255</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Drawing.RandomExtensions.NextColorArgb(System.Random)">
            <summary>
                Returns a color composed of random components for apha, red, green, and blue.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>A <see cref="T:System.Drawing.Color" /> whose alpha, red, green, and blue components are all random.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Drawing.SizeExtensions">
            <summary>
                Drawing-related extension methods for <see cref="T:System.Drawing.Size" />.
            </summary>
        </member>
        <member name="M:X10D.Drawing.SizeExtensions.ToPoint(System.Drawing.Size)">
            <summary>
                Converts the current <see cref="T:System.Drawing.Size" /> to a <see cref="T:System.Drawing.Point" />.
            </summary>
            <param name="size">The size to convert.</param>
            <returns>The resulting <see cref="T:System.Drawing.Point" />.</returns>
        </member>
        <member name="M:X10D.Drawing.SizeExtensions.ToPointF(System.Drawing.Size)">
            <summary>
                Converts the current <see cref="T:System.Drawing.Size" /> to a <see cref="T:System.Drawing.PointF" />.
            </summary>
            <param name="size">The size to convert.</param>
            <returns>The resulting <see cref="T:System.Drawing.PointF" />.</returns>
        </member>
        <member name="M:X10D.Drawing.SizeExtensions.ToVector2(System.Drawing.Size)">
            <summary>
                Converts the current <see cref="T:System.Drawing.Size" /> to a <see cref="T:System.Numerics.Vector2" />.
            </summary>
            <param name="size">The size to convert.</param>
            <returns>The resulting <see cref="T:System.Numerics.Vector2" />.</returns>
        </member>
        <member name="T:X10D.Drawing.Sphere">
            <summary>
                Represents a sphere in 3D space, which uses single-precision floating-point numbers for its coordinates.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Sphere.Empty">
            <summary>
                The empty sphere. That is, a sphere with a radius of zero.
            </summary>
        </member>
        <member name="F:X10D.Drawing.Sphere.Unit">
            <summary>
                The unit sphere. That is, a sphere with a radius of 1.
            </summary>
        </member>
        <member name="M:X10D.Drawing.Sphere.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Sphere" /> struct.
            </summary>
            <param name="centerX">The X coordinate of the center point.</param>
            <param name="centerY">The Y coordinate of the center point.</param>
            <param name="centerZ">The Z coordinate of the center point.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:X10D.Drawing.Sphere.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Drawing.Sphere" /> struct.
            </summary>
            <param name="center">The center point.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="P:X10D.Drawing.Sphere.Center">
            <summary>
                Gets the center-point of the sphere.
            </summary>
            <value>The center point.</value>
        </member>
        <member name="P:X10D.Drawing.Sphere.Circumference">
            <summary>
                Gets the circumference of the sphere.
            </summary>
            <value>The circumference of the sphere, calculated as <c>2πr</c>.</value>
        </member>
        <member name="P:X10D.Drawing.Sphere.Diameter">
            <summary>
                Gets the diameter of the sphere.
            </summary>
            <value>The diameter.</value>
        </member>
        <member name="P:X10D.Drawing.Sphere.Radius">
            <summary>
                Gets the radius of the sphere.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:X10D.Drawing.Sphere.Volume">
            <summary>
                Gets the volume of this sphere.
            </summary>
            <value>The volume.</value>
        </member>
        <member name="M:X10D.Drawing.Sphere.op_Equality(X10D.Drawing.Sphere,X10D.Drawing.Sphere)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Sphere" /> are equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Sphere.op_Inequality(X10D.Drawing.Sphere,X10D.Drawing.Sphere)">
            <summary>
                Returns a value indicating whether two instances of <see cref="T:X10D.Drawing.Sphere" /> are not equal.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are considered not equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Sphere.op_LessThan(X10D.Drawing.Sphere,X10D.Drawing.Sphere)">
            <summary>
                Returns a value indicating whether the radius of one circle is less than that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Sphere.Radius" /> of <paramref name="left" /> is less than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Sphere.op_GreaterThan(X10D.Drawing.Sphere,X10D.Drawing.Sphere)">
            <summary>
                Returns a value indicating whether the radius of one circle is greater than to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Sphere.Radius" /> of <paramref name="left" /> is greater than that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Sphere.op_LessThanOrEqual(X10D.Drawing.Sphere,X10D.Drawing.Sphere)">
            <summary>
                Returns a value indicating whether the radius of one circle is less than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Sphere.Radius" /> of <paramref name="left" /> is less than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Sphere.op_GreaterThanOrEqual(X10D.Drawing.Sphere,X10D.Drawing.Sphere)">
            <summary>
                Returns a value indicating whether the radius of one circle is greater than or equal to that of another.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
                <see langword="true" /> if the <see cref="P:X10D.Drawing.Sphere.Radius" /> of <paramref name="left" /> is greater than or equal to that of
                <paramref name="right" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Sphere.CompareTo(System.Object)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.Sphere" />.
             </summary>
             <param name="obj">The other object.</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="obj" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Sphere.Radius" /> of this instance is less than that of <paramref name="obj" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="obj" />, or the <see cref="P:X10D.Drawing.Sphere.Radius" /> of both this instance
                             and <paramref name="obj" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Sphere.Radius" /> of this instance is greater than that of <paramref name="obj" />, or
                             <paramref name="obj" /> is <see langword="null" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>Comparison only takes into consideration the <see cref="P:X10D.Drawing.Sphere.Radius" />.</remarks>
             <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not an instance of <see cref="T:X10D.Drawing.Sphere" />.</exception>
        </member>
        <member name="M:X10D.Drawing.Sphere.CompareTo(X10D.Drawing.Sphere)">
             <summary>
                 Compares this instance to another <see cref="T:X10D.Drawing.Sphere" />.
             </summary>
             <param name="other">The other sphere.</param>
             <returns>
                 A signed number indicating the relative values of this instance and <paramref name="other" />.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>Less than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Sphere.Radius" /> of this instance is less than that of <paramref name="other" />.
                         </description>
                     </item>
                     <item>
                         <term>Zero</term>
                         <description>
                             This instance is equal to <paramref name="other" />, or the <see cref="P:X10D.Drawing.Sphere.Radius" /> of both this instance
                             and <paramref name="other" /> are not a number (<see cref="F:System.Single.NaN" />),
                             <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.
                         </description>
                     </item>
                     <item>
                         <term>Greater than zero</term>
                         <description>
                             The <see cref="P:X10D.Drawing.Sphere.Radius" /> of this instance is greater than that of <paramref name="other" />.
                         </description>
                     </item>
                 </list>
             </returns>
             <remarks>Comparison only takes into consideration the <see cref="P:X10D.Drawing.Sphere.Radius" />.</remarks>
        </member>
        <member name="M:X10D.Drawing.Sphere.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Drawing.Sphere.Equals(X10D.Drawing.Sphere)">
            <summary>
                Returns a value indicating whether this instance and another instance are equal.
            </summary>
            <param name="other">The instance with which to compare.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> are considered equal; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Drawing.Sphere.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:X10D.Endianness">
            <summary>
                Represents an enumeration of endianness values.
            </summary>
        </member>
        <member name="F:X10D.Endianness.LittleEndian">
            <summary>
                The value should be read as though it uses little endian encoding.
            </summary>
        </member>
        <member name="F:X10D.Endianness.BigEndian">
            <summary>
                The value should be read as though it uses big endian encoding.
            </summary>
        </member>
        <member name="T:X10D.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.BufferTooSmall">
            <summary>
              Looks up a localized string similar to The buffer is too small to contain the data..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.CollectionIsReadOnly_DisposeAll">
            <summary>
              Looks up a localized string similar to Collection is read-only. Try using DisposeAll instead..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.CollectionIsReadOnly_DisposeAllAsync">
            <summary>
              Looks up a localized string similar to Collection is read-only. Try using DisposeAllAsync instead..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.CountMustBeGreaterThanOrEqualTo0">
            <summary>
              Looks up a localized string similar to count must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.CountMustBeInRange">
            <summary>
              Looks up a localized string similar to Count must be positive and count must refer to a location within the string/array/collection..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.DestinationSpanLengthTooShort">
            <summary>
              Looks up a localized string similar to The destination span is too short to contain the data..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.EndIndexGreaterThanCount">
            <summary>
              Looks up a localized string similar to The end index must be less than the list count..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.EndIndexLessThanStartIndex">
            <summary>
              Looks up a localized string similar to The end index must be greater than or equal to the start index..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.EnumParseEmptyStringException">
            <summary>
              Looks up a localized string similar to Must specify valid information for parsing in the string..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.EnumParseNotEnumException">
            <summary>
              Looks up a localized string similar to Type provided must be an Enum..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.EnumSizeIsUnexpected">
            <summary>
              Looks up a localized string similar to The enum has a size that is not supported..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.HashAlgorithmCreateReturnedNull">
            <summary>
              Looks up a localized string similar to HashAlgorithm&apos;s Create method returned null reference..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.HashAlgorithmNoCreateMethod">
            <summary>
              Looks up a localized string similar to HashAlgorithm does not offer Create method..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than or equal to the size of the collection..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.LengthGreaterThanOrEqualTo0">
            <summary>
              Looks up a localized string similar to Length must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.LowerCannotBeGreaterThanUpper">
            <summary>
              Looks up a localized string similar to {0} cannot be greater than {1}.
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.MaxValueGreaterThanEqualTo0">
            <summary>
              Looks up a localized string similar to maxValue must be greater than or equal to 0.
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.MaxValueGreaterThanEqualToMinValue">
            <summary>
              Looks up a localized string similar to maxValue must be greater than or equal to minValue.
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.ObjectIsNotAValidType">
            <summary>
              Looks up a localized string similar to The specified object is not a valid type..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.SourceContainsNoElements">
            <summary>
              Looks up a localized string similar to The source contains no elements..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.SourceSpanIsTooLarge">
            <summary>
              Looks up a localized string similar to The source contains too many elements..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.StreamDoesNotSupportReading">
            <summary>
              Looks up a localized string similar to The stream does not support reading..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.StreamDoesNotSupportWriting">
            <summary>
              Looks up a localized string similar to The stream does not support writing..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.StreamTooLarge">
            <summary>
              Looks up a localized string similar to The length of the stream is too large..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.TypeDoesNotInheritAttribute">
            <summary>
              Looks up a localized string similar to {0} does not inherit {1}.
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.TypeIsNotClass">
            <summary>
              Looks up a localized string similar to {0} is not a class..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.TypeIsNotInterface">
            <summary>
              Looks up a localized string similar to {0} is not an interface..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.UnexpectedRuneUtf8SequenceLength">
            <summary>
              Looks up a localized string similar to Rune.Utf8SequenceLength returns value {0} which is outside range 1 to 4 (inclusive), which is unexpected according to the official documentation..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.ValueCannotBeNegative">
            <summary>
              Looks up a localized string similar to Value cannot be negative..
            </summary>
        </member>
        <member name="P:X10D.ExceptionMessages.YearCannotBeZero">
            <summary>
              Looks up a localized string similar to Year cannot be zero..
            </summary>
        </member>
        <member name="T:X10D.IO.BooleanExtensions">
            <summary>
                Extension methods for <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="M:X10D.IO.BooleanExtensions.GetBytes(System.Boolean)">
            <summary>
                Returns the current boolean value as an array of bytes.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:X10D.IO.BooleanExtensions.TryWriteBytes(System.Boolean,System.Span{System.Byte})">
            <summary>
                Converts a <see cref="T:System.Boolean" /> into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Boolean" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.ByteExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:X10D.IO.ByteExtensions.GetBytes(System.Byte)">
            <summary>
                Returns the current 8-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:X10D.IO.ByteExtensions.TryWriteBytes(System.Byte,System.Span{System.Byte})">
            <summary>
                Converts a <see cref="T:System.Byte" /> into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Byte" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.DirectoryInfoExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.IO.DirectoryInfo" />.
            </summary>
        </member>
        <member name="M:X10D.IO.DirectoryInfoExtensions.Clear(System.IO.DirectoryInfo)">
            <summary>
                Removes all files and subdirectories in this directory, recursively, without deleting this directory.
            </summary>
            <param name="directory">The directory to clear.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The directory described by this <see cref="T:System.IO.DirectoryInfo" /> object does not exist or could not be found.
            </exception>
            <exception cref="T:System.IO.IOException">
                A target file is open or memory-mapped on a computer running Microsoft Windows NT.
                -or-
                There is an open handle on one of the files, and the operating system is Windows XP or earlier. This open handle can
                result from enumerating directories and files.
                -or-
                The directory is read-only.
                -or-
                The directory contains one or more files or subdirectories and recursive is false.
                -or-
                The directory is the application's current working directory.
                -or-
                There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier.
                This open handle can result from enumerating directories and files.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This directory or one of its children contain a read-only file.</exception>
        </member>
        <member name="T:X10D.IO.DoubleExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Double" />.
            </summary>
        </member>
        <member name="M:X10D.IO.DoubleExtensions.GetBytes(System.Double)">
            <summary>
                Returns the current double-precision floating-point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:X10D.IO.DoubleExtensions.GetBytes(System.Double,X10D.Endianness)">
            <summary>
                Returns the current double-precision floating-point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:X10D.IO.DoubleExtensions.TryWriteBytes(System.Double,System.Span{System.Byte})">
            <summary>
                Converts the current double-precision floating-point into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Double" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.DoubleExtensions.TryWriteBytes(System.Double,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current double-precision floating-point into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Double" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.FileInfoExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.IO.FileInfo" />.
            </summary>
        </member>
        <member name="M:X10D.IO.FileInfoExtensions.GetHash``1(System.IO.FileInfo)">
            <summary>
                Computes the hash of a file using the specified hash algorithm.
            </summary>
            <param name="value">The file whose hash to compute.</param>
            <typeparam name="T">
                The type of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> whose <see cref="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)" /> is to be used for
                computing the hash.
            </typeparam>
            <returns>The hash of <paramref name="value" /> represented as an array of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file was not found.</exception>
            <exception cref="T:System.IO.IOException">The opened file stream cannot be read.</exception>
            <exception cref="T:System.TypeInitializationException">
                The specified <see cref="T:System.Security.Cryptography.HashAlgorithm" /> does not offer a public, static. parameterless <c>Create</c> method, or its
                <c>Create</c> method returns a type that is not assignable to <typeparamref name="T" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The stream has already been disposed.</exception>
        </member>
        <member name="M:X10D.IO.FileInfoExtensions.TryWriteHash``1(System.IO.FileInfo,System.Span{System.Byte},System.Int32@)">
            <summary>
                Computes the hash of a file using the specified hash algorithm.
            </summary>
            <param name="value">The file whose hash to compute.</param>
            <param name="destination">When this method returns, contains the computed hash of <paramref name="value" />.</param>
            <param name="bytesWritten">
                When this method returns, the total number of bytes written into destination. This parameter is treated as
                uninitialized.
            </param>
            <typeparam name="T">
                The type of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> whose <see cref="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)" /> is to be used for
                computing the hash.
            </typeparam>
            <returns>
                <see langword="true" /> if the destination is long enough to receive the hash; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file was not found.</exception>
            <exception cref="T:System.IO.IOException">The opened file stream cannot be read.</exception>
            <exception cref="T:System.TypeInitializationException">
                The specified <see cref="T:System.Security.Cryptography.HashAlgorithm" /> does not offer a public, static. parameterless <c>Create</c> method, or its
                <c>Create</c> method returns a type that is not assignable to <typeparamref name="T" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The stream has already been disposed.</exception>
        </member>
        <member name="T:X10D.IO.Int16Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Int16" />.
            </summary>
        </member>
        <member name="M:X10D.IO.Int16Extensions.GetBytes(System.Int16)">
            <summary>
                Returns the current 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:X10D.IO.Int16Extensions.GetBytes(System.Int16,X10D.Endianness)">
            <summary>
                Returns the current 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:X10D.IO.Int16Extensions.TryWriteBytes(System.Int16,System.Span{System.Byte})">
            <summary>
                Converts the current 16-bit signed integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Int16" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.Int16Extensions.TryWriteBytes(System.Int16,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current 16-bit signed integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Int16" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.Int32Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:X10D.IO.Int32Extensions.GetBytes(System.Int32)">
            <summary>
                Returns the current 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:X10D.IO.Int32Extensions.GetBytes(System.Int32,X10D.Endianness)">
            <summary>
                Returns the current 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:X10D.IO.Int32Extensions.TryWriteBytes(System.Int32,System.Span{System.Byte})">
            <summary>
                Converts the current 32-bit signed integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Int32" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.Int32Extensions.TryWriteBytes(System.Int32,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current 32-bit signed integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Int32" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.Int64Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.IO.Int64Extensions.GetBytes(System.Int64)">
            <summary>
                Returns the current 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:X10D.IO.Int64Extensions.GetBytes(System.Int64,X10D.Endianness)">
            <summary>
                Returns the current 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:X10D.IO.Int64Extensions.TryWriteBytes(System.Int64,System.Span{System.Byte})">
            <summary>
                Converts the current 64-bit signed integer a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Int64" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.Int64Extensions.TryWriteBytes(System.Int64,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current 64-bit signed integer a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Int64" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.ListOfByteExtensions">
            <summary>
                Extension methods for <see cref="T:System.Byte" /> array.
            </summary>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.AsString(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Converts the numeric value of each element of a specified list of bytes to its equivalent hexadecimal string
                representation.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>
                A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in
                <paramref name="source" />; for example, "7F-2C-4A-00".
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToDouble(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a double-precision floating point number converted from eight bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A double-precision floating point number formed by eight bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToDouble(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a double-precision floating point number converted from eight bytes at a specified position in a list of
                bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>
                A double-precision floating point number formed by eight bytes beginning at <paramref name="startIndex" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToInt16(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a 16-bit signed integer converted from two bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A 16-bit signed integer formed by two bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToInt16(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a 16-bit signed integer converted from two bytes at a specified position in a list of bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToInt32(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a 32-bit signed integer converted from four bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A 32-bit signed integer formed by four bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToInt32(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a 32-bit signed integer converted from four bytes at a specified position in a list of bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToInt64(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a 64-bit signed integer converted from eight bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A 64-bit signed integer formed by eight bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToInt64(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a 64-bit signed integer converted from eight bytes at a specified position in a list of bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToSingle(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a single-precision floating point number converted from four bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A single-precision floating point number formed by four bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToSingle(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a single-precision floating point number converted from four bytes at a specified position in a list of bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>
                A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToString(System.Collections.Generic.IReadOnlyList{System.Byte},System.Text.Encoding)">
            <summary>
                Decodes all the bytes within the current list of bytes to a string, using a specified encoding.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="encoding">The encoding which should be used to decode <paramref name="source" />.</param>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="encoding" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToUInt16(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a 16-bit unsigned integer converted from two bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A 16-bit unsigned integer formed by two bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToUInt16(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a 16-bit unsigned integer converted from two bytes at a specified position in a list of bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToUInt32(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a 32-bit unsigned integer converted from four bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A 32-bit unsigned integer formed by four bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToUInt32(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a 32-bit unsigned integer converted from four bytes at a specified position in a list of bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToUInt64(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
                Returns a 64-bit unsigned integer converted from eight bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.ListOfByteExtensions.ToUInt64(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32)">
            <summary>
                Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a list of bytes.
            </summary>
            <param name="source">The source list of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="source" />.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.IO.SByteExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.SByte" />.
            </summary>
        </member>
        <member name="M:X10D.IO.SByteExtensions.GetBytes(System.SByte)">
            <summary>
                Returns the current 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:X10D.IO.SByteExtensions.TryWriteBytes(System.SByte,System.Span{System.Byte})">
            <summary>
                Converts the current 16-bit unsigned integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.SByte" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.SingleExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Single" />.
            </summary>
        </member>
        <member name="M:X10D.IO.SingleExtensions.GetBytes(System.Single)">
            <summary>
                Returns the current single-precision floating-point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:X10D.IO.SingleExtensions.GetBytes(System.Single,X10D.Endianness)">
            <summary>
                Returns the current single-precision floating-point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:X10D.IO.SingleExtensions.TryWriteBytes(System.Single,System.Span{System.Byte})">
            <summary>
                Converts the current single-precision floating-point into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Single" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.SingleExtensions.TryWriteBytes(System.Single,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current single-precision floating-point into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.Single" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.StreamExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.IO.Stream" />.
            </summary>
        </member>
        <member name="M:X10D.IO.StreamExtensions.GetHash``1(System.IO.Stream)">
            <summary>
                Returns the hash of the current stream as an array of bytes using the specified hash algorithm.
            </summary>
            <param name="stream">The stream whose hash is to be computed.</param>
            <typeparam name="T">
                The type of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> whose <see cref="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)" /> is to be used for
                computing the hash.
            </typeparam>
            <returns>The hash of <paramref name="stream" /> represented as an array of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" /></exception>
            <exception cref="T:System.IO.IOException"><paramref name="stream" /> does not support reading.</exception>
            <exception cref="T:System.TypeInitializationException">
                The specified <see cref="T:System.Security.Cryptography.HashAlgorithm" /> does not offer a public, static. parameterless <c>Create</c> method, or its
                <c>Create</c> method returns a type that is not assignable to <typeparamref name="T" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The stream has already been disposed.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadDecimal(System.IO.Stream)">
            <summary>
                Reads a decimal value from the current stream using the system's default endian encoding, and advances the stream
                position by sixteen bytes.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>A sixteen-byte decimal value read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadDecimal(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads a decimal value from the current stream using a specified endian encoding, and advances the stream position
                by sixteen bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>A decimal value read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadDouble(System.IO.Stream)">
            <summary>
                Reads a double-precision floating point value from the current stream using the system's default endian encoding,
                and advances the stream position by eight bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>A double-precision floating point value read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadDouble(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads a double-precision floating point value from the current stream using a specified endian encoding, and
                advances the stream position by eight bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>A double-precision floating point value read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadInt16(System.IO.Stream)">
            <summary>
                Reads a two-byte signed integer from the current stream using the system's default endian encoding, and advances
                the stream position by two bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>An two-byte signed integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadInt16(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads a two-byte signed integer from the current stream using the specified endian encoding, and advances the
                stream position by two bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>An two-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadInt32(System.IO.Stream)">
            <summary>
                Reads a four-byte signed integer from the current stream using the system's default endian encoding, and advances
                the stream position by four bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>An four-byte signed integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadInt32(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads a four-byte signed integer from the current stream using the specified endian encoding, and advances the
                stream position by four bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>An four-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadInt64(System.IO.Stream)">
            <summary>
                Reads an eight-byte signed integer from the current stream using the system's default endian encoding, and
                advances the stream position by eight bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>An eight-byte signed integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadInt64(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads an eight-byte signed integer from the current stream using the specified endian encoding, and advances the
                stream position by eight bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>An eight-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadSingle(System.IO.Stream)">
            <summary>
                Reads a single-precision floating point value from the current stream using the system's default endian encoding,
                and advances the stream position by four bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>A single-precision floating point value read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadSingle(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads a double-precision floating point value from the current stream using a specified endian encoding, and
                advances the stream position by four bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>A single-precision floating point value read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadUInt16(System.IO.Stream)">
            <summary>
                Reads a two-byte unsigned integer from the current stream using the system's default endian encoding, and advances
                the stream position by two bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>An two-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadUInt16(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads a two-byte unsigned integer from the current stream using the specified endian encoding, and advances the
                stream position by two bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>An two-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadUInt32(System.IO.Stream)">
            <summary>
                Reads a four-byte unsigned integer from the current stream using the system's default endian encoding, and
                advances the stream position by four bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>An four-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadUInt32(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads a four-byte unsigned integer from the current stream using the specified endian encoding, and advances the
                stream position by four bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>An four-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadUInt64(System.IO.Stream)">
            <summary>
                Reads an eight-byte unsigned integer from the current stream using the system's default endian encoding, and
                advances the stream position by eight bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <returns>An eight-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.ReadUInt64(System.IO.Stream,X10D.Endianness)">
            <summary>
                Reads an eight-byte unsigned integer from the current stream using the specified endian encoding, and advances the
                stream position by eight bytes.
            </summary>
            <param name="stream">The stream from which the value should be read.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>An eight-byte unsigned integer read from the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.TryWriteHash``1(System.IO.Stream,System.Span{System.Byte},System.Int32@)">
            <summary>
                Returns the hash of the current stream as an array of bytes using the specified hash algorithm.
            </summary>
            <param name="stream">The stream whose hash is to be computed.</param>
            <param name="destination">When this method returns, contains the computed hash of <paramref name="stream" />.</param>
            <param name="bytesWritten">
                When this method returns, the total number of bytes written into destination. This parameter is treated as
                uninitialized.
            </param>
            <typeparam name="T">
                The type of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> whose <see cref="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)" /> is to be used for
                computing the hash.
            </typeparam>
            <returns>
                <see langword="true" /> if the destination is long enough to receive the hash; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" /></exception>
            <exception cref="T:System.IO.IOException"><paramref name="stream" /> does not support reading.</exception>
            <exception cref="T:System.TypeInitializationException">
                The specified <see cref="T:System.Security.Cryptography.HashAlgorithm" /> does not offer a public, static. parameterless <c>Create</c> method, or its
                <c>Create</c> method returns a type that is not assignable to <typeparamref name="T" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The stream has already been disposed.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Int16)">
            <summary>
                Writes a two-byte signed integer to the current stream using the system's default endian encoding, and advances
                the stream position by two bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The two-byte signed integer to write.</param>
            <returns>The number of bytes written to the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Int16,X10D.Endianness)">
            <summary>
                Writes a two-byte signed integer to the current stream using the specified endian encoding, and advances the
                stream position by two bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The two-byte signed integer to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Int32)">
            <summary>
                Writes a four-byte signed integer to the current stream using the system's default endian encoding, and advances
                the stream position by four bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The four-byte signed integer to write.</param>
            <returns>The number of bytes written to the stream.</returns>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Int32,X10D.Endianness)">
            <summary>
                Writes a four-byte signed integer to the current stream using the specified endian encoding, and advances the
                stream position by four bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The four-byte signed integer to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Int64)">
            <summary>
                Writes an eight-byte signed integer to the current stream using the system's default endian encoding, and advances
                the stream position by eight bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The eight-byte signed integer to write.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Int64,X10D.Endianness)">
            <summary>
                Writes an eight-byte signed integer to the current stream using the specified endian encoding, and advances the
                stream position by eight bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The eight-byte signed integer to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.UInt16)">
            <summary>
                Writes a two-byte unsigned integer to the current stream using the system's default endian encoding, and advances
                the stream position by two bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The two-byte unsigned integer to write.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.UInt16,X10D.Endianness)">
            <summary>
                Writes a two-byte unsigned integer to the current stream using the specified endian encoding, and advances the
                stream position by two bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The two-byte unsigned integer to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.UInt32)">
            <summary>
                Writes a four-byte unsigned integer to the current stream using the system's default endian encoding, and advances
                the stream position by four bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The four-byte unsigned integer to write.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.UInt32,X10D.Endianness)">
            <summary>
                Writes a four-byte unsigned integer to the current stream using the specified endian encoding, and advances the
                stream position by four bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The four-byte unsigned integer to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.UInt64)">
            <summary>
                Writes an eight-byte unsigned integer to the current stream using the system's default endian encoding, and
                advances the stream position by eight bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.UInt64,X10D.Endianness)">
            <summary>
                Writes an eight-byte signed integer to the current stream using the specified endian encoding, and advances the
                stream position by eight bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The eight-byte signed integer to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Single,X10D.Endianness)">
            <summary>
                Writes a single-precision floating point value to the current stream using the specified endian encoding, and
                advances the stream position by four bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The single-precision floating point value to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Double,X10D.Endianness)">
            <summary>
                Writes a double-precision floating point value to the current stream using the specified endian encoding, and
                advances the stream position by eight bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The double-precision floating point value to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.StreamExtensions.Write(System.IO.Stream,System.Decimal,X10D.Endianness)">
            <summary>
                Writes a decimal value to the current stream using the specified endian encoding, and advances the stream position
                by sixteen bytes.
            </summary>
            <param name="stream">The stream to which the value should be written.</param>
            <param name="value">The decimal value to write.</param>
            <param name="endianness">The endian encoding to use.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.IO.TextReaderExtensions">
            <summary>
                IO-related extension methods for <see cref="T:System.IO.TextReader" />.
            </summary>
        </member>
        <member name="M:X10D.IO.TextReaderExtensions.EnumerateLines(System.IO.TextReader)">
            <summary>
                Enumerates the lines provided by the current text reader.
            </summary>
            <param name="reader">The reader whose lines to enumerate.</param>
            <returns>An enumerable collection of lines as read from <paramref name="reader" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.IO.TextReaderExtensions.EnumerateLinesAsync(System.IO.TextReader)">
            <summary>
                Asynchronously enumerates the lines provided by the current text reader.
            </summary>
            <param name="reader">The reader whose lines to enumerate.</param>
            <returns>An asynchronous enumerable collection of lines as read from <paramref name="reader" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.IO.UInt16Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.UInt16" />.
            </summary>
        </member>
        <member name="M:X10D.IO.UInt16Extensions.GetBytes(System.UInt16)">
            <summary>
                Returns the current 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:X10D.IO.UInt16Extensions.GetBytes(System.UInt16,X10D.Endianness)">
            <summary>
                Returns the current 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:X10D.IO.UInt16Extensions.TryWriteBytes(System.UInt16,System.Span{System.Byte})">
            <summary>
                Converts the current 16-bit unsigned integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.UInt16" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.UInt16Extensions.TryWriteBytes(System.UInt16,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current 16-bit unsigned integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.UInt16" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.UInt32Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.UInt32" />.
            </summary>
        </member>
        <member name="M:X10D.IO.UInt32Extensions.GetBytes(System.UInt32)">
            <summary>
                Returns the current 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:X10D.IO.UInt32Extensions.GetBytes(System.UInt32,X10D.Endianness)">
            <summary>
                Returns the current 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:X10D.IO.UInt32Extensions.TryWriteBytes(System.UInt32,System.Span{System.Byte})">
            <summary>
                Converts the current 32-bit unsigned integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.UInt32" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.UInt32Extensions.TryWriteBytes(System.UInt32,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current 32-bit unsigned integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.UInt32" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.IO.UInt64Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.UInt64" />.
            </summary>
        </member>
        <member name="M:X10D.IO.UInt64Extensions.GetBytes(System.UInt64)">
            <summary>
                Returns the current 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:X10D.IO.UInt64Extensions.GetBytes(System.UInt64,X10D.Endianness)">
            <summary>
                Returns the current 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:X10D.IO.UInt64Extensions.TryWriteBytes(System.UInt64,System.Span{System.Byte})">
            <summary>
                Converts the current 64-bit unsigned integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.UInt64" />.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.IO.UInt64Extensions.TryWriteBytes(System.UInt64,System.Span{System.Byte},X10D.Endianness)">
            <summary>
                Converts the current 64-bit unsigned integer into a span of bytes.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value.</param>
            <param name="destination">When this method returns, the bytes representing the converted <see cref="T:System.UInt64" />.</param>
            <param name="endianness">The endianness with which to write the bytes.</param>
            <returns><see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:X10D.Linq.ByteExtensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.Product(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Byte" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Byte" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.Product(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.SByte" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.SByte" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Byte" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.SByte" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.RangeTo(System.Byte,System.Byte)">
            <summary>
                Returns an enumerable sequence of 8-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 8-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.RangeTo(System.Byte,System.Int16)">
            <summary>
                Returns an enumerable sequence of 16-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 16-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.RangeTo(System.Byte,System.Int32)">
            <summary>
                Returns an enumerable sequence of 32-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 32-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="M:X10D.Linq.ByteExtensions.RangeTo(System.Byte,System.Int64)">
            <summary>
                Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 64-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="T:X10D.Linq.DecimalExtensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.DecimalExtensions.Product(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.DecimalExtensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Linq.DoubleExtensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Double" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.DoubleExtensions.Product(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.DoubleExtensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Linq.EnumerableExtensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.EnumerableExtensions.ConcatOne``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Concatenates a single value to the end of a sequence.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="value">The value to concatenate to the end of the source sequence.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the input sequence, and the specified
                value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.EnumerableExtensions.MinMax``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the minimum and maximum values in a sequence of values.
            </summary>
            <param name="source">A sequence of values to determine the minimum and maximum values of.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <returns>A tuple containing the minimum and maximum values in <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:X10D.Linq.EnumerableExtensions.MinMax``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Returns the minimum and maximum values in a sequence of values, using a specified comparer.
            </summary>
            <param name="source">A sequence of values to determine the minimum and maximum values of.</param>
            <param name="comparer">The comparer which shall be used to compare each element in the sequence.</param>
            <typeparam name="T">The type of the elements in <paramref name="source" />.</typeparam>
            <returns>A tuple containing the minimum and maximum values in <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:X10D.Linq.EnumerableExtensions.MinMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes a transform function on each element of a sequence of elements and returns the minimum and maximum values.
            </summary>
            <param name="source">A sequence of values to determine the minimum and maximum values of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the elements to compare.</typeparam>
            <returns>A tuple containing the minimum and maximum values in <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:X10D.Linq.EnumerableExtensions.MinMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
                Invokes a transform function on each element of a sequence of elements and returns the minimum and maximum values,
                using a specified comparer.
            </summary>
            <param name="source">A sequence of values to determine the minimum and maximum values of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The comparer which shall be used to compare each element in the sequence.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the elements to compare.</typeparam>
            <returns>A tuple containing the minimum and maximum values in <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:X10D.Linq.EnumerableExtensions.MinMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the minimum and maximum values in a sequence according to a specified key selector function.
            </summary>
            <param name="source">A sequence of values to determine the minimum and maximum values of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the elements to compare.</typeparam>
            <returns>A tuple containing the minimum and maximum values in <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:X10D.Linq.EnumerableExtensions.MinMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
                Returns the minimum and maximum values in a sequence according to a specified key selector function.
            </summary>
            <param name="source">A sequence of values to determine the minimum and maximum values of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The comparer which shall be used to compare each element in the sequence.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the elements to compare.</typeparam>
            <returns>A tuple containing the minimum and maximum values in <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="T:X10D.Linq.Int16Extensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.Int16Extensions.Product(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Int16" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int16" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
        </member>
        <member name="M:X10D.Linq.Int16Extensions.Product(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.UInt16" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.UInt16" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
        </member>
        <member name="M:X10D.Linq.Int16Extensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Int16" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
        </member>
        <member name="M:X10D.Linq.Int16Extensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.UInt16" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
        </member>
        <member name="M:X10D.Linq.Int16Extensions.RangeTo(System.Int16,System.Int16)">
            <summary>
                Returns an enumerable sequence of 16-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 16-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="M:X10D.Linq.Int16Extensions.RangeTo(System.Int16,System.Int32)">
            <summary>
                Returns an enumerable sequence of 32-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 32-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="M:X10D.Linq.Int16Extensions.RangeTo(System.Int16,System.Int64)">
            <summary>
                Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 64-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="T:X10D.Linq.Int32Extensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.Int32Extensions.Product(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int32Extensions.Product(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.UInt32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.UInt32" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int32Extensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on
                each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int32Extensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.UInt32" /> values that are obtained by invoking a transform function on
                each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int32Extensions.RangeTo(System.Int32,System.Int32)">
            <summary>
                Returns an enumerable sequence of 32-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 32-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="M:X10D.Linq.Int32Extensions.RangeTo(System.Int32,System.Int64)">
            <summary>
                Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 64-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="T:X10D.Linq.Int64Extensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.Int64Extensions.Product(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int64Extensions.Product(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.UInt64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.UInt64" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int64Extensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on
                each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int64Extensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.UInt64" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.Int64Extensions.RangeTo(System.Int64,System.Int64)">
            <summary>
                Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value.
            </summary>
            <param name="value">The starting value of the sequence.</param>
            <param name="end">The ending value of the sequence.</param>
            <returns>
                An enumerable collection of 64-bit integers, ranging from <paramref name="value" /> to <paramref name="end" />.
            </returns>
        </member>
        <member name="T:X10D.Linq.ReadOnlySpanExtensions">
            <summary>
                Extension methods for <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.ReadOnlySpanExtensions.All``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
                Determines whether all elements of a read-only span satisfy a condition.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1" /> that contains the elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>
                <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the
                span is empty; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.ReadOnlySpanExtensions.Any``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
                Determines whether any element of a read-only span satisfies a condition.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1" /> that contains the elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>
                <see langword="true" /> if the source span is not empty and at least one of its elements passes the test in the
                specified predicate; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.ReadOnlySpanExtensions.Count``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
                Returns a number that represents how many elements in the specified sequence satisfy a condition.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1" /> that contains elements to be tested and counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
            <returns>
                A number that represents how many elements in the sequence satisfy the condition in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Linq.SingleExtensions">
            <summary>
                LINQ-inspired extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Single" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.SingleExtensions.Product(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values that are used to calculate the product.</param>
            <returns>The product the values in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.SingleExtensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
                Computes the product of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function
                on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a product.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The product of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Linq.SpanExtensions">
            <summary>
                Extension methods for <see cref="T:System.Span`1" />.
            </summary>
        </member>
        <member name="M:X10D.Linq.SpanExtensions.All``1(System.Span{``0},System.Predicate{``0})">
            <summary>
                Determines whether all elements of a span satisfy a condition.
            </summary>
            <param name="source">A <see cref="T:System.Span`1" /> that contains the elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>
                <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the
                span is empty; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.SpanExtensions.Any``1(System.Span{``0},System.Predicate{``0})">
            <summary>
                Determines whether any element of a span satisfies a condition.
            </summary>
            <param name="source">A <see cref="T:System.Span`1" /> that contains the elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>
                <see langword="true" /> if the source span is not empty and at least one of its elements passes the test in the
                specified predicate; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Linq.SpanExtensions.Count``1(System.Span{``0},System.Predicate{``0})">
            <summary>
                Returns a number that represents how many elements in the specified sequence satisfy a condition.
            </summary>
            <param name="source">A <see cref="T:System.Span`1" /> that contains elements to be tested and counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
            <returns>
                A number that represents how many elements in the sequence satisfy the condition in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Math.ByteExtensions">
            <summary>
                Math-related extension methods for <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:X10D.Math.ByteExtensions.DigitalRoot(System.Byte)">
            <summary>
                Computes the digital root of this 8-bit integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>The digital root is defined as the recursive sum of digits until that result is a single digit.</remarks>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.ByteExtensions.Factorial(System.Byte)">
            <summary>
                Returns the factorial of the current 8-bit unsigned integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Math.ByteExtensions.GreatestCommonFactor(System.Byte,System.Byte)">
            <summary>
                Calculates the greatest common factor between the current 8-bit unsigned integer, and another 8-bit unsigned integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.ByteExtensions.IsEven(System.Byte)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.ByteExtensions.IsOdd(System.Byte)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.ByteExtensions.IsPrime(System.Byte)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.ByteExtensions.LowestCommonMultiple(System.Byte,System.Byte)">
            <summary>
                Calculates the lowest common multiple between the current 8-bit signed integer, and another 8-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.ByteExtensions.MultiplicativePersistence(System.Byte)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.ByteExtensions.Wrap(System.Byte,System.Byte,System.Byte)">
            <summary>
                Wraps the current 8-bit unsigned integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.ByteExtensions.Wrap(System.Byte,System.Byte)">
            <summary>
                Wraps the current 8-bit unsigned integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.ComparableExtensions">
            <summary>
                Extension methods for <see cref="T:System.IComparable`1" />.
            </summary>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.Between``3(``0,``1,``2,X10D.Math.InclusiveOptions)">
             <summary>
                 Determines if a specified value falls exclusively between a specified lower bound and upper bound.
             </summary>
             <typeparam name="T1">An <see cref="T:System.IComparable`1" /> type.</typeparam>
             <typeparam name="T2">The first comparison operand type.</typeparam>
             <typeparam name="T3">The second comparison operand type.</typeparam>
             <param name="value">The value to compare.</param>
             <param name="lower">The exclusive lower bound.</param>
             <param name="upper">The exclusive upper bound.</param>
             <param name="inclusiveOptions">The comparison clusivity.</param>
             <returns>
                 <see langword="true" /> if <paramref name="value" /> is between the <paramref name="lower" /> and
                 <paramref name="upper" />
                 -or-
                 <see langword="false" /> otherwise.
             </returns>
             <example>
             <code lang="csharp">
             int firstValue = 42;
             int secondValue = 15;
            
             int lower = 0;
             int upper = 20;
            
             Console.WriteLine($"{firstValue} between {lower} and {upper}?");
             Console.WriteLine(firstValue.Between(lower, upper));
            
             Console.WriteLine($"{secondValue} between {lower} and {upper}?");
             Console.WriteLine(secondValue.Between(lower, upper));
            
             // This will output the following:
             //      42 between 0 and 20?
             //      False
             //      15 between 0 and 20?
             //      True
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.Clamp``1(``0,``0,``0)">
             <summary>
                 Returns the current value clamped to the inclusive range of <paramref name="lower" /> and <paramref name="upper" />.
             </summary>
             <param name="value">The value to be clamped.</param>
             <param name="lower">The lower bound of the result.</param>
             <param name="upper">The upper bound of the result.</param>
             <typeparam name="T">An <see cref="T:System.IComparable" /> type.</typeparam>
             <returns>
                 <paramref name="value" /> if <paramref name="lower" /> ≤ <paramref name="value" /> ≤ <paramref name="upper" />.
                 -or-
                 <paramref name="lower" /> if <paramref name="value" /> &lt; <paramref name="lower" />.
                 -or-
                 <paramref name="upper" /> if <paramref name="upper" /> &lt; <paramref name="value" />.
             </returns>
             <exception cref="T:System.ArgumentException"><paramref name="lower" /> is greater than <paramref name="upper" />.</exception>
             <example>
             <code lang="csharp">
             int value = 42;
             int lower = 0;
             int upper = 20;
            
             int clamped = value.Clamp(lower, upper);
             // clamped will be 20
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.GreaterThan``2(``0,``1)">
             <summary>
                 Determines if the current value is greater than another value.
             </summary>
             <param name="value">The first value.</param>
             <param name="other">The second value.</param>
             <typeparam name="T1">An <see cref="T:System.IComparable`1" /> type.</typeparam>
             <typeparam name="T2">The comparison operand type.</typeparam>
             <returns>
                 <see langword="true" /> if <paramref name="value" /> is greater than <paramref name="other" />
                 -or-
                 <see langword="false" /> otherwise.
             </returns>
             <example>
             <code lang="csharp">
             int first = 5;
             int second = 10;
            
             bool result = first.GreaterThan(second);
             // result will be False
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.GreaterThanOrEqualTo``2(``0,``1)">
             <summary>
                 Determines if the current value is greater than or equal to another value.
             </summary>
             <param name="value">The first value.</param>
             <param name="other">The second value.</param>
             <typeparam name="T1">An <see cref="T:System.IComparable`1" /> type.</typeparam>
             <typeparam name="T2">The comparison operand type.</typeparam>
             <returns>
                 <see langword="true" /> if <paramref name="value" /> is greater than or equal to <paramref name="other" />
                 -or-
                 <see langword="false" /> otherwise.
             </returns>
             <example>
             <code lang="csharp">
             int first = 5;
             int second = 10;
            
             bool result = first.GreaterThanOrEqualTo(second);
             // result will be False
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.LessThan``2(``0,``1)">
             <summary>
                 Determines if the current value is less than another value.
             </summary>
             <param name="value">The first value.</param>
             <param name="other">The second value.</param>
             <typeparam name="T1">An <see cref="T:System.IComparable`1" /> type.</typeparam>
             <typeparam name="T2">The comparison operand type.</typeparam>
             <returns>
                 <see langword="true" /> if <paramref name="value" /> is less than <paramref name="other" />
                 -or-
                 <see langword="false" /> otherwise.
             </returns>
             <example>
             <code lang="csharp">
             int first = 5;
             int second = 10;
            
             bool result = first.LessThan(second);
             // result will be True
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.LessThanOrEqualTo``2(``0,``1)">
             <summary>
                 Determines if the current value is less than or equal to another value.
             </summary>
             <param name="value">The first value.</param>
             <param name="other">The second value.</param>
             <typeparam name="T1">An <see cref="T:System.IComparable`1" /> type.</typeparam>
             <typeparam name="T2">The comparison operand type.</typeparam>
             <returns>
                 <see langword="true" /> if <paramref name="value" /> is less than or equal to <paramref name="other" />
                 -or-
                 <see langword="false" /> otherwise.
             </returns>
             <example>
             <code lang="csharp">
             int first = 5;
             int second = 10;
            
             bool result = first.LessThanOrEqualTo(second);
             // result will be True
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.Max``1(``0,``0)">
             <summary>
                 Returns the maximum of two values.
             </summary>
             <param name="value">The first value.</param>
             <param name="other">The second value.</param>
             <typeparam name="T">A type which implements <see cref="T:System.IComparable`1" />.</typeparam>
             <returns>
                 <paramref name="value" /> if <paramref name="value" /> is greater than <paramref name="other" />
                 -or-
                 <paramref name="other" /> otherwise.
             </returns>
             <example>
             <code lang="csharp">
             int first = 5;
             int second = 10;
            
             int max = first.Max(second);
             // max will be 10
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Math.ComparableExtensions.Min``1(``0,``0)">
             <summary>
                 Returns the minimum of two values.
             </summary>
             <param name="value">The first value.</param>
             <param name="other">The second value.</param>
             <typeparam name="T">A type which implements <see cref="T:System.IComparable`1" />.</typeparam>
             <returns>
                 <paramref name="value" /> if <paramref name="value" /> is less than <paramref name="other" />
                 -or-
                 <paramref name="other" /> otherwise.
             </returns>
             <example>
             <code lang="csharp">
             int first = 5;
             int second = 10;
            
             int min = first.Min(second);
             // min will be 5
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Math.DecimalExtensions">
            <summary>
                Extension methods for <see cref="T:System.Decimal" />.
            </summary>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.ComplexSqrt(System.Decimal)">
            <summary>
                Returns the complex square root of this decimal number.
            </summary>
            <param name="value">The number whose square root is to be found.</param>
            <returns>The square root of <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.IsEven(System.Decimal)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.IsOdd(System.Decimal)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.Round(System.Decimal)">
            <summary>
                Rounds the current value to the nearest whole number.
            </summary>
            <param name="value">The value to round.</param>
            <returns><paramref name="value" /> rounded to the nearest whole number.</returns>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.Round(System.Decimal,System.Decimal)">
            <summary>
                Rounds the current value to the nearest multiple of a specified number.
            </summary>
            <param name="value">The value to round.</param>
            <param name="nearest">The nearest multiple to which <paramref name="value" /> should be rounded.</param>
            <returns><paramref name="value" /> rounded to the nearest multiple of <paramref name="nearest" />.</returns>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.Saturate(System.Decimal)">
            <summary>
                Saturates this decimal number.
            </summary>
            <param name="value">The value to saturate.</param>
            <returns>The saturated value.</returns>
            <remarks>This method clamps <paramref name="value" /> between 0 and 1.</remarks>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.Sign(System.Decimal)">
             <summary>
                 Returns an integer that indicates the sign of this decimal number.
             </summary>
             <param name="value">A signed number.</param>
             <returns>
                 A number that indicates the sign of <paramref name="value" />, as shown in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>-1</term>
                         <description><paramref name="value" /> is less than zero.</description>
                     </item>
                     <item>
                         <term>0</term>
                         <description><paramref name="value" /> is equal to zero.</description>
                     </item>
                     <item>
                         <term>1</term>
                         <description><paramref name="value" /> is greater than zero.</description>
                     </item>
                 </list>
             </returns>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.Sqrt(System.Decimal)">
             <summary>
                 Returns the square root of this decimal number.
             </summary>
             <param name="value">The number whose square root is to be found.</param>
             <returns>
                 One of the values in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                        <term>The positive square root of <paramref name="value" />.</term>
                        <description><paramref name="value" /> is greater than or equal to 0.</description>
                     </item>
                     <item>
                         <term><see cref="F:System.Double.NaN" /></term>
                         <description><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" /> or is negative.</description>
                     </item>
                     <item>
                         <term><see cref="F:System.Double.PositiveInfinity" /></term>
                         <description><paramref name="value" /> is equal to <see cref="F:System.Double.PositiveInfinity" />.</description>
                     </item>
                 </list>
             </returns>
             <exception cref="T:System.ArgumentException"><paramref name="value" /> is negative.</exception>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.Wrap(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
                Wraps the current decimal number between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.DecimalExtensions.Wrap(System.Decimal,System.Decimal)">
            <summary>
                Wraps the current decimal number between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.DoubleExtensions">
            <summary>
                Mathematical extension methods.
            </summary>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Acos(System.Double)">
            <summary>
                Returns the arccosine of the specified value.
            </summary>
            <param name="value">
                The value representing a cosine, which must be greater than or equal to -1, but less than or equal to 1.
            </param>
            <returns>
                The arccosine of <paramref name="value" />, θ, measured in radians; such that 0 ≤ θ ≤ π. If <paramref name="value" />
                is equal to <see cref="F:System.Double.NaN" />, less than -1, or greater than 1, <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Acosh(System.Double)">
            <summary>
                Returns the hyperbolic arccosine of the specified value.
            </summary>
            <param name="value">
                The value representing a hyperbolic cosine, which must be greater than or equal to 1, but less than or equal to
                <see cref="F:System.Double.PositiveInfinity" />.
            </param>
            <returns>
                The hyperbolic arccosine of <paramref name="value" />, θ, measured in radians; such that 0 ≤ θ ≤ ∞. If
                <paramref name="value" /> is less than 1 or equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Asin(System.Double)">
            <summary>
                Returns the arcsine of the specified value.
            </summary>
            <param name="value">
                The value representing a sine, which must be greater than or equal to -1, but less than or equal to 1.
            </param>
            <returns>
                The arccosine of <paramref name="value" />, θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If
                <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, less than -1, or greater than 1,
                <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Asinh(System.Double)">
            <summary>
                Returns the hyperbolic arcsine of the specified value.
            </summary>
            <param name="value">
                The value representing a hyperbolic sine, which must be greater than or equal to 1, but less than or equal to
                <see cref="F:System.Double.PositiveInfinity" />.
            </param>
            <returns>
                The hyperbolic arccosine of <paramref name="value" />, measured in radians. If <paramref name="value" /> is equal to
                <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Atan(System.Double)">
            <summary>
                Returns the arctangent of the specified value.
            </summary>
            <param name="value">
                The value representing a tangent, which must be greater than or equal to -1, but less than or equal to 1.
            </param>
            <returns>
                The arctangent of <paramref name="value" />, θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If
                <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Atanh(System.Double)">
            <summary>
                Returns the hyperbolic arctangent of the specified value.
            </summary>
            <param name="value">
                The value representing a hyperbolic tangent, which must be greater than or equal to 1, but less than or equal to
                <see cref="F:System.Double.PositiveInfinity" />.
            </param>
            <returns>
                The hyperbolic arctangent of <paramref name="value" />, θ, measured in radians; such that -∞ &lt; θ &lt; -1, or 1 &lt;
                θ &lt; ∞. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, less than -1, or greater than 1,
                <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.ComplexSqrt(System.Double)">
            <summary>
                Returns the complex square root of this double-precision floating-point number.
            </summary>
            <param name="value">The number whose square root is to be found.</param>
            <returns>The square root of <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Cos(System.Double)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The cosine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />,
                <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns
                <see cref="F:System.Double.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Cosh(System.Double)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal to
                <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />,
                <see cref="F:System.Double.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to
                <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.DegreesToRadians(System.Double)">
            <summary>
                Converts the current angle in degrees to its equivalent represented in radians.
            </summary>
            <param name="value">The angle in degrees to convert.</param>
            <returns>The result of π * <paramref name="value" /> / 180.</returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.IsEven(System.Double)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.IsOdd(System.Double)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.RadiansToDegrees(System.Double)">
            <summary>
                Converts the current angle in radians to its equivalent represented in degrees.
            </summary>
            <param name="value">The angle in radians to convert.</param>
            <returns>The result of π * <paramref name="value" /> / 180.</returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Round(System.Double)">
            <summary>
                Rounds the current value to the nearest whole number.
            </summary>
            <param name="value">The value to round.</param>
            <returns><paramref name="value" /> rounded to the nearest whole number.</returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Round(System.Double,System.Double)">
            <summary>
                Rounds the current value to the nearest multiple of a specified number.
            </summary>
            <param name="value">The value to round.</param>
            <param name="nearest">The nearest multiple to which <paramref name="value" /> should be rounded.</param>
            <returns><paramref name="value" /> rounded to the nearest multiple of <paramref name="nearest" />.</returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Saturate(System.Double)">
            <summary>
                Saturates this double-precision floating-point number.
            </summary>
            <param name="value">The value to saturate.</param>
            <returns>The saturated value.</returns>
            <remarks>This method clamps <paramref name="value" /> between 0 and 1.</remarks>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Sin(System.Double)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="value">The angle, in radians.</param>
            <returns>
                The sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />,
                <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns
                <see cref="F:System.Double.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Sinh(System.Double)">
            <summary>
                Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">The angle, in radians.</param>
            <returns>
                The hyperbolic sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />,
                <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns
                <see cref="F:System.Double.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Sign(System.Double)">
             <summary>
                 Returns an integer that indicates the sign of this double-precision floating-point number.
             </summary>
             <param name="value">A signed number.</param>
             <returns>
                 A number that indicates the sign of <paramref name="value" />, as shown in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>-1</term>
                         <description><paramref name="value" /> is less than zero.</description>
                     </item>
                     <item>
                         <term>0</term>
                         <description><paramref name="value" /> is equal to zero.</description>
                     </item>
                     <item>
                         <term>1</term>
                         <description><paramref name="value" /> is greater than zero.</description>
                     </item>
                 </list>
             </returns>
             <exception cref="T:System.ArithmeticException"><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Sqrt(System.Double)">
             <summary>
                 Returns the square root of this double-precision floating-point number.
             </summary>
             <param name="value">The number whose square root is to be found.</param>
             <returns>
                 One of the values in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                        <term>The positive square root of <paramref name="value" />.</term>
                        <description><paramref name="value" /> is greater than or equal to 0.</description>
                     </item>
                     <item>
                         <term><see cref="F:System.Double.NaN" /></term>
                         <description><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" /> or is negative.</description>
                     </item>
                     <item>
                         <term><see cref="F:System.Double.PositiveInfinity" /></term>
                         <description><paramref name="value" /> is equal to <see cref="F:System.Double.PositiveInfinity" />.</description>
                     </item>
                 </list>
             </returns>
             <author>SLenik https://stackoverflow.com/a/6755197/1467293</author>
             <license>CC BY-SA 3.0</license>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Tan(System.Double)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The tangent of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />,
                <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns
                <see cref="F:System.Double.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Tanh(System.Double)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to
                <see cref="F:System.Double.NegativeInfinity" />, this method returns -1. If <paramref name="value" /> is equal to
                <see cref="F:System.Double.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to
                <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Wrap(System.Double,System.Double,System.Double)">
            <summary>
                Wraps the current double-precision floating-point number between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.DoubleExtensions.Wrap(System.Double,System.Double)">
            <summary>
                Wraps the current double-precision floating-point number between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.InclusiveOptions">
            <summary>
                Provides options for <see cref="M:X10D.Math.ComparableExtensions.Between``3(``0,``1,``2,X10D.Math.InclusiveOptions)" /> clusivity.
            </summary>
        </member>
        <member name="F:X10D.Math.InclusiveOptions.None">
            <summary>
                Indicates that the comparison will be exclusive.
            </summary>
        </member>
        <member name="F:X10D.Math.InclusiveOptions.UpperInclusive">
            <summary>
                Indicates that the comparison will treat the upper bound as exclusive.
            </summary>
        </member>
        <member name="F:X10D.Math.InclusiveOptions.LowerInclusive">
            <summary>
                Indicates that the comparison will treat the lower bound as exclusive.
            </summary>
        </member>
        <member name="F:X10D.Math.InclusiveOptions.Inclusive">
            <summary>
                Indicates that the comparison will treat both the upper and lower bound as exclusive.
            </summary>
        </member>
        <member name="T:X10D.Math.Int16Extensions">
            <summary>
                Extension methods for <see cref="T:System.Int16" />.
            </summary>
        </member>
        <member name="M:X10D.Math.Int16Extensions.DigitalRoot(System.Int16)">
            <summary>
                Computes the digital root of this 16-bit integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.Int16Extensions.Factorial(System.Int16)">
            <summary>
                Returns the factorial of the current 16-bit signed integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
            <exception cref="T:System.ArithmeticException"><paramref name="value" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Math.Int16Extensions.GreatestCommonFactor(System.Int16,System.Int16)">
            <summary>
                Calculates the greatest common factor between the current 16-bit signed integer, and another 16-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.Int16Extensions.IsEven(System.Int16)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.Int16Extensions.IsOdd(System.Int16)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.Int16Extensions.IsPrime(System.Int16)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.Int16Extensions.LowestCommonMultiple(System.Int16,System.Int16)">
            <summary>
                Calculates the lowest common multiple between the current 16-bit signed integer, and another 16-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.Int16Extensions.Mod(System.Int16,System.Int16)">
            <summary>
                Performs a modulo operation which supports a negative dividend.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The result of <c>dividend mod divisor</c>.</returns>
            <remarks>
                The <c>%</c> operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead
                remainder. This quirk inherently makes it difficult to use modulo in a negative context, as <c>x % y</c> where x is
                negative will return a negative value, akin to <c>-(x % y)</c>, even if precedence is forced. This method provides a
                modulo operation which supports negative dividends.
            </remarks>
            <author>ShreevatsaR, https://stackoverflow.com/a/1082938/1467293</author>
            <license>CC-BY-SA 2.5</license>
        </member>
        <member name="M:X10D.Math.Int16Extensions.MultiplicativePersistence(System.Int16)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.Int16Extensions.Sign(System.Int16)">
             <summary>
                 Returns an integer that indicates the sign of this 16-bit signed integer.
             </summary>
             <param name="value">A signed number.</param>
             <returns>
                 A number that indicates the sign of <paramref name="value" />, as shown in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>-1</term>
                         <description><paramref name="value" /> is less than zero.</description>
                     </item>
                     <item>
                         <term>0</term>
                         <description><paramref name="value" /> is equal to zero.</description>
                     </item>
                     <item>
                         <term>1</term>
                         <description><paramref name="value" /> is greater than zero.</description>
                     </item>
                 </list>
             </returns>
        </member>
        <member name="M:X10D.Math.Int16Extensions.Wrap(System.Int16,System.Int16,System.Int16)">
            <summary>
                Wraps the current 16-bit signed integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.Int16Extensions.Wrap(System.Int16,System.Int16)">
            <summary>
                Wraps the current 16-bit signed integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.Int32Extensions">
            <summary>
                Extension methods for <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:X10D.Math.Int32Extensions.DigitalRoot(System.Int32)">
            <summary>
                Computes the digital root of this 32-bit integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.Int32Extensions.Factorial(System.Int32)">
            <summary>
                Returns the factorial of the current 32-bit signed integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
            <exception cref="T:System.ArithmeticException"><paramref name="value" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Math.Int32Extensions.GreatestCommonFactor(System.Int32,System.Int32)">
            <summary>
                Calculates the greatest common factor between the current 32-bit signed integer, and another 32-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.Int32Extensions.IsEven(System.Int32)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.Int32Extensions.IsOdd(System.Int32)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.Int32Extensions.IsPrime(System.Int32)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.Int32Extensions.LowestCommonMultiple(System.Int32,System.Int32)">
            <summary>
                Calculates the lowest common multiple between the current 32-bit signed integer, and another 32-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.Int32Extensions.Mod(System.Int32,System.Int32)">
            <summary>
                Performs a modulo operation which supports a negative dividend.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The result of <c>dividend mod divisor</c>.</returns>
            <remarks>
                The <c>%</c> operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead
                remainder. This quirk inherently makes it difficult to use modulo in a negative context, as <c>x % y</c> where x is
                negative will return a negative value, akin to <c>-(x % y)</c>, even if precedence is forced. This method provides a
                modulo operation which supports negative dividends.
            </remarks>
            <author>ShreevatsaR, https://stackoverflow.com/a/1082938/1467293</author>
            <license>CC-BY-SA 2.5</license>
        </member>
        <member name="M:X10D.Math.Int32Extensions.MultiplicativePersistence(System.Int32)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.Int32Extensions.Sign(System.Int32)">
             <summary>
                 Returns an integer that indicates the sign of this 32-bit signed integer.
             </summary>
             <param name="value">A signed number.</param>
             <returns>
                 A number that indicates the sign of <paramref name="value" />, as shown in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>-1</term>
                         <description><paramref name="value" /> is less than zero.</description>
                     </item>
                     <item>
                         <term>0</term>
                         <description><paramref name="value" /> is equal to zero.</description>
                     </item>
                     <item>
                         <term>1</term>
                         <description><paramref name="value" /> is greater than zero.</description>
                     </item>
                 </list>
             </returns>
        </member>
        <member name="M:X10D.Math.Int32Extensions.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
                Wraps the current 32-bit signed integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.Int32Extensions.Wrap(System.Int32,System.Int32)">
            <summary>
                Wraps the current 32-bit signed integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.Int64Extensions">
            <summary>
                Extension methods for <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.Math.Int64Extensions.DigitalRoot(System.Int64)">
            <summary>
                Computes the digital root of this 64-bit integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.Int64Extensions.Factorial(System.Int64)">
            <summary>
                Returns the factorial of the current 64-bit signed integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
            <exception cref="T:System.ArithmeticException"><paramref name="value" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Math.Int64Extensions.GreatestCommonFactor(System.Int64,System.Int64)">
            <summary>
                Calculates the greatest common factor between the current 64-bit signed integer, and another 64-bit unsigned integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.Int64Extensions.IsEven(System.Int64)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.Int64Extensions.IsOdd(System.Int64)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.Int64Extensions.IsPrime(System.Int64)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.Int64Extensions.LowestCommonMultiple(System.Int64,System.Int64)">
            <summary>
                Calculates the lowest common multiple between the current 64-bit signed integer, and another 64-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.Int64Extensions.Mod(System.Int64,System.Int64)">
            <summary>
                Performs a modulo operation which supports a negative dividend.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The result of <c>dividend mod divisor</c>.</returns>
            <remarks>
                The <c>%</c> operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead
                remainder. This quirk inherently makes it difficult to use modulo in a negative context, as <c>x % y</c> where x is
                negative will return a negative value, akin to <c>-(x % y)</c>, even if precedence is forced. This method provides a
                modulo operation which supports negative dividends.
            </remarks>
            <author>ShreevatsaR, https://stackoverflow.com/a/1082938/1467293</author>
            <license>CC-BY-SA 2.5</license>
        </member>
        <member name="M:X10D.Math.Int64Extensions.MultiplicativePersistence(System.Int64)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.Int64Extensions.Sign(System.Int64)">
             <summary>
                 Returns an integer that indicates the sign of this 64-bit signed integer.
             </summary>
             <param name="value">A signed number.</param>
             <returns>
                 A number that indicates the sign of <paramref name="value" />, as shown in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>-1</term>
                         <description><paramref name="value" /> is less than zero.</description>
                     </item>
                     <item>
                         <term>0</term>
                         <description><paramref name="value" /> is equal to zero.</description>
                     </item>
                     <item>
                         <term>1</term>
                         <description><paramref name="value" /> is greater than zero.</description>
                     </item>
                 </list>
             </returns>
        </member>
        <member name="M:X10D.Math.Int64Extensions.Wrap(System.Int64,System.Int64,System.Int64)">
            <summary>
                Wraps the current 64-bit signed integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.Int64Extensions.Wrap(System.Int64,System.Int64)">
            <summary>
                Wraps the current 64-bit signed integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.MathUtility">
            <summary>
                Provides static helpers methods for mathematical functions not found in the .NET <see cref="T:System.Math" /> class.
            </summary>
        </member>
        <member name="M:X10D.Math.MathUtility.Bias(System.Single,System.Single)">
            <summary>
                Applies a simple bias function to value.
            </summary>
            <param name="value">The value to which the bias function will be applied.</param>
            <param name="bias">The bias value. Valid values range from 0-1.</param>
            <returns>The biased result.</returns>
            <remarks>
                If <paramref name="bias" /> is less than 0.5, <paramref name="value" /> will be shifted downward; otherwise, upward.
            </remarks>
        </member>
        <member name="M:X10D.Math.MathUtility.Bias(System.Double,System.Double)">
            <summary>
                Applies a simple bias function to value.
            </summary>
            <param name="value">The value to which the bias function will be applied.</param>
            <param name="bias">The bias value. Valid values range from 0-1.</param>
            <returns>The biased result.</returns>
            <remarks>
                If <paramref name="bias" /> is less than 0.5, <paramref name="value" /> will be shifted downward; otherwise, upward.
            </remarks>
        </member>
        <member name="M:X10D.Math.MathUtility.GammaToLinear(System.Single)">
            <summary>
                Converts a gamma-encoded value to a linear value using a gamma value of <c>2.2</c>.
            </summary>
            <param name="value">The gamma-encoded value to convert. Expected range is [0, 1].</param>
            <returns>The linear value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.GammaToLinear(System.Single,System.Single)">
            <summary>
                Converts a gamma-encoded value to a linear value using the specified gamma value.
            </summary>
            <param name="value">The gamma-encoded value to convert. Expected range is [0, 1].</param>
            <param name="gamma">The gamma value to use for decoding.</param>
            <returns>The linear value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.GammaToLinear(System.Double)">
            <summary>
                Converts a gamma-encoded value to a linear value using a gamma value of <c>2.2</c>.
            </summary>
            <param name="value">The gamma-encoded value to convert. Expected range is [0, 1].</param>
            <returns>The linear value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.GammaToLinear(System.Double,System.Double)">
            <summary>
                Converts a gamma-encoded value to a linear value using the specified gamma value.
            </summary>
            <param name="value">The gamma-encoded value to convert. Expected range is [0, 1].</param>
            <param name="gamma">The gamma value to use for decoding.</param>
            <returns>The linear value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
                Returns the linear interpolation inverse of a value, such that it determines where a value lies between two other
                values.
            </summary>
            <param name="alpha">The value whose lerp inverse is to be found.</param>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <returns>A value determined by <c>(alpha - start) / (end - start)</c>.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.InverseLerp(System.Double,System.Double,System.Double)">
            <summary>
                Returns the linear interpolation inverse of a value, such that it determines where a value lies between two other
                values.
            </summary>
            <param name="alpha">The value whose lerp inverse is to be found.</param>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <returns>A value determined by <c>(alpha - start) / (end - start)</c>.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.Lerp(System.Single,System.Single,System.Single)">
            <summary>
                Linearly interpolates from one value to a target using a specified alpha.
            </summary>
            <param name="value">The interpolation source.</param>
            <param name="target">The interpolation target.</param>
            <param name="alpha">The interpolation alpha.</param>
            <returns>
                The interpolation result as determined by <c>(1 - alpha) * value + alpha * target</c>.
            </returns>
        </member>
        <member name="M:X10D.Math.MathUtility.Lerp(System.Double,System.Double,System.Double)">
            <summary>
                Linearly interpolates from one value to a target using a specified alpha.
            </summary>
            <param name="value">The interpolation source.</param>
            <param name="target">The interpolation target.</param>
            <param name="alpha">The interpolation alpha.</param>
            <returns>
                The interpolation result as determined by <c>(1 - alpha) * value + alpha * target</c>.
            </returns>
        </member>
        <member name="M:X10D.Math.MathUtility.LinearToGamma(System.Single)">
            <summary>
                Converts a linear value to a gamma-encoded value using a gamma value of <c>2.2</c>.
            </summary>
            <param name="value">The linear value to convert. Expected range is [0, 1].</param>
            <returns>The gamma-encoded value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.LinearToGamma(System.Single,System.Single)">
            <summary>
                Converts a linear value to a gamma-encoded value using the specified gamma value.
            </summary>
            <param name="value">The linear value to convert. Expected range is [0, 1].</param>
            <param name="gamma">The gamma value to use for encoding.</param>
            <returns>The gamma-encoded value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.LinearToGamma(System.Double)">
            <summary>
                Converts a linear value to a gamma-encoded value using a gamma value of <c>2.2</c>.
            </summary>
            <param name="value">The linear value to convert. Expected range is [0, 1].</param>
            <returns>The gamma-encoded value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.LinearToGamma(System.Double,System.Double)">
            <summary>
                Converts a linear value to a gamma-encoded value using the specified gamma value.
            </summary>
            <param name="value">The linear value to convert. Expected range is [0, 1].</param>
            <param name="gamma">The gamma value to use for encoding.</param>
            <returns>The gamma-encoded value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.ScaleRange(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Converts a value from being a percentage of one range, to being the same percentage in a new range.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="oldMin">The old minimum value.</param>
            <param name="oldMax">The old maximum value.</param>
            <param name="newMin">The new minimum value.</param>
            <param name="newMax">The new maximum value.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.ScaleRange(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Converts a value from being a percentage of one range, to being the same percentage in a new range.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="oldMin">The old minimum value.</param>
            <param name="oldMax">The old maximum value.</param>
            <param name="newMin">The new minimum value.</param>
            <param name="newMax">The new maximum value.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
                Performs smooth Hermite interpolation from one value to a target using a specified alpha.
            </summary>
            <param name="value">The interpolation source.</param>
            <param name="target">The interpolation target.</param>
            <param name="alpha">The interpolation alpha.</param>
            <returns>The interpolation result.</returns>
        </member>
        <member name="M:X10D.Math.MathUtility.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
                Performs smooth Hermite interpolation from one value to a target using a specified alpha.
            </summary>
            <param name="value">The interpolation source.</param>
            <param name="target">The interpolation target.</param>
            <param name="alpha">The interpolation alpha.</param>
            <returns>The interpolation result.</returns>
        </member>
        <member name="T:X10D.Math.SByteExtensions">
            <summary>
                Math-related extension methods for <see cref="T:System.SByte" />.
            </summary>
        </member>
        <member name="M:X10D.Math.SByteExtensions.DigitalRoot(System.SByte)">
            <summary>
                Computes the digital root of this 32-bit integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.SByteExtensions.Factorial(System.SByte)">
            <summary>
                Returns the factorial of the current 8-bit signed integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
            <exception cref="T:System.ArithmeticException"><paramref name="value" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Math.SByteExtensions.GreatestCommonFactor(System.SByte,System.SByte)">
            <summary>
                Calculates the greatest common factor between the current 8-bit signed integer, and another 8-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.SByteExtensions.IsEven(System.SByte)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.SByteExtensions.IsOdd(System.SByte)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.SByteExtensions.IsPrime(System.SByte)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.SByteExtensions.LowestCommonMultiple(System.SByte,System.SByte)">
            <summary>
                Calculates the lowest common multiple between the current 8-bit signed integer, and another 8-bit signed integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.SByteExtensions.Mod(System.SByte,System.SByte)">
            <summary>
                Performs a modulo operation which supports a negative dividend.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The result of <c>dividend mod divisor</c>.</returns>
            <remarks>
                The <c>%</c> operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead
                remainder. This quirk inherently makes it difficult to use modulo in a negative context, as <c>x % y</c> where x is
                negative will return a negative value, akin to <c>-(x % y)</c>, even if precedence is forced. This method provides a
                modulo operation which supports negative dividends.
            </remarks>
            <author>ShreevatsaR, https://stackoverflow.com/a/1082938/1467293</author>
            <license>CC-BY-SA 2.5</license>
        </member>
        <member name="M:X10D.Math.SByteExtensions.MultiplicativePersistence(System.SByte)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.SByteExtensions.Sign(System.SByte)">
             <summary>
                 Returns an integer that indicates the sign of this 8-bit signed integer.
             </summary>
             <param name="value">A signed number.</param>
             <returns>
                 A number that indicates the sign of <paramref name="value" />, as shown in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>-1</term>
                         <description><paramref name="value" /> is less than zero.</description>
                     </item>
                     <item>
                         <term>0</term>
                         <description><paramref name="value" /> is equal to zero.</description>
                     </item>
                     <item>
                         <term>1</term>
                         <description><paramref name="value" /> is greater than zero.</description>
                     </item>
                 </list>
             </returns>
        </member>
        <member name="M:X10D.Math.SByteExtensions.Wrap(System.SByte,System.SByte,System.SByte)">
            <summary>
                Wraps the current 8-bit signed integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.SByteExtensions.Wrap(System.SByte,System.SByte)">
            <summary>
                Wraps the current 8-bit signed integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.SingleExtensions">
            <summary>
                Extension methods for <see cref="T:System.Single" />.
            </summary>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Acos(System.Single)">
            <summary>
                Returns the arccosine of the specified value.
            </summary>
            <param name="value">
                The value representing a cosine, which must be greater than or equal to -1, but less than or equal to 1.
            </param>
            <returns>
                The arccosine of <paramref name="value" />, θ, measured in radians; such that 0 ≤ θ ≤ π. If <paramref name="value" />
                is equal to <see cref="F:System.Single.NaN" />, less than -1, or greater than 1, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Acosh(System.Single)">
            <summary>
                Returns the hyperbolic arccosine of the specified value.
            </summary>
            <param name="value">
                The value representing a hyperbolic cosine, which must be greater than or equal to 1, but less than or equal to
                <see cref="F:System.Single.PositiveInfinity" />.
            </param>
            <returns>
                The hyperbolic arccosine of <paramref name="value" />, θ, measured in radians; such that 0 ≤ θ ≤ ∞. If
                <paramref name="value" /> is less than 1 or equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Asin(System.Single)">
            <summary>
                Returns the arcsine of the specified value.
            </summary>
            <param name="value">
                The value representing a sine, which must be greater than or equal to -1, but less than or equal to 1.
            </param>
            <returns>
                The arccosine of <paramref name="value" />, θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If
                <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />, less than -1, or greater than 1,
                <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Asinh(System.Single)">
            <summary>
                Returns the hyperbolic arcsine of the specified value.
            </summary>
            <param name="value">
                The value representing a hyperbolic sine, which must be greater than or equal to 1, but less than or equal to
                <see cref="F:System.Single.PositiveInfinity" />.
            </param>
            <returns>
                The hyperbolic arccosine of <paramref name="value" />, measured in radians. If <paramref name="value" /> is equal to
                <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Atan(System.Single)">
            <summary>
                Returns the arctangent of the specified value.
            </summary>
            <param name="value">
                The value representing a tangent, which must be greater than or equal to -1, but less than or equal to 1.
            </param>
            <returns>
                The arctangent of <paramref name="value" />, θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If
                <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Atanh(System.Single)">
            <summary>
                Returns the hyperbolic arctangent of the specified value.
            </summary>
            <param name="value">
                The value representing a hyperbolic tangent, which must be greater than or equal to 1, but less than or equal to
                <see cref="F:System.Single.PositiveInfinity" />.
            </param>
            <returns>
                The hyperbolic arctangent of <paramref name="value" />, θ, measured in radians; such that -∞ &lt; θ &lt; -1, or 1 &lt;
                θ &lt; ∞. If <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />, less than -1, or greater than 1,
                <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.ComplexSqrt(System.Single)">
            <summary>
                Returns the complex square root of this single-precision floating-point number.
            </summary>
            <param name="value">The number whose square root is to be found.</param>
            <returns>The square root of <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Cos(System.Single)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The cosine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />,
                <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, this method returns
                <see cref="F:System.Single.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Cosh(System.Single)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal to
                <see cref="F:System.Single.NegativeInfinity" /> or <see cref="F:System.Single.PositiveInfinity" />,
                <see cref="F:System.Single.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to
                <see cref="F:System.Single.NaN" />, <see cref="F:System.Double.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.DegreesToRadians(System.Single)">
            <summary>
                Converts the current angle in degrees to its equivalent represented in radians.
            </summary>
            <param name="value">The angle in degrees to convert.</param>
            <returns>The result of π * <paramref name="value" /> / 180.</returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.IsEven(System.Single)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.IsOdd(System.Single)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.RadiansToDegrees(System.Single)">
            <summary>
                Converts the current angle in radians to its equivalent represented in degrees.
            </summary>
            <param name="value">The angle in radians to convert.</param>
            <returns>The result of π * <paramref name="value" /> / 180.</returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Round(System.Single)">
            <summary>
                Rounds the current value to the nearest whole number.
            </summary>
            <param name="value">The value to round.</param>
            <returns><paramref name="value" /> rounded to the nearest whole number.</returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Round(System.Single,System.Single)">
            <summary>
                Rounds the current value to the nearest multiple of a specified number.
            </summary>
            <param name="value">The value to round.</param>
            <param name="nearest">The nearest multiple to which <paramref name="value" /> should be rounded.</param>
            <returns><paramref name="value" /> rounded to the nearest multiple of <paramref name="nearest" />.</returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Saturate(System.Single)">
            <summary>
                Saturates this single-precision floating-point number.
            </summary>
            <param name="value">The value to saturate.</param>
            <returns>The saturated value.</returns>
            <remarks>This method clamps <paramref name="value" /> between 0 and 1.</remarks>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Sign(System.Single)">
             <summary>
                 Returns an integer that indicates the sign of this single-precision floating-point number.
             </summary>
             <param name="value">A signed number.</param>
             <returns>
                 A number that indicates the sign of <paramref name="value" />, as shown in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>-1</term>
                         <description><paramref name="value" /> is less than zero.</description>
                     </item>
                     <item>
                         <term>0</term>
                         <description><paramref name="value" /> is equal to zero.</description>
                     </item>
                     <item>
                         <term>1</term>
                         <description><paramref name="value" /> is greater than zero.</description>
                     </item>
                 </list>
             </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Sqrt(System.Single)">
             <summary>
                 Returns the square root of this single-precision floating-point number.
             </summary>
             <param name="value">The number whose square root is to be found.</param>
             <returns>
                 One of the values in the following table.
            
                 <list type="table">
                     <listheader>
                         <term>Return value</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                        <term>The positive square root of <paramref name="value" />.</term>
                        <description><paramref name="value" /> is greater than or equal to 0.</description>
                     </item>
                     <item>
                         <term><see cref="F:System.Single.NaN" /></term>
                         <description><paramref name="value" /> is equal to <see cref="F:System.Single.NaN" /> or is negative.</description>
                     </item>
                     <item>
                         <term><see cref="F:System.Single.PositiveInfinity" /></term>
                         <description><paramref name="value" /> is equal to <see cref="F:System.Single.PositiveInfinity" />.</description>
                     </item>
                 </list>
             </returns>
             <author>SLenik https://stackoverflow.com/a/6755197/1467293</author>
             <license>CC BY-SA 3.0</license>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Sin(System.Single)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />,
                <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns
                <see cref="F:System.Double.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Sinh(System.Single)">
            <summary>
                Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The hyperbolic sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />,
                <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, this method returns
                <see cref="F:System.Single.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Tan(System.Single)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The tangent of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />,
                <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, this method returns
                <see cref="F:System.Single.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Tanh(System.Single)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">The angle, measured in radians.</param>
            <returns>
                The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to
                <see cref="F:System.Single.NegativeInfinity" />, this method returns -1. If <paramref name="value" /> is equal to
                <see cref="F:System.Single.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to
                <see cref="F:System.Single.NaN" />, this method returns <see cref="F:System.Single.NaN" />.
            </returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Wrap(System.Single,System.Single,System.Single)">
            <summary>
                Wraps the current single-precision floating-point number between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.SingleExtensions.Wrap(System.Single,System.Single)">
            <summary>
                Wraps the current single-precision floating-point number between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.UInt16Extensions">
            <summary>
                Extension methods for <see cref="T:System.UInt16" />.
            </summary>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.DigitalRoot(System.UInt16)">
            <summary>
                Computes the digital root of the current 16-bit unsigned integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.Factorial(System.UInt16)">
            <summary>
                Returns the factorial of the current 16-bit unsigned integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.GreatestCommonFactor(System.UInt16,System.UInt16)">
            <summary>
                Calculates the greatest common factor between the current 16-bit unsigned integer, and another 16-bit unsigned
                integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.IsEven(System.UInt16)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.IsPrime(System.UInt16)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.IsOdd(System.UInt16)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.LowestCommonMultiple(System.UInt16,System.UInt16)">
            <summary>
                Calculates the lowest common multiple between the current 16-bit unsigned integer, and another 16-bit unsigned
                integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.MultiplicativePersistence(System.UInt16)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.Wrap(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
                Wraps the current 16-bit unsigned integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.UInt16Extensions.Wrap(System.UInt16,System.UInt16)">
            <summary>
                Wraps the current 16-bit unsigned integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.UInt32Extensions">
            <summary>
                Extension methods for <see cref="T:System.UInt32" />.
            </summary>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.DigitalRoot(System.UInt32)">
            <summary>
                Computes the digital root of the current 32-bit unsigned integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.Factorial(System.UInt32)">
            <summary>
                Returns the factorial of the current 32-bit unsigned integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.GreatestCommonFactor(System.UInt32,System.UInt32)">
            <summary>
                Calculates the greatest common factor between the current 32-bit unsigned integer, and another 32-bit unsigned
                integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.IsEven(System.UInt32)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.IsPrime(System.UInt32)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.IsOdd(System.UInt32)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.LowestCommonMultiple(System.UInt32,System.UInt32)">
            <summary>
                Calculates the lowest common multiple between the current 32-bit unsigned integer, and another 32-bit unsigned
                integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.MultiplicativePersistence(System.UInt32)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.Wrap(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Wraps the current 32-bit unsigned integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.UInt32Extensions.Wrap(System.UInt32,System.UInt32)">
            <summary>
                Wraps the current 32-bit unsigned integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Math.UInt64Extensions">
            <summary>
                Extension methods for <see cref="T:System.UInt64" />.
            </summary>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.DigitalRoot(System.UInt64)">
            <summary>
                Computes the digital root of the current 64-bit unsigned integer.
            </summary>
            <param name="value">The value whose digital root to compute.</param>
            <returns>The digital root of <paramref name="value" />.</returns>
            <remarks>
                <para>The digital root is defined as the recursive sum of digits until that result is a single digit.</para>
                <para>For example, the digital root of 239 is 5: <c>2 + 3 + 9 = 14</c>, then <c>1 + 4 = 5</c>.</para>
            </remarks>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.Factorial(System.UInt64)">
            <summary>
                Returns the factorial of the current 64-bit unsigned integer.
            </summary>
            <param name="value">The value whose factorial to compute.</param>
            <returns>The factorial of <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.GreatestCommonFactor(System.UInt64,System.UInt64)">
            <summary>
                Calculates the greatest common factor between the current 64-bit unsigned integer, and another 64-bit unsigned
                integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The greatest common factor between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.IsEven(System.UInt64)">
            <summary>
                Returns a value indicating whether the current value is evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.IsPrime(System.UInt64)">
            <summary>
                Returns a value indicating whether the current value is a prime number.
            </summary>
            <param name="value">The value whose primality to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is prime; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.IsOdd(System.UInt64)">
            <summary>
                Returns a value indicating whether the current value is not evenly divisible by 2.
            </summary>
            <param name="value">The value whose parity to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is not evenly divisible by 2, or <see langword="false" />
                otherwise.
            </returns>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.LowestCommonMultiple(System.UInt64,System.UInt64)">
            <summary>
                Calculates the lowest common multiple between the current 64-bit unsigned integer, and another 64-bit unsigned
                integer.
            </summary>
            <param name="value">The first value.</param>
            <param name="other">The second value.</param>
            <returns>The lowest common multiple between <paramref name="value" /> and <paramref name="other" />.</returns>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.MultiplicativePersistence(System.UInt64)">
            <summary>
                Returns the multiplicative persistence of a specified value.
            </summary>
            <param name="value">The value whose multiplicative persistence to calculate.</param>
            <returns>The multiplicative persistence.</returns>
            <remarks>
                Multiplicative persistence is defined as the recursive digital product until that product is a single digit.
            </remarks>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.Wrap(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
                Wraps the current 64-bit unsigned integer between a low and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="low">The inclusive lower bound.</param>
            <param name="high">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:X10D.Math.UInt64Extensions.Wrap(System.UInt64,System.UInt64)">
            <summary>
                Wraps the current 64-bit unsigned integer between 0 and a high value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="length">The exclusive upper bound.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="T:X10D.Net.EndPointExtensions">
            <summary>
                Extension methods for <see cref="T:System.Net.EndPoint" /> and derived types.
            </summary>
        </member>
        <member name="M:X10D.Net.EndPointExtensions.GetHost(System.Net.EndPoint)">
            <summary>
                Returns the hostname for the current <see cref="T:System.Net.EndPoint" />.
            </summary>
            <param name="endPoint">The endpoint whose hostname to get.</param>
            <returns>
                <para><see cref="P:System.Net.IPEndPoint.Address" /> if <paramref name="endPoint" /> is <see cref="T:System.Net.IPEndPoint" />.</para>
                -or-
                <para><see cref="P:System.Net.DnsEndPoint.Host" /> if <paramref name="endPoint" /> is <see cref="T:System.Net.DnsEndPoint" />.</para>
                -or-
                <para><see cref="F:System.String.Empty" /> otherwise.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="endPoint" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Net.EndPointExtensions.GetPort(System.Net.EndPoint)">
            <summary>
                Returns the port number for the current <see cref="T:System.Net.EndPoint" />.
            </summary>
            <param name="endPoint">The endpoint whose port number to get.</param>
            <returns>
                <para><see cref="P:System.Net.IPEndPoint.Port" /> if <paramref name="endPoint" /> is <see cref="T:System.Net.IPEndPoint" />.</para>
                -or-
                <para><see cref="P:System.Net.DnsEndPoint.Port" /> if <paramref name="endPoint" /> is <see cref="T:System.Net.DnsEndPoint" />.</para>
                -or-
                <para><c>0</c> otherwise.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="endPoint" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Net.Int16Extensions">
            <summary>
                Network-related extension methods for <see cref="T:System.Int16" />.
            </summary>
        </member>
        <member name="M:X10D.Net.Int16Extensions.HostToNetworkOrder(System.Int16)">
            <summary>
                Converts a 16-bit signed integer value from host byte order to network byte order.
            </summary>
            <param name="value">The value to convert, expressed in host byte order.</param>
            <returns>An integer value, expressed in network byte order.</returns>
        </member>
        <member name="M:X10D.Net.Int16Extensions.NetworkToHostOrder(System.Int16)">
            <summary>
                Converts a 16-bit signed integer value from network byte order to host byte order.
            </summary>
            <param name="value">The value to convert, expressed in network byte order.</param>
            <returns>An integer value, expressed in host byte order.</returns>
        </member>
        <member name="T:X10D.Net.Int32Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:X10D.Net.Int32Extensions.HostToNetworkOrder(System.Int32)">
            <summary>
                Converts a 32-bit signed integer value from host byte order to network byte order.
            </summary>
            <param name="value">The value to convert, expressed in host byte order.</param>
            <returns>An integer value, expressed in network byte order.</returns>
        </member>
        <member name="M:X10D.Net.Int32Extensions.NetworkToHostOrder(System.Int32)">
            <summary>
                Converts a 32-bit signed integer value from network byte order to host byte order.
            </summary>
            <param name="value">The value to convert, expressed in network byte order.</param>
            <returns>An integer value, expressed in host byte order.</returns>
        </member>
        <member name="T:X10D.Net.Int64Extensions">
            <summary>
                IO-related extension methods for <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.Net.Int64Extensions.HostToNetworkOrder(System.Int64)">
            <summary>
                Converts a 64-bit signed integer value from host byte order to network byte order.
            </summary>
            <param name="value">The value to convert, expressed in host byte order.</param>
            <returns>An integer value, expressed in network byte order.</returns>
        </member>
        <member name="M:X10D.Net.Int64Extensions.NetworkToHostOrder(System.Int64)">
            <summary>
                Converts a 64-bit signed integer value from network byte order to host byte order.
            </summary>
            <param name="value">The value to convert, expressed in network byte order.</param>
            <returns>An integer value, expressed in host byte order.</returns>
        </member>
        <member name="T:X10D.Net.IPAddressExtensions">
            <summary>
                Extension methods for <see cref="T:System.Net.IPAddress" />.
            </summary>
        </member>
        <member name="M:X10D.Net.IPAddressExtensions.IsIPv4(System.Net.IPAddress)">
            <summary>
                Returns a value indicating whether the specified IP address is a valid IPv4 address.
            </summary>
            <param name="address">The IP address to check.</param>
            <returns>
                <see langword="true" /> if the specified IP address is a valid IPv4 address; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="address" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Net.IPAddressExtensions.IsIPv6(System.Net.IPAddress)">
            <summary>
                Returns a value indicating whether the specified IP address is a valid IPv6 address.
            </summary>
            <param name="address">The IP address to check.</param>
            <returns>
                <see langword="true" /> if the specified IP address is a valid IPv6 address; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="address" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Numerics.ByteExtensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.ByteExtensions.PopCount(System.Byte)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.ByteExtensions.RotateLeft(System.Byte,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.ByteExtensions.RotateRight(System.Byte,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.ByteExtensions.RoundUpToPowerOf2(System.Byte)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.Int16Extensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.Int16" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.Int16Extensions.PopCount(System.Int16)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.Int16Extensions.RotateLeft(System.Int16,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.Int16Extensions.RotateRight(System.Int16,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.Int16Extensions.RoundUpToPowerOf2(System.Int16)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.Int32Extensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.Int32Extensions.PopCount(System.Int32)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.Int32Extensions.RotateLeft(System.Int32,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.Int32Extensions.RotateRight(System.Int32,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.Int32Extensions.RoundUpToPowerOf2(System.Int32)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.Int64Extensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.Int64Extensions.PopCount(System.Int64)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.Int64Extensions.RotateLeft(System.Int64,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.Int64Extensions.RotateRight(System.Int64,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.Int64Extensions.RoundUpToPowerOf2(System.Int64)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.QuaternionExtensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.Numerics.Quaternion" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.QuaternionExtensions.Multiply(System.Numerics.Quaternion@,System.Numerics.Vector3@)">
            <summary>
                Rotates the specified point with the specified rotation.
            </summary>
            <param name="rotation">The rotation.</param>
            <param name="point">The point.</param>
            <returns>The rotated point.</returns>
        </member>
        <member name="M:X10D.Numerics.QuaternionExtensions.ToAxisAngle(System.Numerics.Quaternion@)">
            <summary>
                Converts this quaternion to an axis/angle pair.
            </summary>
            <param name="value">The quaternion to convert.</param>
            <returns>A tuple containing the converted axis, and the angle in radians.</returns>
        </member>
        <member name="M:X10D.Numerics.QuaternionExtensions.ToVector3(System.Numerics.Quaternion@)">
            <summary>
                Converts this quaternion to a <see cref="T:System.Numerics.Vector3" /> containing an Euler representation of the rotation.
            </summary>
            <param name="value">The quaternion to convert.</param>
            <returns>The Euler representation of <paramref name="value" />, in radians.</returns>
        </member>
        <member name="T:X10D.Numerics.RandomExtensions">
            <summary>
                Extension methods for <see cref="T:System.Random" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.RandomExtensions.NextRotation(System.Random)">
            <summary>
                Returns a randomly generated rotation as represented by a <see cref="T:System.Numerics.Quaternion" />.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>
                A <see cref="T:System.Numerics.Quaternion" /> constructed from 3 random single-precision floating point numbers representing the
                yaw, pitch, and roll.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Numerics.RandomExtensions.NextRotationUniform(System.Random)">
            <summary>
                Returns a randomly generated rotation with uniform distribution.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance.</param>
            <returns>A <see cref="T:System.Numerics.Quaternion" /> constructed with uniform distribution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="random" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Numerics.RandomExtensions.NextUnitVector2(System.Random)">
            <summary>
                Returns a <see cref="T:System.Numerics.Vector2" /> with magnitude 1 whose components indicate a random point on the unit circle.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance</param>
            <returns>
                A <see cref="T:System.Numerics.Vector2" /> whose <see cref="M:System.Numerics.Vector2.Length" /> returns 1, and whose components indicate a random
                point on the unit circle.
            </returns>
        </member>
        <member name="M:X10D.Numerics.RandomExtensions.NextUnitVector3(System.Random)">
            <summary>
                Returns a <see cref="T:System.Numerics.Vector3" /> with magnitude 1 whose components indicate a random point on the unit sphere.
            </summary>
            <param name="random">The <see cref="T:System.Random" /> instance</param>
            <returns>
                A <see cref="T:System.Numerics.Vector3" /> whose <see cref="M:System.Numerics.Vector3.Length" /> returns 1, and whose components indicate a random
                point on the unit sphere.
            </returns>
        </member>
        <member name="T:X10D.Numerics.SByteExtensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.SByte" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.SByteExtensions.PopCount(System.SByte)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.SByteExtensions.RotateLeft(System.SByte,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.SByteExtensions.RotateRight(System.SByte,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.SByteExtensions.RoundUpToPowerOf2(System.SByte)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.UInt16Extensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.UInt16" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.UInt16Extensions.PopCount(System.UInt16)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.UInt16Extensions.RotateLeft(System.UInt16,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.UInt16Extensions.RotateRight(System.UInt16,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.UInt16Extensions.RoundUpToPowerOf2(System.UInt16)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.UInt32Extensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.UInt32" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.UInt32Extensions.PopCount(System.UInt32)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.UInt32Extensions.RotateLeft(System.UInt32,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.UInt32Extensions.RotateRight(System.UInt32,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.UInt32Extensions.RoundUpToPowerOf2(System.UInt32)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.UInt64Extensions">
            <summary>
                Numeric-related extension methods for <see cref="T:System.UInt64" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.UInt64Extensions.PopCount(System.UInt64)">
            <summary>
                Returns the population count (number of bits set) of a mask.
            </summary>
            <param name="value">The mask.</param>
            <returns>The population count of <paramref name="value" />.</returns>
            <remarks>
                This method is similar in behavior to the x86 instruction
                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.popcnt?view=net-6.0">POPCNT</a>
            </remarks>
        </member>
        <member name="M:X10D.Numerics.UInt64Extensions.RotateLeft(System.UInt64,System.Int32)">
            <summary>
                Rotates the current value left by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.UInt64Extensions.RotateRight(System.UInt64,System.Int32)">
            <summary>
                Rotates the current value right by the specified number of bits.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="count">
                The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64.
            </param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:X10D.Numerics.UInt64Extensions.RoundUpToPowerOf2(System.UInt64)">
            <summary>
                Rounds the current value up to a power of two.
            </summary>
            <param name="value">The value to round.</param>
            <returns>
                The smallest power of two that's greater than or equal to <paramref name="value" />, or 0 if <paramref name="value" />
                is 0 or the result overflows.
            </returns>
        </member>
        <member name="T:X10D.Numerics.Vector2Extensions">
            <summary>
                Numeric-extensions for <see cref="T:System.Numerics.Vector2" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.Deconstruct(System.Numerics.Vector2,System.Single@,System.Single@)">
            <summary>
                Deconstructs the current <see cref="T:System.Numerics.Vector2" /> into its components.
            </summary>
            <param name="vector">The vector to deconstruct.</param>
            <param name="x">The X component value.</param>
            <param name="y">The Y component value.</param>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.IsOnLine(System.Numerics.Vector2,X10D.Drawing.LineF)">
            <summary>
                Determines if the current <see cref="T:System.Numerics.Vector2" /> lies on the specified line.
            </summary>
            <param name="point">The point to check.</param>
            <param name="line">The line on which the point may lie.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="line" />; otherwise
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.IsOnLine(System.Numerics.Vector2,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
                Determines if the current <see cref="T:System.Numerics.Vector2" /> lies on the specified line.
            </summary>
            <param name="point">The point to check.</param>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="start" /> and
                <paramref name="end" />; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.IsOnLine(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Determines if the current <see cref="T:System.Numerics.Vector2" /> lies on the specified line.
            </summary>
            <param name="point">The point to check.</param>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <returns>
                <see langword="true" /> if <paramref name="point" /> lies on the line defined by <paramref name="start" /> and
                <paramref name="end" />; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.Round(System.Numerics.Vector2)">
            <summary>
                Rounds the components in the current <see cref="T:System.Numerics.Vector2" /> to the nearest integer.
            </summary>
            <param name="vector">The vector whose components to round.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.Round(System.Numerics.Vector2,System.Single)">
            <summary>
                Rounds the components in the current <see cref="T:System.Numerics.Vector2" /> to the nearest multiple of a specified number.
            </summary>
            <param name="vector">The vector whose components to round.</param>
            <param name="nearest">The nearest multiple to which the components should be rounded.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.ToPointF(System.Numerics.Vector2)">
            <summary>
                Converts the current <see cref="T:System.Numerics.Vector2" /> to a <see cref="T:System.Drawing.PointF" />.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>The resulting <see cref="T:System.Drawing.PointF" />.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.ToSizeF(System.Numerics.Vector2)">
            <summary>
                Converts the current <see cref="T:System.Numerics.Vector2" /> to a <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>The resulting <see cref="T:System.Drawing.SizeF" />.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.WithX(System.Numerics.Vector2,System.Single)">
            <summary>
                Returns a vector whose Y component is the same as the specified vector, and whose X component is a new value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="x">The new X component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector2" /> whose <see cref="F:System.Numerics.Vector2.Y" /> components is the same as that of
                <paramref name="vector" />, and whose <see cref="F:System.Numerics.Vector2.X" /> component is <paramref name="x" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector2Extensions.WithY(System.Numerics.Vector2,System.Single)">
            <summary>
                Returns a vector whose X component is the same as the specified vector, and whose Y component is a new value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="y">The new Y component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector2" /> whose <see cref="F:System.Numerics.Vector2.X" /> components is the same as that of
                <paramref name="vector" />, and whose <see cref="F:System.Numerics.Vector2.Y" /> component is <paramref name="y" />.
            </returns>
        </member>
        <member name="T:X10D.Numerics.Vector3Extensions">
            <summary>
                Numeric-extensions for <see cref="T:System.Numerics.Vector3" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.Vector3Extensions.Deconstruct(System.Numerics.Vector3,System.Single@,System.Single@,System.Single@)">
            <summary>
                Deconstructs the current <see cref="T:System.Numerics.Vector3" /> into its components.
            </summary>
            <param name="vector">The vector to deconstruct.</param>
            <param name="x">The X component value.</param>
            <param name="y">The Y component value.</param>
            <param name="z">The Z component value.</param>
        </member>
        <member name="M:X10D.Numerics.Vector3Extensions.Round(System.Numerics.Vector3)">
            <summary>
                Rounds the components in the current <see cref="T:System.Numerics.Vector3" /> to the nearest integer.
            </summary>
            <param name="vector">The vector whose components to round.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector3Extensions.Round(System.Numerics.Vector3,System.Single)">
            <summary>
                Rounds the components in the current <see cref="T:System.Numerics.Vector3" /> to the nearest multiple of a specified number.
            </summary>
            <param name="vector">The vector whose components to round.</param>
            <param name="nearest">The nearest multiple to which the components should be rounded.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector3Extensions.WithX(System.Numerics.Vector3,System.Single)">
            <summary>
                Returns a vector whose Y and Z components are the same as the specified vector, and whose X component is a new value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="x">The new X component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector3" /> whose <see cref="F:System.Numerics.Vector3.Y" /> and <see cref="F:System.Numerics.Vector3.Z" /> components are
                the same as that of <paramref name="vector" />, and whose <see cref="F:System.Numerics.Vector3.Y" /> component is <paramref name="x" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector3Extensions.WithY(System.Numerics.Vector3,System.Single)">
            <summary>
                Returns a vector whose X and Z components are the same as the specified vector, and whose Y component is a new value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="y">The new Y component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector3" /> whose <see cref="F:System.Numerics.Vector3.X" /> and <see cref="F:System.Numerics.Vector3.Z" /> components are
                the same as that of <paramref name="vector" />, and whose <see cref="F:System.Numerics.Vector3.Y" /> component is <paramref name="y" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector3Extensions.WithZ(System.Numerics.Vector3,System.Single)">
            <summary>
                Returns a vector whose X and Y components are the same as the specified vector, and whose Z component is a new value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="z">The new Z component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector3" /> whose <see cref="F:System.Numerics.Vector3.X" /> and <see cref="F:System.Numerics.Vector3.Y" /> components are
                the same as that of <paramref name="vector" />, and whose <see cref="F:System.Numerics.Vector3.Z" /> component is <paramref name="z" />.
            </returns>
        </member>
        <member name="T:X10D.Numerics.Vector4Extensions">
            <summary>
                Numeric-extensions for <see cref="T:System.Numerics.Vector4" />.
            </summary>
        </member>
        <member name="M:X10D.Numerics.Vector4Extensions.Deconstruct(System.Numerics.Vector4,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
                Deconstructs the current <see cref="T:System.Numerics.Vector4" /> into its components.
            </summary>
            <param name="vector">The vector to deconstruct.</param>
            <param name="x">The X component value.</param>
            <param name="y">The Y component value.</param>
            <param name="z">The Z component value.</param>
            <param name="w">The W component value.</param>
        </member>
        <member name="M:X10D.Numerics.Vector4Extensions.Round(System.Numerics.Vector4)">
            <summary>
                Rounds the components in the current <see cref="T:System.Numerics.Vector4" /> to the nearest integer.
            </summary>
            <param name="vector">The vector whose components to round.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector4Extensions.Round(System.Numerics.Vector4,System.Single)">
            <summary>
                Rounds the components in the current <see cref="T:System.Numerics.Vector4" /> to the nearest multiple of a specified number.
            </summary>
            <param name="vector">The vector whose components to round.</param>
            <param name="nearest">The nearest multiple to which the components should be rounded.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:X10D.Numerics.Vector4Extensions.WithX(System.Numerics.Vector4,System.Single)">
            <summary>
                Returns a vector whose Y, Z, and W components are the same as the specified vector, and whose X component is a new
                value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="x">The new X component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector4" /> whose <see cref="F:System.Numerics.Vector4.Y" />, <see cref="F:System.Numerics.Vector4.Z" />, and
                <see cref="F:System.Numerics.Vector4.W" /> components are the same as that of <paramref name="vector" />, and whose
                <see cref="F:System.Numerics.Vector4.X" /> component is <paramref name="x" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector4Extensions.WithY(System.Numerics.Vector4,System.Single)">
            <summary>
                Returns a vector whose X, Z, and W components are the same as the specified vector, and whose Y component is a new
                value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="y">The new Y component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector4" /> whose <see cref="F:System.Numerics.Vector4.X" />, <see cref="F:System.Numerics.Vector4.Z" />, and
                <see cref="F:System.Numerics.Vector4.W" /> components are the same as that of <paramref name="vector" />, and whose
                <see cref="F:System.Numerics.Vector4.Y" /> component is <paramref name="y" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector4Extensions.WithZ(System.Numerics.Vector4,System.Single)">
            <summary>
                Returns a vector whose X, Y, and W components are the same as the specified vector, and whose Z component is a new
                value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="z">The new Z component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector4" /> whose <see cref="F:System.Numerics.Vector4.X" />, <see cref="F:System.Numerics.Vector4.Y" />, and
                <see cref="F:System.Numerics.Vector4.W" /> components are the same as that of <paramref name="vector" />, and whose
                <see cref="F:System.Numerics.Vector4.Z" /> component is <paramref name="z" />.
            </returns>
        </member>
        <member name="M:X10D.Numerics.Vector4Extensions.WithW(System.Numerics.Vector4,System.Single)">
            <summary>
                Returns a vector whose X, Y, and Z components are the same as the specified vector, and whose W component is a new
                value.
            </summary>
            <param name="vector">The vector to copy.</param>
            <param name="w">The new W component value.</param>
            <returns>
                A new instance of <see cref="T:System.Numerics.Vector4" /> whose <see cref="F:System.Numerics.Vector4.X" />, <see cref="F:System.Numerics.Vector4.Y" />, and
                <see cref="F:System.Numerics.Vector4.Z" /> components are the same as that of <paramref name="vector" />, and whose
                <see cref="F:System.Numerics.Vector4.W" /> component is <paramref name="w" />.
            </returns>
        </member>
        <member name="T:X10D.Reflection.MemberInfoExtensions">
            <summary>
                Extension methods for <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
        </member>
        <member name="M:X10D.Reflection.MemberInfoExtensions.HasCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
                Returns a value indicating whether or not the current member has been decorated with a specified attribute.
            </summary>
            <param name="member">The member attributes to check.</param>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>
                <see langword="true" /> if the current member has been decorated with a specified attribute, or
                <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Reflection.MemberInfoExtensions.HasCustomAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
                Returns a value indicating whether or not the current member has been decorated with a specified attribute.
            </summary>
            <param name="member">The member attributes to check.</param>
            <param name="attribute">The attribute type.</param>
            <returns>
                <see langword="true" /> if the current member has been decorated with a specified attribute, or
                <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Reflection.MemberInfoExtensions.SelectFromCustomAttribute``2(System.Reflection.MemberInfo,System.Func{``0,``1})">
            <summary>
                Retrieves a custom attribute that is decorated by the current member, and projects it into to a new form.
            </summary>
            <typeparam name="TAttribute">The attribute type.</typeparam>
            <typeparam name="TReturn">The return type of the <paramref name="selector" /> delegate.</typeparam>
            <param name="member">The member.</param>
            <param name="selector">A transform function to apply to the attribute.</param>
            <returns>
                An instance of <typeparamref name="TReturn" /> as provided from <paramref name="selector" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="member" /> is <see langword="null" />
                -or-
                <paramref name="selector" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:X10D.Reflection.MemberInfoExtensions.SelectFromCustomAttribute``2(System.Reflection.MemberInfo,System.Func{``0,``1},``1)">
            <summary>
                Retrieves a custom attribute that is decorated by the current member, and projects it into to a new form.
            </summary>
            <typeparam name="TAttribute">The attribute type.</typeparam>
            <typeparam name="TReturn">The return type of the <paramref name="selector" /> delegate.</typeparam>
            <param name="member">The member.</param>
            <param name="selector">A transform function to apply to the attribute.</param>
            <param name="defaultValue">The default value to return when the specified attribute is not found.</param>
            <returns>
                An instance of <typeparamref name="TReturn" /> as provided from <paramref name="selector" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="member" /> is <see langword="null" />
                -or-
                <paramref name="selector" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:X10D.Reflection.TypeExtensions">
            <summary>
                Extension methods for <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:X10D.Reflection.TypeExtensions.Implements``1(System.Type)">
            <summary>
                Returns a value indicating whether the current type implements a specified interface.
            </summary>
            <param name="value">The type whose interface list to check.</param>
            <typeparam name="T">The interface type.</typeparam>
            <returns><see langword="true" /> if the current exists on the type; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Reflection.TypeExtensions.Implements(System.Type,System.Type)">
            <summary>
                Returns a value indicating whether the current type implements a specified interface.
            </summary>
            <param name="value">The type whose interface list to check.</param>
            <param name="interfaceType">The interface type.</param>
            <returns><see langword="true" /> if the current exists on the type; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="value" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="interfaceType" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:X10D.Reflection.TypeExtensions.Inherits``1(System.Type)">
            <summary>
                Returns a value indicating whether the current type inherits a specified type.
            </summary>
            <param name="value">The type whose interface list to check.</param>
            <typeparam name="T">The base type.</typeparam>
            <returns>
                <see langword="true" /> if the current type inherits <typeparamref name="T" />, or <see langword="false" />
                otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not a class.</exception>
        </member>
        <member name="M:X10D.Reflection.TypeExtensions.Inherits(System.Type,System.Type)">
            <summary>
                Returns a value indicating whether the current type inherits a specified type.
            </summary>
            <param name="value">The type whose interface list to check.</param>
            <param name="type">The base type.</param>
            <returns>
                <see langword="true" /> if the current type inherits <paramref name="type" />, or <see langword="false" />
                otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="value" /> is <see langword="null" />.</para>
                -or-
                <para><paramref name="type" /> is <see langword="null" />.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="value" /> is not a class.</para>
                -or-
                <para><paramref name="type" /> is not a class.</para>
            </exception>
        </member>
        <member name="T:X10D.Text.CharExtensions">
            <summary>
                Text-related extension methods for <see cref="T:System.Char" />.
            </summary>
        </member>
        <member name="M:X10D.Text.CharExtensions.IsEmoji(System.Char)">
            <summary>
                Returns a value indicating whether this character constitutes an emoji.
            </summary>
            <param name="value">The character to check.</param>
            <returns><see langword="true" /> if this character is an emoji; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.Text.CharExtensions.Repeat(System.Char,System.Int32)">
            <summary>
                Returns a string composed of the current character repeated a specified number of times.
            </summary>
            <param name="value">The character to repeat.</param>
            <param name="count">The number of times to repeat.</param>
            <returns>
                A <see cref="T:System.String" /> composed of <paramref name="value" /> repeated <paramref name="count" /> times.
            </returns>
        </member>
        <member name="T:X10D.Text.CharSpanExtensions">
            <summary>
                Extension methods for <see cref="T:System.ReadOnlySpan`1" /> and <see cref="T:System.Span`1" /> of <see cref="T:System.Char" />.
            </summary>
        </member>
        <member name="M:X10D.Text.CharSpanExtensions.CountSubstring(System.Span{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
                Counts the occurrences of a substring within the current character span.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The character span to count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.CharSpanExtensions.CountSubstring(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
            <summary>
                Counts the occurrences of a substring within the current character span, using a specified string comparison method.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The character span to count.</param>
            <param name="comparison">The string comparison method used for determining substring count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.CharSpanExtensions.CountSubstring(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
                Counts the occurrences of a substring within the current character span.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The character span to count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.CharSpanExtensions.CountSubstring(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
            <summary>
                Counts the occurrences of a substring within the current character span, using a specified string comparison method.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The character span to count.</param>
            <param name="comparison">The string comparison method used for determining substring count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="T:X10D.Text.EnumerableExtensions">
            <summary>
                Text-related extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:X10D.Text.EnumerableExtensions.Grep(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Filters a sequence of strings by regular expression.
            </summary>
            <param name="source">The sequence of strings to filter.</param>
            <param name="pattern">The regular expression pattern to use for matching.</param>
            <returns>The filtered sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:X10D.Text.EnumerableExtensions.Grep(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
                Filters a sequence of strings by regular expression, optionally allowing to ignore casing.
            </summary>
            <param name="source">The sequence of strings to filter.</param>
            <param name="pattern">The regular expression pattern to use for matching.</param>
            <param name="ignoreCase">
                <see langword="true" /> to ignore casing when matching; otherwise, <see langword="false" />.
            </param>
            <returns>The filtered sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:X10D.Text.StringBuilderReader">
            <summary>
                Represents a <see cref="T:System.IO.TextReader"/> reads from a <see cref="T:System.Text.StringBuilder" />.
            </summary>
        </member>
        <member name="M:X10D.Text.StringBuilderReader.#ctor(System.Text.StringBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:X10D.Text.StringBuilderReader" /> class.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder" /> to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stringBuilder" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringBuilderReader.Close">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.Peek">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.Read">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.Read(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.Read(System.Span{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
            <summary>
                Asynchronously reads the characters from the current stream into a memory block.
            </summary>
            <param name="buffer">
                When this method returns, contains the specified memory block of characters replaced by the characters read from the
                current source.
            </param>
            <param name="cancellationToken">Ignored.</param>
            <returns>
                A value task that represents the asynchronous read operation. The value of the type parameter contains the number of
                characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or
                equal to the buffer length, depending on whether the data is available within the stream.
            </returns>
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadBlock(System.Span{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
            <summary>
                Asynchronously reads the characters from the current stream and writes the data to a buffer.
            </summary>
            <param name="buffer">
                When this method returns, contains the specified memory block of characters replaced by the characters read from the
                current source.
            </param>
            <param name="cancellationToken">Ignored.</param>
            <returns>
                A value task that represents the asynchronous read operation. The value of the type parameter contains the total
                number of characters read into the buffer. The result value can be less than the number of characters requested if the
                number of characters currently available is less than the requested number, or it can be 0 (zero) if the end of the
                stream has been reached.
            </returns>
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadLineAsync">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadToEnd">
            <inheritdoc />
        </member>
        <member name="M:X10D.Text.StringBuilderReader.ReadToEndAsync">
            <inheritdoc />
        </member>
        <member name="T:X10D.Text.StringExtensions">
            <summary>
                Text-related extension methods for <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:X10D.Text.StringExtensions.AsNullIfEmpty(System.String)">
            <summary>
                Normalizes a string which may be either <see langword="null" /> or empty to <see langword="null" />.
            </summary>
            <param name="value">The value to normalize.</param>
            <returns>
                <see langword="null" /> if <paramref name="value" /> is <see langword="null" /> or empty; otherwise,
                <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.AsNullIfWhiteSpace(System.String)">
            <summary>
                Normalizes a string which may be either <see langword="null" />, empty, or consisting of only whitespace, to
                <see langword="null" />.
            </summary>
            <param name="value">The value to normalize.</param>
            <returns>
                <see langword="null" /> if <paramref name="value" /> is <see langword="null" />, empty, or consists of only
                whitespace; otherwise, <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.Base64Decode(System.String)">
            <summary>
                Converts the specified string, which encodes binary data as base-64 digits, to an equivalent plain text string.
            </summary>
            <param name="value">The base-64 string to convert.</param>
            <returns>The plain text string representation of <paramref name="value" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.Base64Encode(System.String)">
            <summary>
                Converts the current string to its equivalent string representation that is encoded with base-64 digits.
            </summary>
            <param name="value">The plain text string to convert.</param>
            <returns>The string representation, in base 64, of <paramref name="value" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.ChangeEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
                Converts this string from one encoding to another.
            </summary>
            <param name="value">The input string.</param>
            <param name="sourceEncoding">The input encoding.</param>
            <param name="destinationEncoding">The output encoding.</param>
            <returns>
                Returns a new <see cref="T:System.String" /> with its data converted to
                <paramref name="destinationEncoding" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />
                - or -
                <paramref name="sourceEncoding" /> is <see langword="null" />
                -or
                <paramref name="destinationEncoding" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.CountSubstring(System.Span{System.Char},System.Char)">
            <summary>
                Counts the occurrences of a character within the current character span.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The character to count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.CountSubstring(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
                Counts the occurrences of a character within the current character span.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The character to count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.CountSubstring(System.String,System.Char)">
            <summary>
                Counts the occurrences of a character within the current string.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The character to count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.CountSubstring(System.String,System.String)">
            <summary>
                Counts the occurrences of a substring within the current string.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The substring to count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.CountSubstring(System.String,System.String,System.StringComparison)">
            <summary>
                Counts the occurrences of a substring within the current string, using a specified string comparison method.
            </summary>
            <param name="haystack">The haystack search space.</param>
            <param name="needle">The substring to count.</param>
            <param name="comparison">The string comparison method used for determining substring count.</param>
            <returns>An integer representing the count of <paramref name="needle" /> inside <paramref name="haystack" />.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureEndsWith(System.String,System.Char)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureEndsWith(System.String,System.Char,System.StringComparison)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <param name="comparisonType">One of the enumeration values that determines how the substring is compared.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureEndsWith(System.String,System.String)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureEndsWith(System.String,System.String,System.StringComparison)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <param name="comparisonType">One of the enumeration values that determines how the substring is compared.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureStartsWith(System.String,System.Char)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureStartsWith(System.String,System.Char,System.StringComparison)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <param name="comparisonType">One of the enumeration values that determines how the substring is compared.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureStartsWith(System.String,System.String)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnsureStartsWith(System.String,System.String,System.StringComparison)">
            <summary>
                Ensures that the current string starts with a specified substring.
            </summary>
            <param name="value">The string to check.</param>
            <param name="substring">The substring to prepend, if the current string does not already start with it.</param>
            <param name="comparisonType">One of the enumeration values that determines how the substring is compared.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnumParse``1(System.String)">
            <summary>
                Parses a <see cref="T:System.String" /> into an <see cref="T:System.Enum" />.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Enum" />.</typeparam>
            <param name="value">The <see cref="T:System.String" /> value to parse.</param>
            <returns>The <see cref="T:System.Enum" /> value corresponding to the <see cref="T:System.String" />.</returns>
            <remarks>
                Credit for this method goes to Scott Dorman:
                (http://geekswithblogs.net/sdorman/Default.aspx).
            </remarks>
        </member>
        <member name="M:X10D.Text.StringExtensions.EnumParse``1(System.String,System.Boolean)">
            <summary>
                Parses a <see cref="T:System.String" /> into an <see cref="T:System.Enum" />.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Enum" />.</typeparam>
            <param name="value">The <see cref="T:System.String" /> value to parse.</param>
            <param name="ignoreCase">Whether or not to ignore casing.</param>
            <returns>The <see cref="T:System.Enum" /> value corresponding to the <see cref="T:System.String" />.</returns>
            <remarks>
                Credit for this method goes to Scott Dorman:
                (http://geekswithblogs.net/sdorman/Default.aspx).
            </remarks>
        </member>
        <member name="M:X10D.Text.StringExtensions.GetBytes(System.String)">
            <summary>
                Gets a <see cref="T:System.Byte" />[] representing the value the <see cref="T:System.String" /> with
                <see cref="P:System.Text.Encoding.UTF8" /> encoding.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns a <see cref="T:System.Byte" />[].</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
                Gets a <see cref="T:System.Byte" />[] representing the value the <see cref="T:System.String" /> with the provided encoding.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>Returns a <see cref="T:System.Byte" />[].</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> or <paramref name="encoding" /> or both are
                <see langword="null" />.
            </exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsEmoji(System.String)">
            <summary>
                Returns a value indicating whether this string constitutes an emoji.
            </summary>
            <param name="value">The input string.</param>
            <returns><see langword="true" /> if this string is an emoji; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsEmpty(System.String)">
            <summary>
                Returns a value indicating whether the current string represents an empty string.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is empty; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsLower(System.String)">
            <summary>
                Determines if all alpha characters in this string are considered lowercase.
            </summary>
            <param name="value">The input string.</param>
            <returns>
                <see langword="true" /> if all alpha characters in this string are lowercase; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
                Returns a value indicating whether the current string is <see langword="null" /> (<see langword="Nothing" /> in Visual
                Basic), or represents an empty string.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is <see langword="null" /> or empty; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
                Returns a value indicating whether the current string is <see langword="null" /> (<see langword="Nothing" /> in Visual
                Basic), represents an empty string, or consists of only whitespace characters.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is <see langword="null" />, empty, or consists of only
                whitespace; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsPalindrome(System.String)">
            <summary>
                Determines whether the current string is considered palindromic; that is, the letters within the string are the
                same when reversed.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is considered a palindromic string; otherwise,
                <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsUpper(System.String)">
            <summary>
                Determines if all alpha characters in this string are considered uppercase.
            </summary>
            <param name="value">The input string.</param>
            <returns>
                <see langword="true" /> if all alpha characters in this string are uppercase; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.IsWhiteSpace(System.String)">
            <summary>
                Returns a value indicating whether the current string represents an empty string, or consists of only whitespace
                characters.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> is empty or consists of only whitespace; otherwise,
                <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
                Repeats a string a specified number of times.
            </summary>
            <param name="value">The string to repeat.</param>
            <param name="count">The repeat count.</param>
            <returns>A string containing <paramref name="value" /> repeated <paramref name="count" /> times.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.Randomize(System.String,System.Int32,System.Random)">
            <summary>
                Returns a new string of a specified length by randomly selecting characters from the current string.
            </summary>
            <param name="source">The pool of characters to use.</param>
            <param name="length">The length of the new string returned.</param>
            <param name="random">The <see cref="T:System.Random" /> supplier.</param>
            <returns>
                A new string whose length is equal to <paramref name="length" /> which contains randomly selected characters from
                <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is less than 0.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.Reverse(System.String)">
            <summary>
                Reverses the current string.
            </summary>
            <param name="value">The string to reverse.</param>
            <returns>A <see cref="T:System.String" /> whose characters are that of <paramref name="value" /> in reverse order.</returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.Shuffled(System.String,System.Random)">
            <summary>
                Shuffles the characters in the string.
            </summary>
            <param name="value">The string to shuffle.</param>
            <param name="random">
                The <see cref="T:System.Random" /> instance to use for the shuffling. If <see langword="null" /> is specified, a shared
                instance is used.
            </param>
            <returns>A new <see cref="T:System.String" /> containing the characters in <paramref name="value" />, rearranged.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.Split(System.String,System.Int32)">
            <summary>
                Splits the <see cref="T:System.String" /> into chunks that are no greater than <paramref name="chunkSize" /> in length.
            </summary>
            <param name="value">The string to split.</param>
            <param name="chunkSize">The maximum length of each string in the returned result.</param>
            <returns>
                Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing <see cref="T:System.String" /> instances which are no
                greater than <paramref name="chunkSize" /> in length.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.StartsWithAny(System.String,System.String[])">
            <summary>
                Determines whether the beginning of this string instance matches any of the specified strings using the current
                culture for comparison.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="startValues">An array of string to compare.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> starts with any of the <paramref name="startValues" />;
                otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="startValues" />, or at least one of its elements, is <see langword="null" />.
            </exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.StartsWithAny(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether the beginning of this string instance matches any of the specified strings when compared using the
                specified comparison option.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="comparison">One of the enumeration values that determines how this string and value are compared.</param>
            <param name="startValues">An array of string to compare.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> starts with any of the <paramref name="startValues" />;
                otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="startValues" />, or at least one of its elements, is <see langword="null" />.
            </exception>
        </member>
        <member name="M:X10D.Text.StringExtensions.WithEmptyAlternative(System.String,System.String)">
            <summary>
                Normalizes a string which may be either <see langword="null" /> or empty to a specified alternative.
            </summary>
            <param name="value">The value to normalize.</param>
            <param name="alternative">The alternative string.</param>
            <returns>
                <paramref name="alternative" /> if <paramref name="value" /> is <see langword="null" /> or empty; otherwise,
                <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Text.StringExtensions.WithWhiteSpaceAlternative(System.String,System.String)">
            <summary>
                Normalizes a string which may be either <see langword="null" />, empty, or consisting of only whitespace, to a
                specified alternative.
            </summary>
            <param name="value">The value to normalize.</param>
            <param name="alternative">The alternative string.</param>
            <returns>
                <paramref name="alternative" /> if <paramref name="value" /> is <see langword="null" />, empty, or consists of only
                whitespace; otherwise, <paramref name="value" />.
            </returns>
        </member>
        <member name="T:X10D.Time.ByteExtensions">
            <summary>
                Time-related extension methods for <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:X10D.Time.ByteExtensions.IsLeapYear(System.Byte)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.ByteExtensions.FromUnixTimeMilliseconds(System.Byte)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1,
                1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.ByteExtensions.FromUnixTimeSeconds(System.Byte)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.ByteExtensions.Ticks(System.Byte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.ByteExtensions.Milliseconds(System.Byte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.ByteExtensions.Seconds(System.Byte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.ByteExtensions.Minutes(System.Byte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.ByteExtensions.Hours(System.Byte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.ByteExtensions.Days(System.Byte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.ByteExtensions.Weeks(System.Byte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.CharSpanExtensions">
            <summary>
                Time-related extension methods for <see cref="T:System.ReadOnlySpan`1" /> of <see cref="T:System.Char" />.
            </summary>
        </member>
        <member name="M:X10D.Time.CharSpanExtensions.ToTimeSpan(System.ReadOnlySpan{System.Char})">
             <summary>
                 Parses this span of characters as a shorthand time span (e.g. 3w 2d 1h) and converts it to an instance of
                 <see cref="T:System.TimeSpan" />.
             </summary>
             <param name="input">
                 The input span of characters. Floating point is not supported, but integers with the following units are supported:
            
                 <list type="table">
                     <listheader>
                         <term>Suffix</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>ms</term>
                         <description>Milliseconds</description>
                     </item>
                     <item>
                         <term>s</term>
                         <description>Seconds</description>
                     </item>
                     <item>
                         <term>m</term>
                         <description>Minutes</description>
                     </item>
                     <item>
                         <term>h</term>
                         <description>Hours</description>
                     </item>
                     <item>
                         <term>d</term>
                         <description>Days</description>
                     </item>
                     <item>
                         <term>w</term>
                         <description>Weeks</description>
                     </item>
                     <item>
                         <term>mo</term>
                         <description>Months</description>
                     </item>
                     <item>
                         <term>y</term>
                         <description>Years</description>
                     </item>
                 </list>
             </param>
             <returns>A new instance of <see cref="T:System.TimeSpan" />.</returns>
        </member>
        <member name="T:X10D.Time.DateTimeExtensions">
            <summary>
                Extension methods for <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.Age(System.DateTime)">
            <inheritdoc cref="M:X10D.Time.DateTimeOffsetExtensions.Age(System.DateTimeOffset)" />
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.Age(System.DateTime,System.DateTime)">
            <inheritdoc cref="M:X10D.Time.DateTimeOffsetExtensions.Age(System.DateTimeOffset,System.DateTimeOffset)" />
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.First(System.DateTime,System.DayOfWeek)">
            <inheritdoc cref="M:X10D.Time.DateTimeOffsetExtensions.First(System.DateTimeOffset,System.DayOfWeek)" />
            <returns>A <see cref="T:System.DateTime" /> representing the first occurence of <paramref name="dayOfWeek" />.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <inheritdoc cref="M:X10D.Time.DateTimeOffsetExtensions.FirstDayOfMonth(System.DateTimeOffset)" />
            <returns>A <see cref="T:System.DateTime" /> representing the first day of the current month.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.GetIso8601WeekOfYear(System.DateTime)">
            <summary>
                Gets the ISO-8601 week number of the year for the current date.
            </summary>
            <param name="value">The date whose week number to return.</param>
            <returns>The ISO-8601 week number of the year.</returns>
            <author>Shawn Steele, Microsoft</author>
            <remarks>
                This implementation is directly inspired from a
                <a href="https://docs.microsoft.com/en-gb/archive/blogs/shawnste/iso-8601-week-of-year-format-in-microsoft-net">
                    blog post
                </a>.
                about this subject.
            </remarks>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
                Returns a value indicating whether the year represented by the current <see cref="T:System.DateTime" /> is a leap year.
            </summary>
            <param name="value">The date whose year to check.</param>
            <returns>
                <see langword="true" /> if the year represented by <paramref name="value" /> is a leap year; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.Last(System.DateTime,System.DayOfWeek)">
            <inheritdoc cref="M:X10D.Time.DateTimeOffsetExtensions.Last(System.DateTimeOffset,System.DayOfWeek)" />
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the final occurence of <paramref name="dayOfWeek" />.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <inheritdoc cref="M:X10D.Time.DateTimeOffsetExtensions.LastDayOfMonth(System.DateTimeOffset)" />
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the last day of the current month.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.Next(System.DateTime,System.DayOfWeek)">
            <inheritdoc cref="M:X10D.Time.DateTimeOffsetExtensions.Next(System.DateTimeOffset,System.DayOfWeek)" />
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the next occurence of <paramref name="dayOfWeek" />.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
                Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.
            </summary>
            <param name="value">The current date.</param>
            <returns>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeExtensions.ToUnixTimeSeconds(System.DateTime)">
            <summary>
                Returns the number of seconds that have elapsed since 1970-01-01T00:00:00.000Z.
            </summary>
            <param name="value">The current date.</param>
            <returns>The number of seconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
        </member>
        <member name="T:X10D.Time.DateTimeOffsetExtensions">
            <summary>
                Extension methods for <see cref="T:System.DateTimeOffset" />.
            </summary>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.Age(System.DateTimeOffset)">
            <summary>
                Returns the rounded-down integer number of years since a given date as of today.
            </summary>
            <param name="value">The date from which to calculate.</param>
            <returns>The rounded-down integer number of years since <paramref name="value" /> as of today.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.Age(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Returns the rounded-down integer number of years since a given date as of another specified date.
            </summary>
            <param name="value">The date from which to calculate.</param>
            <param name="asOf">The date at which to stop calculating.</param>
            <returns>
                The rounded-down integer number of years since <paramref name="value" /> as of the date specified by
                <paramref name="asOf" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.First(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
                Gets a date representing the first occurence of a specified day of the week in the current month.
            </summary>
            <param name="value">The current date.</param>
            <param name="dayOfWeek">The day of the week.</param>
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the first occurence of <paramref name="dayOfWeek" />.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.FirstDayOfMonth(System.DateTimeOffset)">
            <summary>
                Gets a date representing the first day of the current month.
            </summary>
            <param name="value">The current date.</param>
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the first day of the current month.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.GetIso8601WeekOfYear(System.DateTimeOffset)">
            <summary>
                Gets the ISO-8601 week number of the year for the current date.
            </summary>
            <param name="value">The date whose week number to return.</param>
            <returns>The ISO-8601 week number of the year.</returns>
            <author>Shawn Steele, Microsoft</author>
            <remarks>
                This implementation is directly inspired from a
                <a href="https://docs.microsoft.com/en-gb/archive/blogs/shawnste/iso-8601-week-of-year-format-in-microsoft-net">
                    blog post
                </a>.
                about this subject.
            </remarks>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.IsLeapYear(System.DateTimeOffset)">
            <summary>
                Returns a value indicating whether the year represented by the current <see cref="T:System.DateTimeOffset" /> is a leap year.
            </summary>
            <param name="value">The date whose year to check.</param>
            <returns>
                <see langword="true" /> if the year represented by <paramref name="value" /> is a leap year; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.Last(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
                Gets a date representing the final occurence of a specified day of the week in the current month.
            </summary>
            <param name="value">The current date.</param>
            <param name="dayOfWeek">The day of the week.</param>
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the final occurence of <paramref name="dayOfWeek" />.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.LastDayOfMonth(System.DateTimeOffset)">
            <summary>
                Gets a date representing the last day of the current month.
            </summary>
            <param name="value">The current date.</param>
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the last day of the current month.</returns>
        </member>
        <member name="M:X10D.Time.DateTimeOffsetExtensions.Next(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
                Gets a date representing the next occurence of a specified day of the week in the current month.
            </summary>
            <param name="value">The current date.</param>
            <param name="dayOfWeek">The day of the week.</param>
            <returns>A <see cref="T:System.DateTimeOffset" /> representing the next occurence of <paramref name="dayOfWeek" />.</returns>
        </member>
        <member name="T:X10D.Time.DecimalExtensions">
            <summary>
                Time-related extension methods for <see cref="T:System.Decimal" />.
            </summary>
        </member>
        <member name="M:X10D.Time.DecimalExtensions.Milliseconds(System.Decimal)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DecimalExtensions.Seconds(System.Decimal)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DecimalExtensions.Minutes(System.Decimal)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DecimalExtensions.Hours(System.Decimal)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DecimalExtensions.Days(System.Decimal)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.DecimalExtensions.Weeks(System.Decimal)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.DoubleExtensions">
            <summary>
                Time-related extension methods for <see cref="T:System.Double" />.
            </summary>
        </member>
        <member name="M:X10D.Time.DoubleExtensions.Milliseconds(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DoubleExtensions.Seconds(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DoubleExtensions.Minutes(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DoubleExtensions.Hours(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.DoubleExtensions.Days(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.DoubleExtensions.Weeks(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.Int16Extensions">
            <summary>
                Time-related extension methods for <see cref="T:System.Int16" />.
            </summary>
        </member>
        <member name="M:X10D.Time.Int16Extensions.IsLeapYear(System.Int16)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.Int16Extensions.FromUnixTimeMilliseconds(System.Int16)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.Int16Extensions.FromUnixTimeSeconds(System.Int16)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.Int16Extensions.Ticks(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.Int16Extensions.Milliseconds(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int16Extensions.Seconds(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int16Extensions.Minutes(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int16Extensions.Hours(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int16Extensions.Days(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.Int16Extensions.Weeks(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.Int32Extensions">
            <summary>
                Time-related extension methods for <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:X10D.Time.Int32Extensions.IsLeapYear(System.Int32)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.Int32Extensions.FromUnixTimeMilliseconds(System.Int32)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1,
                1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.Int32Extensions.FromUnixTimeSeconds(System.Int32)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.Int32Extensions.Ticks(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.Int32Extensions.Milliseconds(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int32Extensions.Seconds(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int32Extensions.Minutes(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int32Extensions.Hours(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int32Extensions.Days(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.Int32Extensions.Weeks(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.Int64Extensions">
            <summary>
                Time-related extension methods for <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:X10D.Time.Int64Extensions.IsLeapYear(System.Int64)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.Int64Extensions.FromUnixTimeMilliseconds(System.Int64)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1,
                1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.Int64Extensions.FromUnixTimeSeconds(System.Int64)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.Int64Extensions.Ticks(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.Int64Extensions.Milliseconds(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int64Extensions.Seconds(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int64Extensions.Minutes(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int64Extensions.Hours(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.Int64Extensions.Days(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.Int64Extensions.Weeks(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.SByteExtensions">
            <summary>
                Time-related extension methods for <see cref="T:System.SByte" />.
            </summary>
        </member>
        <member name="M:X10D.Time.SByteExtensions.IsLeapYear(System.SByte)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.SByteExtensions.FromUnixTimeMilliseconds(System.SByte)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1,
                1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.SByteExtensions.FromUnixTimeSeconds(System.SByte)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.SByteExtensions.Ticks(System.SByte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.SByteExtensions.Milliseconds(System.SByte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SByteExtensions.Seconds(System.SByte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SByteExtensions.Minutes(System.SByte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SByteExtensions.Hours(System.SByte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SByteExtensions.Days(System.SByte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.SByteExtensions.Weeks(System.SByte)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.SingleExtensions">
            <summary>
                Time-related extension methods for <see cref="T:System.Single" />.
            </summary>
        </member>
        <member name="M:X10D.Time.SingleExtensions.Milliseconds(System.Single)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SingleExtensions.Seconds(System.Single)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SingleExtensions.Minutes(System.Single)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SingleExtensions.Hours(System.Single)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.SingleExtensions.Days(System.Single)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.SingleExtensions.Weeks(System.Single)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.StringExtensions">
            <summary>
                Time-related extension methods for <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:X10D.Time.StringExtensions.ToTimeSpan(System.String)">
             <summary>
                 Parses a shorthand time span string (e.g. 3w 2d 1h) and converts it to an instance of <see cref="T:System.TimeSpan" />.
             </summary>
             <param name="input">
                 The input string. Floating point is not supported, but integers with the following units are supported:
            
                 <list type="table">
                     <listheader>
                         <term>Suffix</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>ms</term>
                         <description>Milliseconds</description>
                     </item>
                     <item>
                         <term>s</term>
                         <description>Seconds</description>
                     </item>
                     <item>
                         <term>m</term>
                         <description>Minutes</description>
                     </item>
                     <item>
                         <term>h</term>
                         <description>Hours</description>
                     </item>
                     <item>
                         <term>d</term>
                         <description>Days</description>
                     </item>
                     <item>
                         <term>w</term>
                         <description>Weeks</description>
                     </item>
                     <item>
                         <term>mo</term>
                         <description>Months</description>
                     </item>
                     <item>
                         <term>y</term>
                         <description>Years</description>
                     </item>
                 </list>
             </param>
             <returns>A new instance of <see cref="T:System.TimeSpan" />.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:X10D.Time.TimeSpanExtensions">
            <summary>
                Extension methods for <see cref="T:System.TimeSpan" />.
            </summary>
        </member>
        <member name="M:X10D.Time.TimeSpanExtensions.Ago(System.TimeSpan)">
            <summary>
                Returns a <see cref="T:System.DateTime" /> that is a specified duration in the past relative to the current time.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> whose duration to subtract.</param>
            <returns>
                A <see cref="T:System.DateTime" /> that is a duration of <paramref name="value" /> in the past relative to the current time.
            </returns>
        </member>
        <member name="M:X10D.Time.TimeSpanExtensions.FromNow(System.TimeSpan)">
            <summary>
                Returns a <see cref="T:System.DateTime" /> that is a specified duration in the future relative to the current time.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> whose duration to add.</param>
            <returns>
                A <see cref="T:System.DateTime" /> that is a duration of <paramref name="value" /> in the future relative to the current time.
            </returns>
        </member>
        <member name="T:X10D.Time.TimeSpanParser">
            <summary>
                Represents a class which contains a <see cref="T:System.String" /> parser which converts into <see cref="T:System.TimeSpan" />.
            </summary>
        </member>
        <member name="M:X10D.Time.TimeSpanParser.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)">
             <summary>
                 Attempts to parses a shorthand time span (e.g. 3w 2d 1h) as a span of characters, converting it to an instance of
                 <see cref="T:System.TimeSpan" /> which represents that duration of time.
             </summary>
             <param name="value">
                 The input span of characters. Floating point is not supported, but range the following units are supported:
            
                 <list type="table">
                     <listheader>
                         <term>Suffix</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>ms</term>
                         <description>Milliseconds</description>
                     </item>
                     <item>
                         <term>s</term>
                         <description>Seconds</description>
                     </item>
                     <item>
                         <term>m</term>
                         <description>Minutes</description>
                     </item>
                     <item>
                         <term>h</term>
                         <description>Hours</description>
                     </item>
                     <item>
                         <term>d</term>
                         <description>Days</description>
                     </item>
                     <item>
                         <term>w</term>
                         <description>Weeks</description>
                     </item>
                     <item>
                         <term>mo</term>
                         <description>Months</description>
                     </item>
                     <item>
                         <term>y</term>
                         <description>Years</description>
                     </item>
                 </list>
             </param>
             <param name="result">When this method returns, contains the parsed result.</param>
             <returns><see langword="true" /> if the parse was successful, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:X10D.Time.TimeSpanParser.TryParse(System.String,System.TimeSpan@)">
             <summary>
                 Attempts to parses a shorthand time span string (e.g. 3w 2d 1h), converting it to an instance of
                 <see cref="T:System.TimeSpan" /> which represents that duration of time.
             </summary>
             <param name="value">
                 The input string. Floating point is not supported, but range the following units are supported:
            
                 <list type="table">
                     <listheader>
                         <term>Suffix</term>
                         <description>Meaning</description>
                     </listheader>
            
                     <item>
                         <term>ms</term>
                         <description>Milliseconds</description>
                     </item>
                     <item>
                         <term>s</term>
                         <description>Seconds</description>
                     </item>
                     <item>
                         <term>m</term>
                         <description>Minutes</description>
                     </item>
                     <item>
                         <term>h</term>
                         <description>Hours</description>
                     </item>
                     <item>
                         <term>d</term>
                         <description>Days</description>
                     </item>
                     <item>
                         <term>w</term>
                         <description>Weeks</description>
                     </item>
                     <item>
                         <term>mo</term>
                         <description>Months</description>
                     </item>
                     <item>
                         <term>y</term>
                         <description>Years</description>
                     </item>
                 </list>
             </param>
             <param name="result">When this method returns, contains the parsed result.</param>
             <returns><see langword="true" /> if the parse was successful, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:X10D.Time.UInt16Extensions">
            <summary>
                Time-related extension methods for <see cref="T:System.UInt16" />.
            </summary>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.FromUnixTimeMilliseconds(System.UInt16)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1,
                1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.FromUnixTimeSeconds(System.UInt16)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.IsLeapYear(System.UInt16)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.Ticks(System.UInt16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.Milliseconds(System.UInt16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.Seconds(System.UInt16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.Minutes(System.UInt16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.Hours(System.UInt16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.Days(System.UInt16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.UInt16Extensions.Weeks(System.UInt16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.UInt32Extensions">
            <summary>
                Time-related extension methods for <see cref="T:System.UInt32" />.
            </summary>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.FromUnixTimeMilliseconds(System.UInt32)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1,
                1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.FromUnixTimeSeconds(System.UInt32)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.IsLeapYear(System.UInt32)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.Ticks(System.UInt32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.Milliseconds(System.UInt32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.Seconds(System.UInt32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.Minutes(System.UInt32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.Hours(System.UInt32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.Days(System.UInt32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.UInt32Extensions.Weeks(System.UInt32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
        <member name="T:X10D.Time.UInt64Extensions">
            <summary>
                Time-related extension methods for <see cref="T:System.UInt64" />.
            </summary>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.FromUnixTimeMilliseconds(System.UInt64)">
            <summary>
                Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1,
                1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800,000.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799,999.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.FromUnixTimeSeconds(System.UInt64)">
            <summary>
                Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a
                <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">
                A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at
                12:00 AM UTC). For Unix times before this date, its value is negative.
            </param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="value" /> is less than -62,135,596,800.</para>
                -or-
                <para><paramref name="value" /> is greater than 253,402,300,799.</para>
            </exception>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.IsLeapYear(System.UInt64)">
            <summary>
                Returns a value indicating whether the current integer, representing a year, is a leap year.
            </summary>
            <param name="value">The value whose leap year status to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="value" /> refers to a leap year; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> is 0.</exception>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.Ticks(System.UInt64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of ticks.
            </summary>
            <param name="value">The duration, in ticks.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.Ticks" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.Milliseconds(System.UInt64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of milliseconds.
            </summary>
            <param name="value">The duration, in milliseconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMilliseconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.Seconds(System.UInt64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of seconds.
            </summary>
            <param name="value">The duration, in seconds.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalSeconds" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.Minutes(System.UInt64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of minutes.
            </summary>
            <param name="value">The duration, in minutes.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalMinutes" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.Hours(System.UInt64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of hours.
            </summary>
            <param name="value">The duration, in hours.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalHours" /> will equal <paramref name="value" />.
            </returns>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.Days(System.UInt64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of days.
            </summary>
            <param name="value">The duration, in days.</param>
            <returns>A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" />.</returns>
        </member>
        <member name="M:X10D.Time.UInt64Extensions.Weeks(System.UInt64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents this value as the number of weeks.
            </summary>
            <param name="value">The duration, in weeks.</param>
            <returns>
                A <see cref="T:System.TimeSpan" /> whose <see cref="P:System.TimeSpan.TotalDays" /> will equal <paramref name="value" /> × 7.
            </returns>
        </member>
    </members>
</doc>
