{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Introduction | X10D",
    "keywords": "Introduction X10D (pronounced extend ), is a .NET package that provides extension methods for numerous types. The purpose of this library is to simplify a codebase by reducing the need for repeated code when performing common operations. Simplify your codebase. Take advantage of .NET. Use extension methods."
  },
  "api/X10D.Collections.ArrayExtensions.html": {
    "href": "api/X10D.Collections.ArrayExtensions.html",
    "title": "Class ArrayExtensions | X10D",
    "keywords": "Class ArrayExtensions Extension methods for . Inheritance System.Object ArrayExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class ArrayExtensions : object Methods | Improve this Doc View Source AsReadOnly<T>(T[]) Returns a read-only wrapper for the array. Declaration public static IReadOnlyCollection<T> AsReadOnly<T>(this T[] array) Parameters Type Name Description T[] array The one-dimensional, zero-based array to wrap in a read-only wrapper. Returns Type Description IReadOnlyCollection <T> A wrapper for the specified array. Type Parameters Name Description T The type of the elements in the array. | Improve this Doc View Source Clear<T>(T[]) Clears the contents of an array. Declaration public static void Clear<T>(this T[] array) Parameters Type Name Description T[] array The array to clear. Type Parameters Name Description T The type of the elements in the array. | Improve this Doc View Source Clear<T>(T[], Range) Sets a range of elements in an array to the default value of each element type. Declaration public static void Clear<T>(this T[] array, Range range) Parameters Type Name Description T[] array The array whose elements need to be cleared. Range range A range defining the start index and number of elements to clear. Type Parameters Name Description T The type of the elements in the array. | Improve this Doc View Source Clear<T>(T[], Int32, Int32) Sets a range of elements in an array to the default value of each element type. Declaration public static void Clear<T>(this T[] array, int index, int length) Parameters Type Name Description T[] array The array whose elements need to be cleared. System.Int32 index The starting index of the range of elements to clear. System.Int32 length The number of elements to clear. Type Parameters Name Description T The type of the elements in the array."
  },
  "api/X10D.Collections.BoolListExtensions.html": {
    "href": "api/X10D.Collections.BoolListExtensions.html",
    "title": "Class BoolListExtensions | X10D",
    "keywords": "Class BoolListExtensions Collection-related extension methods for of . Inheritance System.Object BoolListExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class BoolListExtensions : object Methods | Improve this Doc View Source PackByte(IReadOnlyList<Boolean>) Packs a collection of booleans into a . Declaration public static byte PackByte(this IReadOnlyList<bool> source) Parameters Type Name Description IReadOnlyList < System.Boolean > source The collection of booleans to pack. Returns Type Description System.Byte An 8-bit unsigned integer containing the packed booleans. | Improve this Doc View Source PackInt16(IReadOnlyList<Boolean>) Packs a collection of booleans into a . Declaration public static short PackInt16(this IReadOnlyList<bool> source) Parameters Type Name Description IReadOnlyList < System.Boolean > source The collection of booleans to pack. Returns Type Description System.Int16 A 16-bit signed integer containing the packed booleans. | Improve this Doc View Source PackInt32(IReadOnlyList<Boolean>) Packs a collection of booleans into a . Declaration public static int PackInt32(this IReadOnlyList<bool> source) Parameters Type Name Description IReadOnlyList < System.Boolean > source The collection of booleans to pack. Returns Type Description System.Int32 A 32-bit signed integer containing the packed booleans. | Improve this Doc View Source PackInt64(IReadOnlyList<Boolean>) Packs a collection of booleans into a . Declaration public static long PackInt64(this IReadOnlyList<bool> source) Parameters Type Name Description IReadOnlyList < System.Boolean > source The collection of booleans to pack. Returns Type Description System.Int64 A 64-bit signed integer containing the packed booleans."
  },
  "api/X10D.Collections.ByteExtensions.html": {
    "href": "api/X10D.Collections.ByteExtensions.html",
    "title": "Class ByteExtensions | X10D",
    "keywords": "Class ByteExtensions Collection-related extension methods for . Inheritance System.Object ByteExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class ByteExtensions : object Methods | Improve this Doc View Source Unpack(Byte) Unpacks this 8-bit unsigned integer into a boolean list, treating it as a bit field. Declaration public static bool[] Unpack(this byte value) Parameters Type Name Description System.Byte value The value to unpack. Returns Type Description System.Boolean [] An array of with length 8. | Improve this Doc View Source Unpack(Byte, Span<Boolean>) Unpacks this 8-bit unsigned integer into a boolean list, treating it as a bit field. Declaration public static void Unpack(this byte value, Span<bool> destination) Parameters Type Name Description System.Byte value The value to unpack. Span < System.Boolean > destination When this method returns, contains the unpacked booleans from value ."
  },
  "api/X10D.Collections.CollectionExtensions.html": {
    "href": "api/X10D.Collections.CollectionExtensions.html",
    "title": "Class CollectionExtensions | X10D",
    "keywords": "Class CollectionExtensions Collection-related extension methods for . Inheritance System.Object CollectionExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source ClearAndDisposeAll<T>(ICollection<T>) Calls on each item in the collection, then clears the collection by calling . Declaration public static void ClearAndDisposeAll<T>(this ICollection<T> source) where T : IDisposable Parameters Type Name Description ICollection <T> source The collection to clear, and whose elements should be disposed. Type Parameters Name Description T The type of the elements in source . See Also DisposeAll<T>(IEnumerable<T>) | Improve this Doc View Source ClearAndDisposeAllAsync<T>(ICollection<T>) Asynchronously calls on each item in the collection, then clears the collection by calling . Declaration public static Task ClearAndDisposeAllAsync<T>(this ICollection<T> source) where T : IAsyncDisposable Parameters Type Name Description ICollection <T> source The collection to clear, and whose elements should be disposed. Returns Type Description Task Type Parameters Name Description T The type of the elements in source . See Also DisposeAllAsync<T>(IEnumerable<T>)"
  },
  "api/X10D.Collections.DictionaryExtensions.html": {
    "href": "api/X10D.Collections.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | X10D",
    "keywords": "Class DictionaryExtensions Extension methods for and similar types. Inheritance System.Object DictionaryExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class DictionaryExtensions : object Methods | Improve this Doc View Source AddOrUpdate<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) Adds a key/value pair to the if the key does not already exist, or updates a key/value pair in the by using the specified function if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) Parameters Type Name Description Dictionary <TKey, TValue> dictionary The dictionary to update. TKey key The key to be added or whose value should be updated. TValue addValue The value to be added for an absent key. Func <TKey, TValue, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value. Returns Type Description TValue The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. | Improve this Doc View Source AddOrUpdate<TKey, TValue>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) Uses the specified functions to add a key/value pair to the if the key does not already exist, or to update a key/value pair in the if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) Parameters Type Name Description Dictionary <TKey, TValue> dictionary The dictionary to update. TKey key The key to be added or whose value should be updated. Func <TKey, TValue> addValueFactory The function used to generate a value for an absent key. Func <TKey, TValue, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value. Returns Type Description TValue The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. | Improve this Doc View Source AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) Adds a key/value pair to the if the key does not already exist, or updates a key/value pair in the by using the specified function if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary to update. TKey key The key to be added or whose value should be updated. TValue addValue The value to be added for an absent key. Func <TKey, TValue, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value. Returns Type Description TValue The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. | Improve this Doc View Source AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) Uses the specified functions to add a key/value pair to the if the key does not already exist, or to update a key/value pair in the if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary to update. TKey key The key to be added or whose value should be updated. Func <TKey, TValue> addValueFactory The function used to generate a value for an absent key. Func <TKey, TValue, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value. Returns Type Description TValue The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. | Improve this Doc View Source AddOrUpdate<TKey, TValue, TArg>(Dictionary<TKey, TValue>, TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg) Uses the specified functions and argument to add a key/value pair to the if the key does not already exist, or to update a key/value pair in the if th key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue, TArg>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TArg, TValue> addValueFactory, Func<TKey, TValue, TArg, TValue> updateValueFactory, TArg factoryArgument) Parameters Type Name Description Dictionary <TKey, TValue> dictionary The dictionary to update. TKey key The key to be added or whose value should be updated. Func <TKey, TArg, TValue> addValueFactory The function used to generate a value for an absent key. Func <TKey, TValue, TArg, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value. TArg factoryArgument An argument to pass into addValueFactory and updateValueFactory . Returns Type Description TValue The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. TArg The type of an argument to pass into addValueFactory and updateValueFactory . | Improve this Doc View Source AddOrUpdate<TKey, TValue, TArg>(IDictionary<TKey, TValue>, TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg) Uses the specified functions and argument to add a key/value pair to the if the key does not already exist, or to update a key/value pair in the if th key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue, TArg>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TArg, TValue> addValueFactory, Func<TKey, TValue, TArg, TValue> updateValueFactory, TArg factoryArgument) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary to update. TKey key The key to be added or whose value should be updated. Func <TKey, TArg, TValue> addValueFactory The function used to generate a value for an absent key. Func <TKey, TValue, TArg, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value. TArg factoryArgument An argument to pass into addValueFactory and updateValueFactory . Returns Type Description TValue The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. TArg The type of an argument to pass into addValueFactory and updateValueFactory . | Improve this Doc View Source ToConnectionString<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Converts an of to a data connection string. Declaration public static string ToConnectionString<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source The source dictionary. Returns Type Description System.String A representing the dictionary as a key=value set, concatenated with ; . Type Parameters Name Description TKey The type of the key element of the key/value pair. TValue The type of the value element of the key/value pair. | Improve this Doc View Source ToConnectionString<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TKey, String>, Func<TValue, Nullable<String>>) Converts an of to an data connection string. Declaration public static string ToConnectionString<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, Func<TKey, string> keySelector, Func<TValue, string?> valueSelector) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source The source dictionary. Func <TKey, System.String > keySelector A transform function to apply to the of each element. Func <TValue, System.Nullable < System.String >> valueSelector A transform function to apply to the of each element. Returns Type Description System.String A representing the dictionary as a key=value set, concatenated with ; . Type Parameters Name Description TKey The type of the key element of the key/value pair. TValue The type of the value element of the key/value pair. | Improve this Doc View Source ToConnectionString<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TValue, Nullable<String>>) Converts an of to a data connection string. Declaration public static string ToConnectionString<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, Func<TValue, string?> selector) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source The source dictionary. Func <TValue, System.Nullable < System.String >> selector A transform function to apply to the of each element. Returns Type Description System.String A representing the dictionary as a key=value set, concatenated with ; . Type Parameters Name Description TKey The type of the key element of the key/value pair. TValue The type of the value element of the key/value pair. | Improve this Doc View Source ToGetParameters<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Converts an of to a HTTP GET query string. Declaration public static string ToGetParameters<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source The source dictionary. Returns Type Description System.String A representing the dictionary as a key=value set, concatenated with & . Type Parameters Name Description TKey The type of the key element of the key/value pair. TValue The type of the value element of the key/value pair. | Improve this Doc View Source ToGetParameters<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TKey, String>, Func<TValue, Nullable<String>>) Converts an of to a HTTP GET query string. Declaration public static string ToGetParameters<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, Func<TKey, string> keySelector, Func<TValue, string?> valueSelector) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source The source dictionary. Func <TKey, System.String > keySelector A transform function to apply to the of each element. Func <TValue, System.Nullable < System.String >> valueSelector A transform function to apply to the of each element. Returns Type Description System.String A representing the dictionary as a key=value set, concatenated with & . Type Parameters Name Description TKey The type of the key element of the key/value pair. TValue The type of the value element of the key/value pair. | Improve this Doc View Source ToGetParameters<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TValue, Nullable<String>>) Converts an of to a HTTP GET query string. Declaration public static string ToGetParameters<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, Func<TValue, string?> selector) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source The source dictionary. Func <TValue, System.Nullable < System.String >> selector A transform function to apply to the of each element. Returns Type Description System.String A representing the dictionary as a key=value set, concatenated with & . Type Parameters Name Description TKey The type of the key element of the key/value pair. TValue The type of the value element of the key/value pair."
  },
  "api/X10D.Collections.EnumerableExtensions.html": {
    "href": "api/X10D.Collections.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | X10D",
    "keywords": "Class EnumerableExtensions Extension methods for . Inheritance System.Object EnumerableExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class EnumerableExtensions : object Methods | Improve this Doc View Source CountWhereNot<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Returns a number that represents how many elements in the specified sequence do not satisfy a condition. Declaration public static int CountWhereNot<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters Type Name Description IEnumerable <TSource> source A sequence that contains elements to be tested and counted. Func <TSource, System.Boolean > predicate A function to test each element for a condition. Returns Type Description System.Int32 A number that represents how many elements in the sequence do not satisfy the condition in the predicate function. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source DisposeAll<T>(IEnumerable<T>) Calls on all elements of the . Declaration public static void DisposeAll<T>(this IEnumerable<T> source) where T : IDisposable Parameters Type Name Description IEnumerable <T> source The enumerable collection whose elements to dispose. Type Parameters Name Description T The type of the elements in source . See Also ClearAndDisposeAll<T>(ICollection<T>) | Improve this Doc View Source DisposeAllAsync<T>(IEnumerable<T>) Asynchronously calls on all elements of the . Declaration public static Task DisposeAllAsync<T>(this IEnumerable<T> source) where T : IAsyncDisposable Parameters Type Name Description IEnumerable <T> source The enumerable collection whose elements to dispose. Returns Type Description Task Type Parameters Name Description T The type of the elements in source . See Also ClearAndDisposeAllAsync<T>(ICollection<T>) | Improve this Doc View Source FirstWhereNot<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Returns the first element in a sequence that does not satisfy a specified condition. Declaration public static TSource FirstWhereNot<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters Type Name Description IEnumerable <TSource> source An to return an element from. Func <TSource, System.Boolean > predicate A function to test each element for a condition. Returns Type Description TSource The first element in the sequence that fails the test in the specified predicate function. Type Parameters Name Description TSource The type of the elements in source | Improve this Doc View Source FirstWhereNotOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Returns the first element in a sequence that does not satisfy a specified condition. Declaration public static TSource FirstWhereNotOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters Type Name Description IEnumerable <TSource> source An to return an element from. Func <TSource, System.Boolean > predicate A function to test each element for a condition. Returns Type Description TSource langword_csharp_default(TSource) if source is empty or if no element passes the test specified by predicate ; otherwise, the first element in source that fails the test specified by predicate . Type Parameters Name Description TSource The type of the elements in source | Improve this Doc View Source For<T>(IEnumerable<T>, Action<Int32, T>) Performs the specified action on each element of the . Declaration public static void For<T>(this IEnumerable<T> source, Action<int, T> action) Parameters Type Name Description IEnumerable <T> source The whose elements on which to perform action . Action < System.Int32 , T> action The delegate to perform on each element of the . The argument passed to this delegate represents the index. Type Parameters Name Description T The type of the elements in source . | Improve this Doc View Source ForEach<T>(IEnumerable<T>, Action<T>) Performs the specified action on each element of the . Declaration public static void ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters Type Name Description IEnumerable <T> source The whose elements on which to perform action . Action <T> action The delegate to perform on each element of the . Type Parameters Name Description T The type of the elements in source . | Improve this Doc View Source LastWhereNot<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Returns the last element in a sequence that does not satisfy a specified condition. Declaration public static TSource LastWhereNot<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters Type Name Description IEnumerable <TSource> source An to return an element from. Func <TSource, System.Boolean > predicate A function to test each element for a condition. Returns Type Description TSource The last element in the sequence that fails the test in the specified predicate function. Type Parameters Name Description TSource The type of the elements in source | Improve this Doc View Source LastWhereNotOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Returns the last element in a sequence that does not satisfy a specified condition. Declaration public static TSource LastWhereNotOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters Type Name Description IEnumerable <TSource> source An to return an element from. Func <TSource, System.Boolean > predicate A function to test each element for a condition. Returns Type Description TSource langword_csharp_default(TSource) if source is empty or if no element passes the test specified by predicate ; otherwise, the last element in source that fails the test specified by predicate . Type Parameters Name Description TSource The type of the elements in source | Improve this Doc View Source Shuffled<T>(IEnumerable<T>, Nullable<Random>) Reorganizes the elements in an enumerable by implementing a Fisher-Yates shuffle, and returns th shuffled result. Declaration public static IReadOnlyCollection<T> Shuffled<T>(this IEnumerable<T> source, Random? random = null) Parameters Type Name Description IEnumerable <T> source The to shuffle. System.Nullable < Random > random Optional. The instance to use for the shuffling. Returns Type Description IReadOnlyCollection <T> The shuffled collection. Type Parameters Name Description T The element type. | Improve this Doc View Source WhereNot<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Filters a sequence of values based on a predicate, such that all elements in the result do not match the predicate. Declaration public static IEnumerable<TSource> WhereNot<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters Type Name Description IEnumerable <TSource> source An to filter. Func <TSource, System.Boolean > predicate A function to test each element for a condition. Returns Type Description IEnumerable <TSource> An that contains elements from the input sequence that do not satisfy the condition. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source WhereNotNull<TSource>(IEnumerable<TSource>) Filters a sequence of values by omitting elements that are null ( langword_csharp_Nothing in Visual Basic). Declaration public static IEnumerable<TSource> WhereNotNull<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable <TSource> source An to filter. Returns Type Description IEnumerable <TSource> An that contains elements from the input sequence that are not null ( langword_csharp_Nothing in Visual Basic). Type Parameters Name Description TSource The type of the elements of source ."
  },
  "api/X10D.Collections.html": {
    "href": "api/X10D.Collections.html",
    "title": "Namespace X10D.Collections | X10D",
    "keywords": "Namespace X10D.Collections Classes ArrayExtensions Extension methods for . BoolListExtensions Collection-related extension methods for of . ByteExtensions Collection-related extension methods for . CollectionExtensions Collection-related extension methods for . DictionaryExtensions Extension methods for and similar types. EnumerableExtensions Extension methods for . Int16Extensions Collection-related extension methods for . Int32Extensions Collection-related extension methods for . Int64Extensions Collection-related extension methods for . ListExtensions Extension methods for and . SpanExtensions Extension methods for and Structs SpanSplitEnumerator<T> Enumerates the elements of a ."
  },
  "api/X10D.Collections.Int16Extensions.html": {
    "href": "api/X10D.Collections.Int16Extensions.html",
    "title": "Class Int16Extensions | X10D",
    "keywords": "Class Int16Extensions Collection-related extension methods for . Inheritance System.Object Int16Extensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class Int16Extensions : object Methods | Improve this Doc View Source Unpack(Int16) Unpacks this 16-bit signed integer into a boolean list, treating it as a bit field. Declaration public static bool[] Unpack(this short value) Parameters Type Name Description System.Int16 value The value to unpack. Returns Type Description System.Boolean [] An array of with length 16. | Improve this Doc View Source Unpack(Int16, Span<Boolean>) Unpacks this 16-bit signed integer into a boolean list, treating it as a bit field. Declaration public static void Unpack(this short value, Span<bool> destination) Parameters Type Name Description System.Int16 value The value to unpack. Span < System.Boolean > destination When this method returns, contains the unpacked booleans from value ."
  },
  "api/X10D.Collections.Int32Extensions.html": {
    "href": "api/X10D.Collections.Int32Extensions.html",
    "title": "Class Int32Extensions | X10D",
    "keywords": "Class Int32Extensions Collection-related extension methods for . Inheritance System.Object Int32Extensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class Int32Extensions : object Methods | Improve this Doc View Source Unpack(Int32) Unpacks this 32-bit signed integer into a boolean list, treating it as a bit field. Declaration public static bool[] Unpack(this int value) Parameters Type Name Description System.Int32 value The value to unpack. Returns Type Description System.Boolean [] An array of with length 32. | Improve this Doc View Source Unpack(Int32, Span<Boolean>) Unpacks this 32-bit signed integer into a boolean list, treating it as a bit field. Declaration public static void Unpack(this int value, Span<bool> destination) Parameters Type Name Description System.Int32 value The value to unpack. Span < System.Boolean > destination When this method returns, contains the unpacked booleans from value ."
  },
  "api/X10D.Collections.Int64Extensions.html": {
    "href": "api/X10D.Collections.Int64Extensions.html",
    "title": "Class Int64Extensions | X10D",
    "keywords": "Class Int64Extensions Collection-related extension methods for . Inheritance System.Object Int64Extensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class Int64Extensions : object Methods | Improve this Doc View Source Unpack(Int64) Unpacks this 64-bit signed integer into a boolean list, treating it as a bit field. Declaration public static bool[] Unpack(this long value) Parameters Type Name Description System.Int64 value The value to unpack. Returns Type Description System.Boolean [] An array of with length 64. | Improve this Doc View Source Unpack(Int64, Span<Boolean>) Unpacks this 64-bit signed integer into a boolean list, treating it as a bit field. Declaration public static void Unpack(this long value, Span<bool> destination) Parameters Type Name Description System.Int64 value The value to unpack. Span < System.Boolean > destination When this method returns, contains the unpacked booleans from value ."
  },
  "api/X10D.Collections.ListExtensions.html": {
    "href": "api/X10D.Collections.ListExtensions.html",
    "title": "Class ListExtensions | X10D",
    "keywords": "Class ListExtensions Extension methods for and . Inheritance System.Object ListExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class ListExtensions : object Methods | Improve this Doc View Source Fill<T>(IList<T>, T) Assigns the given value to each element of the list. Declaration public static void Fill<T>(this IList<T> source, T value) Parameters Type Name Description IList <T> source The list to be filled. T value The value to assign to each list element. Type Parameters Name Description T The type of the elements in the list. | Improve this Doc View Source Fill<T>(IList<T>, T, Int32, Int32) Assigns the given value to the elements of the list which are within the range of startIndex (inclusive) and the next count number of indices. Declaration public static void Fill<T>(this IList<T> source, T value, int startIndex, int count) Parameters Type Name Description IList <T> source The list to be filled. T value The value to assign to each list element. System.Int32 startIndex A 32-bit integer that represents the index in the list at which filling begins. System.Int32 count The number of elements to fill. Type Parameters Name Description T The type of the elements in the list. | Improve this Doc View Source IndexOf<T>(IReadOnlyList<T>, T) Searches for the specified object and returns the zero-based index of the first occurrence within the entire . Declaration public static int IndexOf<T>(this IReadOnlyList<T> source, T item) Parameters Type Name Description IReadOnlyList <T> source The list to search T item The object to locate in the . The value can be true for reference types. Returns Type Description System.Int32 The zero-based index of the first occurrence of item within the entire , if found; otherwise, -1. Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source IndexOf<T>(IReadOnlyList<T>, T, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the that extends from the specified index to the last element. Declaration public static int IndexOf<T>(this IReadOnlyList<T> source, T item, int startIndex) Parameters Type Name Description IReadOnlyList <T> source The list to search T item The object to locate in the . The value can be true for reference types. System.Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description System.Int32 The zero-based index of the first occurrence of item within the range of elements in the that starts at index and contains count number of elements, if found; otherwise, -1. Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source IndexOf<T>(IReadOnlyList<T>, T, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the that starts at the specified index and contains the specified number of elements. Declaration public static int IndexOf<T>(this IReadOnlyList<T> source, T item, int startIndex, int count) Parameters Type Name Description IReadOnlyList <T> source The list to search T item The object to locate in the . The value can be true for reference types. System.Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. System.Int32 count The number of elements in the section to search. Returns Type Description System.Int32 The zero-based index of the first occurrence of item within the range of elements in the that starts at index and contains count number of elements, if found; otherwise, -1. Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Random<T>(IReadOnlyList<T>, Nullable<Random>) Returns a random element from the current list using a specified instance. Declaration public static T Random<T>(this IReadOnlyList<T> source, Random? random = null) Parameters Type Name Description IReadOnlyList <T> source The source collection from which to draw. System.Nullable < Random > random The instance to use for the shuffling. If null is specified, a shared instance is used. Returns Type Description T A random element of type T from source . Type Parameters Name Description T The element type. Examples var list = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; var number = list.Random(); | Improve this Doc View Source RemoveRange<T>(IList<T>, Range) Removes a range of elements from the list. Declaration public static void RemoveRange<T>(this IList<T> source, Range range) Parameters Type Name Description IList <T> source The list whose elements to remove. Range range The range of elements to remove. Type Parameters Name Description T The type of the elements in source . | Improve this Doc View Source Shuffle<T>(IList<T>, Nullable<Random>) Reorganizes the elements in a list by implementing a Fisher-Yates shuffle. Declaration public static void Shuffle<T>(this IList<T> source, Random? random = null) Parameters Type Name Description IList <T> source The to shuffle. System.Nullable < Random > random The instance to use for the shuffling. If null is specified, a shared instance is used. Type Parameters Name Description T The element type. | Improve this Doc View Source Slice<T>(IReadOnlyList<T>, Int32) Forms a slice out of the current list that begins at a specified index. Declaration public static IReadOnlyList<T> Slice<T>(this IReadOnlyList<T> source, int start) Parameters Type Name Description IReadOnlyList <T> source The list to slice. System.Int32 start The index at which to begin the slice. Returns Type Description IReadOnlyList <T> A list that consists of all elements of the current list from start to the end of the list. Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Slice<T>(IReadOnlyList<T>, Int32, Int32) Forms a slice out of the current list that begins at a specified index for a specified length. Declaration public static IReadOnlyList<T> Slice<T>(this IReadOnlyList<T> source, int start, int length) Parameters Type Name Description IReadOnlyList <T> source The list to slice. System.Int32 start The index at which to begin the slice. System.Int32 length The desired length for the slice. Returns Type Description IReadOnlyList <T> A list that consists of all elements of the current list from start to the end of the list. Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Swap<T>(IList<T>, IList<T>) Swaps all elements in a list with the elements in another list. Declaration public static void Swap<T>(this IList<T> source, IList<T> other) Parameters Type Name Description IList <T> source The first list. IList <T> other The second list. Type Parameters Name Description T The type of the elements in source and other ."
  },
  "api/X10D.Collections.SpanExtensions.html": {
    "href": "api/X10D.Collections.SpanExtensions.html",
    "title": "Class SpanExtensions | X10D",
    "keywords": "Class SpanExtensions Extension methods for and Inheritance System.Object SpanExtensions Namespace : X10D.Collections Assembly : X10D.dll Syntax public static class SpanExtensions : object Methods | Improve this Doc View Source AsReadOnly<T>(Span<T>) Returns a read-only wrapper for the current span. Declaration public static ReadOnlySpan<T> AsReadOnly<T>(this in Span<T> source) Parameters Type Name Description Span <T> source The source span. Returns Type Description ReadOnlySpan <T> A which wraps the elements in source . Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Count<T>(ReadOnlySpan<T>, T) Returns the number of times that a specified element appears in a read-only span of elements of the same type. Declaration public static int Count<T>(this in ReadOnlySpan<T> source, T element) where T : IEquatable<T> Parameters Type Name Description ReadOnlySpan <T> source The source to search. T element The element to count. Returns Type Description System.Int32 The number of times that element appears in source . Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Count<T>(Span<T>, T) Returns the number of times that a specified element appears in a span of elements of the same type. Declaration public static int Count<T>(this in Span<T> source, T element) where T : IEquatable<T> Parameters Type Name Description Span <T> source The source to search. T element The element to count. Returns Type Description System.Int32 The number of times that element appears in source . Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Replace<T>(Span<T>, T, T) Replaces all occurrences of a specified element in a span of elements with another specified element. Declaration public static void Replace<T>(this Span<T> haystack, T needle, T replacement) where T : struct Parameters Type Name Description Span <T> haystack The source span. T needle The element to replace. T replacement The replacement element. Type Parameters Name Description T The type of elements in haystack . | Improve this Doc View Source Split<T>(ReadOnlySpan<T>, T) Splits a span of elements into sub-spans based on a delimiting element. Declaration public static SpanSplitEnumerator<T> Split<T>(this in ReadOnlySpan<T> source, T delimiter) where T : struct, IEquatable<T> Parameters Type Name Description ReadOnlySpan <T> source The span to split. T delimiter The delimiting element. Returns Type Description SpanSplitEnumerator <T> An enumerator which wraps source and delimits the elements based on delimiter . Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Split<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Splits a span of elements into sub-spans based on a span of delimiting elements. Declaration public static SpanSplitEnumerator<T> Split<T>(this in ReadOnlySpan<T> source, in ReadOnlySpan<T> delimiter) where T : struct, IEquatable<T> Parameters Type Name Description ReadOnlySpan <T> source The span to split. ReadOnlySpan <T> delimiter The span of delimiting elements. Returns Type Description SpanSplitEnumerator <T> An enumerator which wraps source and delimits the elements based on delimiter . Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Split<T>(Span<T>, T) Splits a span of elements into sub-spans based on a delimiting element. Declaration public static SpanSplitEnumerator<T> Split<T>(this in Span<T> source, T delimiter) where T : struct, IEquatable<T> Parameters Type Name Description Span <T> source The span to split. T delimiter The delimiting element. Returns Type Description SpanSplitEnumerator <T> An enumerator which wraps source and delimits the elements based on delimiter . Type Parameters Name Description T The type of elements in source . | Improve this Doc View Source Split<T>(Span<T>, ReadOnlySpan<T>) Splits a span of elements into sub-spans based on a span of delimiting elements. Declaration public static SpanSplitEnumerator<T> Split<T>(this in Span<T> source, in ReadOnlySpan<T> delimiter) where T : struct, IEquatable<T> Parameters Type Name Description Span <T> source The span to split. ReadOnlySpan <T> delimiter The span of delimiting elements. Returns Type Description SpanSplitEnumerator <T> An enumerator which wraps source and delimits the elements based on delimiter . Type Parameters Name Description T The type of elements in source ."
  },
  "api/X10D.Collections.SpanSplitEnumerator-1.html": {
    "href": "api/X10D.Collections.SpanSplitEnumerator-1.html",
    "title": "Struct SpanSplitEnumerator<T> | X10D",
    "keywords": "Struct SpanSplitEnumerator<T> Enumerates the elements of a . Namespace : X10D.Collections Assembly : X10D.dll Syntax public struct SpanSplitEnumerator<T> where T : struct, IEquatable<T> Type Parameters Name Description T The type of elements in the span. Constructors | Improve this Doc View Source SpanSplitEnumerator(ReadOnlySpan<T>, T) Initializes a new instance of the SpanSplitEnumerator<T> struct. Declaration public SpanSplitEnumerator(ReadOnlySpan<T> source, T delimiter) Parameters Type Name Description ReadOnlySpan <T> source The source span. T delimiter The delimiting element. | Improve this Doc View Source SpanSplitEnumerator(ReadOnlySpan<T>, ReadOnlySpan<T>) Initializes a new instance of the SpanSplitEnumerator<T> struct. Declaration public SpanSplitEnumerator(ReadOnlySpan<T> source, ReadOnlySpan<T> delimiter) Parameters Type Name Description ReadOnlySpan <T> source The source span. ReadOnlySpan <T> delimiter The delimiting span of elements. Properties | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public ReadOnlySpan<T> Current { get; } Property Value Type Description ReadOnlySpan <T> The element in the at the current position of the enumerator. Methods | Improve this Doc View Source GetEnumerator() Returns the current enumerator. Declaration public SpanSplitEnumerator<T> GetEnumerator() Returns Type Description SpanSplitEnumerator <T> The current instance of SpanSplitEnumerator<T> . Remarks This method exists to provide the ability to enumerate within a foreach loop. It should not be called manually. | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the . Declaration public bool MoveNext() Returns Type Description System.Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the span."
  },
  "api/X10D.Core.EnumExtensions.html": {
    "href": "api/X10D.Core.EnumExtensions.html",
    "title": "Class EnumExtensions | X10D",
    "keywords": "Class EnumExtensions Extension methods for langword_csharp_enum types. Inheritance System.Object EnumExtensions Namespace : X10D.Core Assembly : X10D.dll Syntax public static class EnumExtensions : object Methods | Improve this Doc View Source Next<T>(T) Returns the value which is defined proceeding this value in the enumeration. Declaration public static T Next<T>(this T value) where T : struct, Enum Parameters Type Name Description T value The value whose proceeding value to retrieve. Returns Type Description T A value of T that is considered to be the next value defined after value , or the first value if value is the final field of the enumeration. Type Parameters Name Description T The type of the enumeration. | Improve this Doc View Source NextUnchecked<T>(T) Returns the value which is defined proceeding this value in the enumeration. Declaration public static T NextUnchecked<T>(this T value) where T : struct, Enum Parameters Type Name Description T value The value whose proceeding value to retrieve. Returns Type Description T A value of T that is considered to be the next value defined after value . Type Parameters Name Description T The type of the enumeration. | Improve this Doc View Source Previous<T>(T) Returns the value which is defined preceeding this value in the enumeration. Declaration public static T Previous<T>(this T value) where T : struct, Enum Parameters Type Name Description T value The value whose preceeding value to retrieve. Returns Type Description T A value of T that is considered to be the previous value defined after value , or the last value if value is the first field of the enumeration. Type Parameters Name Description T The type of the enumeration. | Improve this Doc View Source PreviousUnchecked<T>(T) Returns the value which is defined preceeding this value in the enumeration. Declaration public static T PreviousUnchecked<T>(this T value) where T : struct, Enum Parameters Type Name Description T value The value whose preceeding value to retrieve. Returns Type Description T A value of T that is considered to be the previous value defined after value , or the last value if value is the first field of the enumeration. Type Parameters Name Description T The type of the enumeration."
  },
  "api/X10D.Core.Extensions.html": {
    "href": "api/X10D.Core.Extensions.html",
    "title": "Class Extensions | X10D",
    "keywords": "Class Extensions Extension methods which apply to all types. Inheritance System.Object Extensions Namespace : X10D.Core Assembly : X10D.dll Syntax public static class Extensions : object Methods | Improve this Doc View Source AsArrayValue<T>(T) Returns an array containing the specified value. Declaration public static T[] AsArrayValue<T>(this T value) Parameters Type Name Description T value The value to encapsulate. Returns Type Description T[] An array of type T with length 1, whose only element is value . Type Parameters Name Description T The type of value . | Improve this Doc View Source AsEnumerableValue<T>(T) Returns an enumerable collection containing the specified value. Declaration public static IEnumerable<T> AsEnumerableValue<T>(this T value) Parameters Type Name Description T value The value to encapsulate. Returns Type Description IEnumerable <T> An enumerable collection of type T , whose only element is value . Type Parameters Name Description T The type of value . | Improve this Doc View Source RepeatValue<T>(T, Int32) Returns an enumerable collection containing the current value repeated a specified number of times. Declaration public static IEnumerable<T> RepeatValue<T>(this T value, int count) Parameters Type Name Description T value The value to repeat. System.Int32 count The number of times to repeat value . Returns Type Description IEnumerable <T> An enumerable collection containing value repeated count times. Type Parameters Name Description T The type of value ."
  },
  "api/X10D.Core.html": {
    "href": "api/X10D.Core.html",
    "title": "Namespace X10D.Core | X10D",
    "keywords": "Namespace X10D.Core Classes EnumExtensions Extension methods for langword_csharp_enum types. Extensions Extension methods which apply to all types. NullableExtensions Extension methods for RandomExtensions Extension methods for . SpanExtensions Extension methods for and ."
  },
  "api/X10D.Core.NullableExtensions.html": {
    "href": "api/X10D.Core.NullableExtensions.html",
    "title": "Class NullableExtensions | X10D",
    "keywords": "Class NullableExtensions Extension methods for Inheritance System.Object NullableExtensions Namespace : X10D.Core Assembly : X10D.dll Syntax public static class NullableExtensions : object Methods | Improve this Doc View Source TryGetValue<T>(Nullable<T>, out T) Attempts to get the value of a , and returns a value indicating the success of the operation. Declaration public static bool TryGetValue<T>(this T? value, out T result) where T : struct Parameters Type Name Description System.Nullable <T> value The nullable value. T result When this method returns, contains the result of , if is true ; otherwise, returns the default value for T . Returns Type Description System.Boolean true if the value's is true ; otherwise, false . Type Parameters Name Description T The type of the value."
  },
  "api/X10D.Core.RandomExtensions.html": {
    "href": "api/X10D.Core.RandomExtensions.html",
    "title": "Class RandomExtensions | X10D",
    "keywords": "Class RandomExtensions Extension methods for . Inheritance System.Object RandomExtensions Namespace : X10D.Core Assembly : X10D.dll Syntax public static class RandomExtensions : object Methods | Improve this Doc View Source Next<T>(Random) Returns a random value that defined in a specified enum. Declaration public static T Next<T>(this Random random) where T : struct, Enum Parameters Type Name Description Random random The instance. Returns Type Description T A T value at index n where n = . Type Parameters Name Description T An enum type. | Improve this Doc View Source NextBoolean(Random) Returns either true or false based on the next generation of the current . Declaration public static bool NextBoolean(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description System.Boolean true if the return value from is greater than or equal to 0.5 -or- false otherwise. | Improve this Doc View Source NextByte(Random) Returns a non-negative random integer. Declaration public static byte NextByte(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description System.Byte An 8-bit unsigned integer that is greater than or equal to 0, and less than . | Improve this Doc View Source NextByte(Random, Byte) Returns a non-negative random integer. Declaration public static byte NextByte(this Random random, byte maxValue) Parameters Type Name Description Random random The instance. System.Byte maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0. Returns Type Description System.Byte An 8-bit unsigned integer that is greater than or equal to 0, and less than maxValue ; that is, the range of return values ordinarily includes 0 but not maxValue . However, if maxValue equals 0, maxValue is returned. | Improve this Doc View Source NextByte(Random, Byte, Byte) Returns a non-negative random integer. Declaration public static byte NextByte(this Random random, byte minValue, byte maxValue) Parameters Type Name Description Random random The instance. System.Byte minValue The inclusive lower bound of the random number to be generated. System.Byte maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to minValue . Returns Type Description System.Byte An 8-bit unsigned integer greater than or equal to minValue and less than maxValue ; that is, the range of return values includes minValue but not maxValue . If minValue equals maxValue , minValue is returned. | Improve this Doc View Source NextDouble(Random, Double) Returns a non-negative random double-precision floating point number that is less than the specified maximum. Declaration public static double NextDouble(this Random random, double maxValue) Parameters Type Name Description Random random The instance. System.Double maxValue The exclusive upper bound of the random number returned. This value must be greater than or equal to 0. Returns Type Description System.Double A random double-precision floating point number that is greater than or equal to 0, and less than maxValue . | Improve this Doc View Source NextDouble(Random, Double, Double) Returns a random double-precision floating point number that is within a specified range. Declaration public static double NextDouble(this Random random, double minValue, double maxValue) Parameters Type Name Description Random random The instance. System.Double minValue The inclusive lower bound of the random number returned. System.Double maxValue The exclusive upper bound of the random number returned. This value must be greater than or equal to minValue . Returns Type Description System.Double A random double-precision floating point number between minValue and maxValue . | Improve this Doc View Source NextFrom<T>(Random, IEnumerable<T>) Returns a random element from source using the instance. Declaration public static T NextFrom<T>(this Random random, IEnumerable<T> source) Parameters Type Name Description Random random The instance. IEnumerable <T> source The source collection from which to draw. Returns Type Description T A random element of type T from source . Type Parameters Name Description T The element type. Examples var list = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; var random = new Random(); var number = random.NextFrom(list); | Improve this Doc View Source NextFrom<T>(Random, ReadOnlySpan<T>) Returns a random element from the specified readonly span of elements using the current instance. Declaration public static T NextFrom<T>(this Random random, ReadOnlySpan<T> source) Parameters Type Name Description Random random The instance. ReadOnlySpan <T> source The readonly span of elements from which to draw. Returns Type Description T A random element of type T from source . Type Parameters Name Description T The element type. Examples Span<int> span = stackalloc span[5]; // populate the span ... var random = new Random(); var number = random.NextFrom(span.AsReadOnly()); | Improve this Doc View Source NextFrom<T>(Random, Span<T>) Returns a random element from the specified span of elements using the current instance. Declaration public static T NextFrom<T>(this Random random, Span<T> source) Parameters Type Name Description Random random The instance. Span <T> source The span of elements from which to draw. Returns Type Description T A random element of type T from source . Type Parameters Name Description T The element type. Examples Span<int> span = stackalloc span[5]; // populate the span ... var random = new Random(); var number = random.NextFrom(span); | Improve this Doc View Source NextInt16(Random) Returns a non-negative random integer. Declaration public static short NextInt16(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description System.Int16 An 16-bit signed integer that is greater than or equal to 0, and less than . | Improve this Doc View Source NextInt16(Random, Int16) Returns a non-negative random integer that is less than the specified maximum. Declaration public static short NextInt16(this Random random, short maxValue) Parameters Type Name Description Random random The instance. System.Int16 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0. Returns Type Description System.Int16 A 16-bit signed integer that is greater than or equal to 0, and less than maxValue ; that is, the range of return values ordinarily includes 0 but not maxValue . However, if maxValue equals 0, maxValue is returned. | Improve this Doc View Source NextInt16(Random, Int16, Int16) Returns a random integer that is within a specified range. Declaration public static short NextInt16(this Random random, short minValue, short maxValue) Parameters Type Name Description Random random The instance. System.Int16 minValue The inclusive lower bound of the random number to be generated. System.Int16 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to minValue . Returns Type Description System.Int16 An 8-bit unsigned integer greater than or equal to minValue and less than maxValue ; that is, the range of return values includes minValue but not maxValue . If minValue equals maxValue , minValue is returned. | Improve this Doc View Source NextSingle(Random) Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0. Declaration public static float NextSingle(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description System.Single A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0. | Improve this Doc View Source NextSingle(Random, Single) Returns a non-negative random single-precision floating point number that is less than the specified maximum. Declaration public static float NextSingle(this Random random, float maxValue) Parameters Type Name Description Random random The instance. System.Single maxValue The exclusive upper bound of the random number returned. This value must be greater than or equal to 0. Returns Type Description System.Single A random single-precision floating point number that is greater than or equal to 0, and less than maxValue . | Improve this Doc View Source NextSingle(Random, Single, Single) Returns a random single-precision floating point number that is within a specified range. Declaration public static float NextSingle(this Random random, float minValue, float maxValue) Parameters Type Name Description Random random The instance. System.Single minValue The inclusive lower bound of the random number returned. System.Single maxValue The exclusive upper bound of the random number returned. This value must be greater than or equal to minValue . Returns Type Description System.Single A random single-precision floating point number between minValue and maxValue . | Improve this Doc View Source NextString(Random, IReadOnlyList<Char>, Int32) Returns a new string of a specified length which is composed of specified characters. Declaration public static string NextString(this Random random, IReadOnlyList<char> source, int length) Parameters Type Name Description Random random The instance. IReadOnlyList < System.Char > source The source collection of characters to poll. System.Int32 length The length of the new string to generate. Returns Type Description System.String A whose length is equal to that of length , composed of characters specified by the characters in source ."
  },
  "api/X10D.Core.SpanExtensions.html": {
    "href": "api/X10D.Core.SpanExtensions.html",
    "title": "Class SpanExtensions | X10D",
    "keywords": "Class SpanExtensions Extension methods for and . Inheritance System.Object SpanExtensions Namespace : X10D.Core Assembly : X10D.dll Syntax public static class SpanExtensions : object Methods | Improve this Doc View Source Contains<T>(ReadOnlySpan<T>, T) Returns a value indicating whether a specific enumeration value is contained with the current readonly span of elements. Declaration public static bool Contains<T>(this ReadOnlySpan<T> span, T value) where T : struct, Enum Parameters Type Name Description ReadOnlySpan <T> span The readonly span of elements. T value The value to search for. Returns Type Description System.Boolean true if value is contained with span ; otherwise, false . Type Parameters Name Description T The type of the elements in span . | Improve this Doc View Source Contains<T>(Span<T>, T) Returns a value indicating whether a specific enumeration value is contained with the current span of elements. Declaration public static bool Contains<T>(this Span<T> span, T value) where T : struct, Enum Parameters Type Name Description Span <T> span The span of elements. T value The value to search for. Returns Type Description System.Boolean true if value is contained with span ; otherwise, false . Type Parameters Name Description T The type of the elements in span . | Improve this Doc View Source PackByte(ReadOnlySpan<Boolean>) Packs a of booleans into a . Declaration public static byte PackByte(this ReadOnlySpan<bool> source) Parameters Type Name Description ReadOnlySpan < System.Boolean > source The span of booleans to pack. Returns Type Description System.Byte An 8-bit unsigned integer containing the packed booleans. | Improve this Doc View Source PackByte(Span<Boolean>) Packs a of booleans into a . Declaration public static byte PackByte(this Span<bool> source) Parameters Type Name Description Span < System.Boolean > source The span of booleans to pack. Returns Type Description System.Byte An 8-bit unsigned integer containing the packed booleans. | Improve this Doc View Source PackInt16(ReadOnlySpan<Boolean>) Packs a of booleans into a . Declaration public static short PackInt16(this ReadOnlySpan<bool> source) Parameters Type Name Description ReadOnlySpan < System.Boolean > source The span of booleans to pack. Returns Type Description System.Int16 A 16-bit signed integer containing the packed booleans. | Improve this Doc View Source PackInt16(Span<Boolean>) Packs a of booleans into a . Declaration public static short PackInt16(this Span<bool> source) Parameters Type Name Description Span < System.Boolean > source The span of booleans to pack. Returns Type Description System.Int16 A 16-bit signed integer containing the packed booleans. | Improve this Doc View Source PackInt32(ReadOnlySpan<Boolean>) Packs a of booleans into a . Declaration public static int PackInt32(this ReadOnlySpan<bool> source) Parameters Type Name Description ReadOnlySpan < System.Boolean > source The span of booleans to pack. Returns Type Description System.Int32 A 32-bit signed integer containing the packed booleans. | Improve this Doc View Source PackInt32(Span<Boolean>) Packs a of booleans into a . Declaration public static int PackInt32(this Span<bool> source) Parameters Type Name Description Span < System.Boolean > source The span of booleans to pack. Returns Type Description System.Int32 A 32-bit signed integer containing the packed booleans. | Improve this Doc View Source PackInt64(ReadOnlySpan<Boolean>) Packs a of booleans into a . Declaration public static long PackInt64(this ReadOnlySpan<bool> source) Parameters Type Name Description ReadOnlySpan < System.Boolean > source The span of booleans to pack. Returns Type Description System.Int64 A 64-bit signed integer containing the packed booleans. | Improve this Doc View Source PackInt64(Span<Boolean>) Packs a of booleans into a . Declaration public static long PackInt64(this Span<bool> source) Parameters Type Name Description Span < System.Boolean > source The span of booleans to pack. Returns Type Description System.Int64 A 64-bit signed integer containing the packed booleans."
  },
  "api/X10D.Drawing.Circle.html": {
    "href": "api/X10D.Drawing.Circle.html",
    "title": "Struct Circle | X10D",
    "keywords": "Struct Circle Represents a circle that is composed of a 32-bit signed integer center point and radius. Implements IEquatable < Circle > IComparable < Circle > IComparable Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct Circle : IEquatable<Circle>, IComparable<Circle>, IComparable Constructors | Improve this Doc View Source Circle(Point, Int32) Initializes a new instance of the Circle struct. Declaration public Circle(Point center, int radius) Parameters Type Name Description Point center The center point of the circle. System.Int32 radius The radius of the circle. | Improve this Doc View Source Circle(Int32, Int32, Int32) Initializes a new instance of the Circle struct. Declaration public Circle(int centerX, int centerY, int radius) Parameters Type Name Description System.Int32 centerX The X coordinate of the center point. System.Int32 centerY The Y coordinate of the center point. System.Int32 radius The radius of the circle. Fields | Improve this Doc View Source Circle The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1. Declaration public static readonly Circle Field Value Type Description Circle | Improve this Doc View Source Circle The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1. Declaration public static readonly Circle Field Value Type Description Circle | Improve this Doc View Source Empty The empty circle. That is, a circle whose center point is (0, 0) and whose radius is 0. Declaration public static readonly Circle Empty Field Value Type Description Circle | Improve this Doc View Source Unit The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1. Declaration public static readonly Circle Unit Field Value Type Description Circle Properties | Improve this Doc View Source Area Gets the area of the circle. Declaration public float Area { get; } Property Value Type Description System.Single The area of the circle, calculated as πr² . | Improve this Doc View Source Center Gets the center point of the circle. Declaration public Point Center { get; } Property Value Type Description Point The center point. | Improve this Doc View Source Circumference Gets the circumference of the circle. Declaration public float Circumference { get; } Property Value Type Description System.Single The circumference of the circle, calculated as 2πr . | Improve this Doc View Source Diameter Gets the diameter of the circle. Declaration public int Diameter { get; } Property Value Type Description System.Int32 The diameter. This is always twice the Radius . | Improve this Doc View Source Radius Gets the radius of the circle. Declaration public int Radius { get; } Property Value Type Description System.Int32 The radius. Methods | Improve this Doc View Source CompareTo(Nullable<Object>) Compares this instance to another Circle . Declaration public int CompareTo(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The other object. Returns Type Description System.Int32 A signed number indicating the relative values of this instance and obj . Return value Meaning Less than zero The Radius of this instance is less than that of obj . Zero This instance is equal to obj , or the Radius of both this instance and obj are not a number ( ), , or . Greater than zero The Radius of this instance is greater than that of obj , or obj is null . Remarks Comparison only takes into consideration the Radius . | Improve this Doc View Source CompareTo(Circle) Compares this instance to another Circle . Declaration public int CompareTo(Circle other) Parameters Type Name Description Circle other The other circle. Returns Type Description System.Int32 A signed number indicating the relative values of this instance and other . Return value Meaning Less than zero The Radius of this instance is less than that of other . Zero This instance is equal to other , or the Radius of both this instance and other are not a number ( ), , or . Greater than zero The Radius of this instance is greater than that of other . Remarks Comparison only takes into consideration the Radius . | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Circle) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Circle other) Parameters Type Name Description Circle other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromCircleF(CircleF) Converts a Circle to a CircleF . Declaration public static Circle FromCircleF(CircleF circle) Parameters Type Name Description CircleF circle The circle to convert. Returns Type Description Circle The converted circle. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Circle, Circle) Returns a value indicating whether two instances of Circle are equal. Declaration public static bool operator ==(Circle left, Circle right) Parameters Type Name Description Circle left The first instance. Circle right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Explicit(CircleF to Circle) Explicitly converts a Circle to a CircleF . Declaration public static explicit operator Circle(CircleF circle) Parameters Type Name Description CircleF circle The circle to convert. Returns Type Description Circle The converted circle. | Improve this Doc View Source GreaterThan(Circle, Circle) Returns a value indicating whether the radius of one circle is greater than to that of another. Declaration public static bool operator>(Circle left, Circle right) Parameters Type Name Description Circle left The first instance. Circle right The second instance. Returns Type Description System.Boolean true if the Radius of left is greater than that of right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(Circle, Circle) Returns a value indicating whether the radius of one circle is greater than or equal to that of another. Declaration public static bool operator >=(Circle left, Circle right) Parameters Type Name Description Circle left The first instance. Circle right The second instance. Returns Type Description System.Boolean true if the Radius of left is greater than or equal to that of right ; otherwise, false . | Improve this Doc View Source Inequality(Circle, Circle) Returns a value indicating whether two instances of Circle are not equal. Declaration public static bool operator !=(Circle left, Circle right) Parameters Type Name Description Circle left The first instance. Circle right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . | Improve this Doc View Source LessThan(Circle, Circle) Returns a value indicating whether the radius of one circle is less than that of another. Declaration public static bool operator <(Circle left, Circle right) Parameters Type Name Description Circle left The first instance. Circle right The second instance. Returns Type Description System.Boolean true if the Radius of left is less than that of right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(Circle, Circle) Returns a value indicating whether the radius of one circle is less than or equal to that of another. Declaration public static bool operator <=(Circle left, Circle right) Parameters Type Name Description Circle left The first instance. Circle right The second instance. Returns Type Description System.Boolean true if the Radius of left is less than or equal to that of right ; otherwise, false . Implements IEquatable<> IComparable<> IComparable Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.CircleF.html": {
    "href": "api/X10D.Drawing.CircleF.html",
    "title": "Struct CircleF | X10D",
    "keywords": "Struct CircleF Represents a circle that is composed of a single-precision floating-point center point and radius. Implements IEquatable < CircleF > IComparable < CircleF > IComparable Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct CircleF : IEquatable<CircleF>, IComparable<CircleF>, IComparable Constructors | Improve this Doc View Source CircleF(PointF, Single) Initializes a new instance of the CircleF struct. Declaration public CircleF(PointF center, float radius) Parameters Type Name Description PointF center The center point of the circle. System.Single radius The radius of the circle. | Improve this Doc View Source CircleF(Single, Single, Single) Initializes a new instance of the CircleF struct. Declaration public CircleF(float centerX, float centerY, float radius) Parameters Type Name Description System.Single centerX The X coordinate of the center point. System.Single centerY The Y coordinate of the center point. System.Single radius The radius of the circle. | Improve this Doc View Source CircleF(Vector2, Single) Initializes a new instance of the CircleF struct. Declaration public CircleF(Vector2 center, float radius) Parameters Type Name Description Vector2 center The center point of the circle. System.Single radius The radius of the circle. Fields | Improve this Doc View Source CircleF The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1. Declaration public static readonly CircleF Field Value Type Description CircleF | Improve this Doc View Source CircleF The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1. Declaration public static readonly CircleF Field Value Type Description CircleF | Improve this Doc View Source Empty The empty circle. That is, a circle whose center point is (0, 0) and whose radius is 0. Declaration public static readonly CircleF Empty Field Value Type Description CircleF | Improve this Doc View Source Unit The unit circle. That is, a circle whose center point is (0, 0) and whose radius is 1. Declaration public static readonly CircleF Unit Field Value Type Description CircleF Properties | Improve this Doc View Source Area Gets the area of the circle. Declaration public float Area { get; } Property Value Type Description System.Single The area of the circle, calculated as πr² . | Improve this Doc View Source Center Gets the center point of the circle. Declaration public PointF Center { get; } Property Value Type Description PointF The center point. | Improve this Doc View Source Circumference Gets the circumference of the circle. Declaration public float Circumference { get; } Property Value Type Description System.Single The circumference of the circle, calculated as 2πr . | Improve this Doc View Source Diameter Gets the diameter of the circle. Declaration public float Diameter { get; } Property Value Type Description System.Single The diameter. This is always twice the Radius . | Improve this Doc View Source Radius Gets the radius of the circle. Declaration public float Radius { get; } Property Value Type Description System.Single The radius. Methods | Improve this Doc View Source CompareTo(Nullable<Object>) Compares this instance to another CircleF . Declaration public int CompareTo(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The other object. Returns Type Description System.Int32 A signed number indicating the relative values of this instance and obj . Return value Meaning Less than zero The Radius of this instance is less than that of obj . Zero This instance is equal to obj , or the Radius of both this instance and obj are not a number ( ), , or . Greater than zero The Radius of this instance is greater than that of obj , or obj is null . Remarks Comparison only takes into consideration the Radius . | Improve this Doc View Source CompareTo(CircleF) Compares this instance to another CircleF . Declaration public int CompareTo(CircleF other) Parameters Type Name Description CircleF other The other circle. Returns Type Description System.Int32 A signed number indicating the relative values of this instance and other . Return value Meaning Less than zero The Radius of this instance is less than that of other . Zero This instance is equal to other , or the Radius of both this instance and other are not a number ( ), , or . Greater than zero The Radius of this instance is greater than that of other . Remarks Comparison only takes into consideration the Radius . | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(CircleF) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(CircleF other) Parameters Type Name Description CircleF other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromCircle(Circle) Converts a Circle to a CircleF . Declaration public static CircleF FromCircle(Circle circle) Parameters Type Name Description Circle circle The circle to convert. Returns Type Description CircleF The converted circle. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(CircleF, CircleF) Returns a value indicating whether two instances of CircleF are equal. Declaration public static bool operator ==(CircleF left, CircleF right) Parameters Type Name Description CircleF left The first instance. CircleF right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source GreaterThan(CircleF, CircleF) Returns a value indicating whether the radius of one circle is greater than to that of another. Declaration public static bool operator>(CircleF left, CircleF right) Parameters Type Name Description CircleF left The first instance. CircleF right The second instance. Returns Type Description System.Boolean true if the Radius of left is greater than that of right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(CircleF, CircleF) Returns a value indicating whether the radius of one circle is greater than or equal to that of another. Declaration public static bool operator >=(CircleF left, CircleF right) Parameters Type Name Description CircleF left The first instance. CircleF right The second instance. Returns Type Description System.Boolean true if the Radius of left is greater than or equal to that of right ; otherwise, false . | Improve this Doc View Source Implicit(Circle to CircleF) Implicitly converts a Circle to a CircleF . Declaration public static implicit operator CircleF(Circle circle) Parameters Type Name Description Circle circle The circle to convert. Returns Type Description CircleF The converted circle. | Improve this Doc View Source Inequality(CircleF, CircleF) Returns a value indicating whether two instances of CircleF are not equal. Declaration public static bool operator !=(CircleF left, CircleF right) Parameters Type Name Description CircleF left The first instance. CircleF right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . | Improve this Doc View Source LessThan(CircleF, CircleF) Returns a value indicating whether the radius of one circle is less than that of another. Declaration public static bool operator <(CircleF left, CircleF right) Parameters Type Name Description CircleF left The first instance. CircleF right The second instance. Returns Type Description System.Boolean true if the Radius of left is less than that of right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(CircleF, CircleF) Returns a value indicating whether the radius of one circle is less than or equal to that of another. Declaration public static bool operator <=(CircleF left, CircleF right) Parameters Type Name Description CircleF left The first instance. CircleF right The second instance. Returns Type Description System.Boolean true if the Radius of left is less than or equal to that of right ; otherwise, false . Implements IEquatable<> IComparable<> IComparable Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.ColorExtensions.html": {
    "href": "api/X10D.Drawing.ColorExtensions.html",
    "title": "Class ColorExtensions | X10D",
    "keywords": "Class ColorExtensions Drawing-related extensions for . Inheritance System.Object ColorExtensions Namespace : X10D.Drawing Assembly : X10D.dll Syntax public static class ColorExtensions : object Methods | Improve this Doc View Source Deconstruct(Color, out Byte, out Byte, out Byte) Deconstructs the current color into its RGB components. Declaration public static void Deconstruct(this Color color, out byte r, out byte g, out byte b) Parameters Type Name Description Color color The source color. System.Byte r When this method returns, contains the component of color . System.Byte g When this method returns, contains the component of color . System.Byte b When this method returns, contains the component of color . | Improve this Doc View Source Deconstruct(Color, out Byte, out Byte, out Byte, out Byte) Deconstructs the current color into its ARGB components. Declaration public static void Deconstruct(this Color color, out byte a, out byte r, out byte g, out byte b) Parameters Type Name Description Color color The source color. System.Byte a When this method returns, contains the component of color . System.Byte r When this method returns, contains the component of color . System.Byte g When this method returns, contains the component of color . System.Byte b When this method returns, contains the component of color . | Improve this Doc View Source GetClosestConsoleColor(Color) Returns a which most closely resembles the current color. Declaration public static ConsoleColor GetClosestConsoleColor(this Color color) Parameters Type Name Description Color color The source color. Returns Type Description ConsoleColor The closest . | Improve this Doc View Source Inverted(Color) Returns a new with the red, green, and blue components inverted. Alpha is not affected. Declaration public static Color Inverted(this Color color) Parameters Type Name Description Color color The color to invert. Returns Type Description Color The inverted color. | Improve this Doc View Source WithA(Color, Int32) Returns a vector whose red, green, and blue components are the same as the specified color, and whose alpha component is a new value. Declaration public static Color WithA(this Color color, int a) Parameters Type Name Description Color color The color to copy. System.Int32 a The new alpha component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is a . | Improve this Doc View Source WithB(Color, Int32) Returns a vector whose red, green, and alpha components are the same as the specified color, and whose blue component is a new value. Declaration public static Color WithB(this Color color, int b) Parameters Type Name Description Color color The color to copy. System.Int32 b The new blue component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is b . | Improve this Doc View Source WithG(Color, Int32) Returns a vector whose red, blue, and alpha components are the same as the specified color, and whose green component is a new value. Declaration public static Color WithG(this Color color, int g) Parameters Type Name Description Color color The color to copy. System.Int32 g The new green component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is g . | Improve this Doc View Source WithR(Color, Int32) Returns a vector whose green, blue, and alpha components are the same as the specified color, and whose red component is a new value. Declaration public static Color WithR(this Color color, int r) Parameters Type Name Description Color color The color to copy. System.Int32 r The new red component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is r ."
  },
  "api/X10D.Drawing.Cuboid.html": {
    "href": "api/X10D.Drawing.Cuboid.html",
    "title": "Struct Cuboid | X10D",
    "keywords": "Struct Cuboid Represents a cuboid in 3D space, which uses single-precision floating-point numbers for its coordinates. Implements IEquatable < Cuboid > Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct Cuboid : IEquatable<Cuboid> Constructors | Improve this Doc View Source Cuboid(Single, Single, Single, Single, Single, Single) Initializes a new instance of the Cuboid struct. Declaration public Cuboid(float centerX, float centerY, float centerZ, float width, float height, float depth) Parameters Type Name Description System.Single centerX The center X coordinate. System.Single centerY The center Y coordinate. System.Single centerZ The center Z coordinate. System.Single width The width. System.Single height The height. System.Single depth The depth. | Improve this Doc View Source Cuboid(Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the Cuboid struct. Declaration public Cuboid(float centerX, float centerY, float centerZ, float width, float height, float depth, float yaw, float pitch, float roll) Parameters Type Name Description System.Single centerX The center X coordinate. System.Single centerY The center Y coordinate. System.Single centerZ The center Z coordinate. System.Single width The width. System.Single height The height. System.Single depth The depth. System.Single yaw The yaw. System.Single pitch The pitch. System.Single roll The roll. | Improve this Doc View Source Cuboid(Vector3, Vector3) Initializes a new instance of the Cuboid struct. Declaration public Cuboid(in Vector3 center, in Vector3 size) Parameters Type Name Description Vector3 center The center point. Vector3 size The size. | Improve this Doc View Source Cuboid(Vector3, Vector3, Quaternion) Initializes a new instance of the Cuboid struct. Declaration public Cuboid(in Vector3 center, in Vector3 size, in Quaternion orientation) Parameters Type Name Description Vector3 center The center point. Vector3 size The size. Quaternion orientation The orientation of the cuboid. | Improve this Doc View Source Cuboid(Vector3, Vector3, Vector3) Initializes a new instance of the Cuboid struct. Declaration public Cuboid(in Vector3 center, in Vector3 size, in Vector3 orientation) Parameters Type Name Description Vector3 center The center point. Vector3 size The size. Vector3 orientation The orientation of the cuboid. Fields | Improve this Doc View Source Cuboid A cube. That is, a cuboid whose size is the same in all three dimensions. Declaration public static readonly Cuboid Field Value Type Description Cuboid A cube with the size (1, 1, 1). | Improve this Doc View Source Cuboid A cube. That is, a cuboid whose size is the same in all three dimensions. Declaration public static readonly Cuboid Field Value Type Description Cuboid A cube with the size (1, 1, 1). | Improve this Doc View Source Cuboid A cube. That is, a cuboid whose size is the same in all three dimensions. Declaration public static readonly Cuboid Field Value Type Description Cuboid A cube with the size (1, 1, 1). | Improve this Doc View Source Cuboid A cube. That is, a cuboid whose size is the same in all three dimensions. Declaration public static readonly Cuboid Field Value Type Description Cuboid A cube with the size (1, 1, 1). | Improve this Doc View Source Cuboid A cube. That is, a cuboid whose size is the same in all three dimensions. Declaration public static readonly Cuboid Field Value Type Description Cuboid A cube with the size (1, 1, 1). | Improve this Doc View Source Cube A cube. That is, a cuboid whose size is the same in all three dimensions. Declaration public static readonly Cuboid Cube Field Value Type Description Cuboid A cube with the size (1, 1, 1). | Improve this Doc View Source Empty The empty cuboid. That is, a cuboid whose size is zero. Declaration public static readonly Cuboid Empty Field Value Type Description Cuboid Properties | Improve this Doc View Source BackBottomLeft Gets the back-bottom-right corner of the box, in world space. Declaration public Vector3 BackBottomLeft { get; } Property Value Type Description Vector3 The back-bottom-right corner. | Improve this Doc View Source BackBottomRight Gets the back-bottom-right corner of the box, in world space. Declaration public Vector3 BackBottomRight { get; } Property Value Type Description Vector3 The back-bottom-right corner. | Improve this Doc View Source BackTopLeft Gets the back-bottom-left corner of the box, in world space. Declaration public Vector3 BackTopLeft { get; } Property Value Type Description Vector3 The back-bottom-left corner. | Improve this Doc View Source BackTopRight Gets the back-bottom-right corner of the box, in world space. Declaration public Vector3 BackTopRight { get; } Property Value Type Description Vector3 The back-bottom-right corner. | Improve this Doc View Source Center Gets the center point of the cuboid. Declaration public Vector3 Center { get; } Property Value Type Description Vector3 The center point. | Improve this Doc View Source FrontBottomLeft Gets the front-bottom-left corner of the box, in world space. Declaration public Vector3 FrontBottomLeft { get; } Property Value Type Description Vector3 The front-bottom-left corner. | Improve this Doc View Source FrontBottomRight Gets the front-bottom-right corner of the box, in world space. Declaration public Vector3 FrontBottomRight { get; } Property Value Type Description Vector3 The front-bottom-right corner. | Improve this Doc View Source FrontTopLeft Gets the front-top-left corner of the box, in world space. Declaration public Vector3 FrontTopLeft { get; } Property Value Type Description Vector3 The front-top-left corner. | Improve this Doc View Source FrontTopRight Gets the front-top-right corner of the box, in world space. Declaration public Vector3 FrontTopRight { get; } Property Value Type Description Vector3 The front-top-right corner. | Improve this Doc View Source LocalBackBottomLeft Gets the back-bottom-left corner of the box, in local space. Declaration public Vector3 LocalBackBottomLeft { get; } Property Value Type Description Vector3 The back-bottom-left corner. | Improve this Doc View Source LocalBackBottomRight Gets the back-bottom-right corner of the box, in local space. Declaration public Vector3 LocalBackBottomRight { get; } Property Value Type Description Vector3 The back-bottom-right corner. | Improve this Doc View Source LocalBackTopLeft Gets the back-top-left corner of the box, in local space. Declaration public Vector3 LocalBackTopLeft { get; } Property Value Type Description Vector3 The back-top-left corner. | Improve this Doc View Source LocalBackTopRight Gets the back-top-right corner of the box, in local space. Declaration public Vector3 LocalBackTopRight { get; } Property Value Type Description Vector3 The back-top-right corner. | Improve this Doc View Source LocalFrontBottomLeft Gets the front-bottom-left corner of the box, in local space. Declaration public Vector3 LocalFrontBottomLeft { get; } Property Value Type Description Vector3 The front-bottom-left corner. | Improve this Doc View Source LocalFrontBottomRight Gets the front-bottom-right corner of the box, in local space. Declaration public Vector3 LocalFrontBottomRight { get; } Property Value Type Description Vector3 The front-bottom-right corner. | Improve this Doc View Source LocalFrontTopLeft Gets the front-top-left corner of the box, in local space. Declaration public Vector3 LocalFrontTopLeft { get; } Property Value Type Description Vector3 The front-top-left corner. | Improve this Doc View Source LocalFrontTopRight Gets the front-top-right corner of the box, in local space. Declaration public Vector3 LocalFrontTopRight { get; } Property Value Type Description Vector3 The front-top-right corner. | Improve this Doc View Source Orientation Gets the orientation of this cuboid. Declaration public Quaternion Orientation { get; } Property Value Type Description Quaternion The orientation. | Improve this Doc View Source Size Gets the size of the cuboid. Declaration public Vector3 Size { get; } Property Value Type Description Vector3 The size. | Improve this Doc View Source Volume Gets the volume of this cuboid. Declaration public float Volume { get; } Property Value Type Description System.Single The volume. Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Cuboid) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Cuboid other) Parameters Type Name Description Cuboid other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Cuboid, Cuboid) Returns a value indicating whether two instances of Cuboid are not equal. Declaration public static bool operator ==(Cuboid left, Cuboid right) Parameters Type Name Description Cuboid left The first instance. Cuboid right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . | Improve this Doc View Source Inequality(Cuboid, Cuboid) Returns a value indicating whether two instances of Cuboid are not equal. Declaration public static bool operator !=(Cuboid left, Cuboid right) Parameters Type Name Description Cuboid left The first instance. Cuboid right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . Implements IEquatable<> Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.Ellipse.html": {
    "href": "api/X10D.Drawing.Ellipse.html",
    "title": "Struct Ellipse | X10D",
    "keywords": "Struct Ellipse Represents an ellipse that is composed of a 32-bit signed integer center point and radius. Implements IEquatable < Ellipse > Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct Ellipse : IEquatable<Ellipse> Constructors | Improve this Doc View Source Ellipse(Point, Size) Initializes a new instance of the Ellipse struct. Declaration public Ellipse(Point center, Size radius) Parameters Type Name Description Point center The center point of the ellipse. Size radius The radius of the ellipse. | Improve this Doc View Source Ellipse(Int32, Int32, Int32, Int32) Initializes a new instance of the Ellipse struct. Declaration public Ellipse(int centerX, int centerY, int horizontalRadius, int verticalRadius) Parameters Type Name Description System.Int32 centerX The X coordinate of the center point. System.Int32 centerY The Y coordinate of the center point. System.Int32 horizontalRadius The horizontal radius of the ellipse. System.Int32 verticalRadius The vertical radius of the ellipse. Fields | Improve this Doc View Source Ellipse The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly Ellipse Field Value Type Description Ellipse | Improve this Doc View Source Ellipse The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly Ellipse Field Value Type Description Ellipse | Improve this Doc View Source Ellipse The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly Ellipse Field Value Type Description Ellipse | Improve this Doc View Source Empty The empty ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 0. Declaration public static readonly Ellipse Empty Field Value Type Description Ellipse | Improve this Doc View Source Unit The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly Ellipse Unit Field Value Type Description Ellipse Properties | Improve this Doc View Source ApproximateCircumference Gets the approximate circumference of the ellipse. Declaration public float ApproximateCircumference { get; } Property Value Type Description System.Single The approximate circumference of the ellipse, calculated as π(a+b)(3([(a-b)²]/(a+b)²(sqrt(-3(((a-b)²)/(a+b)²)+4+10))+1) . | Improve this Doc View Source Area Gets the area of the ellipse. Declaration public float Area { get; } Property Value Type Description System.Single The area of the ellipse, calculated as πab . | Improve this Doc View Source Center Gets the center point of the ellipse. Declaration public Point Center { get; } Property Value Type Description Point The center point. | Improve this Doc View Source HorizontalRadius Gets the horizontal radius of the ellipse. Declaration public int HorizontalRadius { get; } Property Value Type Description System.Int32 The horizontal radius. | Improve this Doc View Source Radius Gets the radius of the ellipse. Declaration public Size Radius { get; } Property Value Type Description Size The radius. | Improve this Doc View Source VerticalRadius Gets the vertical radius of the ellipse. Declaration public int VerticalRadius { get; } Property Value Type Description System.Int32 The vertical radius. Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Ellipse) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Ellipse other) Parameters Type Name Description Ellipse other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromCircle(Circle) Converts a Circle to an Ellipse . Declaration public static Ellipse FromCircle(in Circle circle) Parameters Type Name Description Circle circle The circle to convert. Returns Type Description Ellipse The converted ellipse. | Improve this Doc View Source FromEllipseF(EllipseF) Converts an EllipseF to an Ellipse . Declaration public static Ellipse FromEllipseF(in EllipseF ellipse) Parameters Type Name Description EllipseF ellipse The ellipse to convert. Returns Type Description Ellipse The converted ellipse. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Ellipse, Ellipse) Returns a value indicating whether two instances of Ellipse are equal. Declaration public static bool operator ==(in Ellipse left, in Ellipse right) Parameters Type Name Description Ellipse left The first instance. Ellipse right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Explicit(EllipseF to Ellipse) Explicitly converts an EllipseF to an Ellipse . Declaration public static explicit operator Ellipse(in EllipseF ellipse) Parameters Type Name Description EllipseF ellipse The ellipse to convert. Returns Type Description Ellipse The converted ellipse. | Improve this Doc View Source Implicit(Circle to Ellipse) Implicitly converts a Circle to an Ellipse . Declaration public static implicit operator Ellipse(in Circle circle) Parameters Type Name Description Circle circle The circle to convert. Returns Type Description Ellipse The converted ellipse. | Improve this Doc View Source Inequality(Ellipse, Ellipse) Returns a value indicating whether two instances of Ellipse are not equal. Declaration public static bool operator !=(in Ellipse left, in Ellipse right) Parameters Type Name Description Ellipse left The first instance. Ellipse right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . Implements IEquatable<> Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.EllipseF.html": {
    "href": "api/X10D.Drawing.EllipseF.html",
    "title": "Struct EllipseF | X10D",
    "keywords": "Struct EllipseF Represents an ellipse that is composed of a single-precision floating-point center point and radius. Implements IEquatable < EllipseF > Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct EllipseF : IEquatable<EllipseF> Constructors | Improve this Doc View Source EllipseF(PointF, SizeF) Initializes a new instance of the Ellipse struct. Declaration public EllipseF(PointF center, SizeF radius) Parameters Type Name Description PointF center The center point of the ellipse. SizeF radius The radius of the ellipse. | Improve this Doc View Source EllipseF(PointF, Vector2) Initializes a new instance of the Ellipse struct. Declaration public EllipseF(PointF center, Vector2 radius) Parameters Type Name Description PointF center The center point of the ellipse. Vector2 radius The radius of the ellipse. | Improve this Doc View Source EllipseF(Single, Single, Single, Single) Initializes a new instance of the EllipseF struct. Declaration public EllipseF(float centerX, float centerY, float horizontalRadius, float verticalRadius) Parameters Type Name Description System.Single centerX The X coordinate of the center point. System.Single centerY The Y coordinate of the center point. System.Single horizontalRadius The horizontal radius of the ellipse. System.Single verticalRadius The vertical radius of the ellipse. | Improve this Doc View Source EllipseF(Vector2, Vector2) Initializes a new instance of the Ellipse struct. Declaration public EllipseF(Vector2 center, Vector2 radius) Parameters Type Name Description Vector2 center The center point of the ellipse. Vector2 radius The radius of the ellipse. Fields | Improve this Doc View Source EllipseF The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly EllipseF Field Value Type Description EllipseF | Improve this Doc View Source EllipseF The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly EllipseF Field Value Type Description EllipseF | Improve this Doc View Source EllipseF The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly EllipseF Field Value Type Description EllipseF | Improve this Doc View Source Empty The empty ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 0. Declaration public static readonly EllipseF Empty Field Value Type Description EllipseF | Improve this Doc View Source Unit The unit ellipse. That is, an ellipse whose center point is (0, 0) and whose two radii are 1. Declaration public static readonly EllipseF Unit Field Value Type Description EllipseF Properties | Improve this Doc View Source ApproximateCircumference Gets the approximate circumference of the ellipse. Declaration public float ApproximateCircumference { get; } Property Value Type Description System.Single The approximate circumference of the ellipse, calculated as π(a+b)(3([(a-b)²]/(a+b)²(sqrt(-3(((a-b)²)/(a+b)²)+4+10))+1) . | Improve this Doc View Source Area Gets the area of the ellipse. Declaration public float Area { get; } Property Value Type Description System.Single The area of the ellipse, calculated as πab . | Improve this Doc View Source Center Gets the center point of the ellipse. Declaration public PointF Center { get; } Property Value Type Description PointF The center point. | Improve this Doc View Source HorizontalRadius Gets the horizontal radius of the ellipse. Declaration public float HorizontalRadius { get; } Property Value Type Description System.Single The horizontal radius. | Improve this Doc View Source Radius Gets the radius of the ellipse. Declaration public SizeF Radius { get; } Property Value Type Description SizeF The radius. | Improve this Doc View Source VerticalRadius Gets the vertical radius of the ellipse. Declaration public float VerticalRadius { get; } Property Value Type Description System.Single The vertical radius. Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(EllipseF) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(EllipseF other) Parameters Type Name Description EllipseF other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromCircle(Circle) Converts a Circle to an EllipseF . Declaration public static EllipseF FromCircle(in Circle circle) Parameters Type Name Description Circle circle The circle to convert. Returns Type Description EllipseF The converted ellipse. | Improve this Doc View Source FromCircleF(CircleF) Converts a CircleF to an EllipseF . Declaration public static EllipseF FromCircleF(in CircleF circle) Parameters Type Name Description CircleF circle The circle to convert. Returns Type Description EllipseF The converted ellipse. | Improve this Doc View Source FromEllipse(Ellipse) Converts an Ellipse to an EllipseF . Declaration public static EllipseF FromEllipse(in Ellipse ellipse) Parameters Type Name Description Ellipse ellipse The ellipse to convert. Returns Type Description EllipseF The converted ellipse. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(EllipseF, EllipseF) Returns a value indicating whether two instances of EllipseF are equal. Declaration public static bool operator ==(in EllipseF left, in EllipseF right) Parameters Type Name Description EllipseF left The first instance. EllipseF right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Implicit(Circle to EllipseF) Implicitly converts a Circle to an EllipseF . Declaration public static implicit operator EllipseF(in Circle circle) Parameters Type Name Description Circle circle The circle to convert. Returns Type Description EllipseF The converted ellipse. | Improve this Doc View Source Implicit(CircleF to EllipseF) Implicitly converts a CircleF to an EllipseF . Declaration public static implicit operator EllipseF(in CircleF circle) Parameters Type Name Description CircleF circle The circle to convert. Returns Type Description EllipseF The converted ellipse. | Improve this Doc View Source Implicit(Ellipse to EllipseF) Implicitly converts an Ellipse to an EllipseF . Declaration public static implicit operator EllipseF(in Ellipse ellipse) Parameters Type Name Description Ellipse ellipse The ellipse to convert. Returns Type Description EllipseF The converted ellipse. | Improve this Doc View Source Inequality(EllipseF, EllipseF) Returns a value indicating whether two instances of EllipseF are not equal. Declaration public static bool operator !=(in EllipseF left, in EllipseF right) Parameters Type Name Description EllipseF left The first instance. EllipseF right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . Implements IEquatable<> Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.html": {
    "href": "api/X10D.Drawing.html",
    "title": "Namespace X10D.Drawing | X10D",
    "keywords": "Namespace X10D.Drawing Classes ColorExtensions Drawing-related extensions for . PointExtensions Drawing-related extension methods for . PointFExtensions Drawing-related extension methods for . Polygon Represents a 2D polygon composed of 32-bit signed integer vertices. PolygonF Represents a 2D polygon composed of single-precision floating-vertex vertices. Polyhedron Represents a 3D polyhedron composed of single-precision floating-point points. RandomExtensions Extension methods for . SizeExtensions Drawing-related extension methods for . Structs Circle Represents a circle that is composed of a 32-bit signed integer center point and radius. CircleF Represents a circle that is composed of a single-precision floating-point center point and radius. Cuboid Represents a cuboid in 3D space, which uses single-precision floating-point numbers for its coordinates. Ellipse Represents an ellipse that is composed of a 32-bit signed integer center point and radius. EllipseF Represents an ellipse that is composed of a single-precision floating-point center point and radius. Line Represents a line in 2D space that is composed of 32-bit signed integer X and Y coordinates. Line3D Represents a line in 3D space that is composed of 32-bit signed integer X, Y and Z coordinates. LineF Represents a line in 2D space that is composed of single-precision floating-point X and Y coordinates. Sphere Represents a sphere in 3D space, which uses single-precision floating-point numbers for its coordinates."
  },
  "api/X10D.Drawing.Line.html": {
    "href": "api/X10D.Drawing.Line.html",
    "title": "Struct Line | X10D",
    "keywords": "Struct Line Represents a line in 2D space that is composed of 32-bit signed integer X and Y coordinates. Implements IEquatable < Line > IComparable < Line > IComparable Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct Line : IEquatable<Line>, IComparable<Line>, IComparable Constructors | Improve this Doc View Source Line(Point, Point) Initializes a new instance of the Line struct by taking the start and end points. Declaration public Line(Point start, Point end) Parameters Type Name Description Point start The start point. Point end The end point. Fields | Improve this Doc View Source Empty The empty line. That is, a line whose start and end points are at (0, 0). Declaration public static readonly Line Empty Field Value Type Description Line | Improve this Doc View Source One The line whose start point is at (0, 0) and end point is at (1, 1). Declaration public static readonly Line One Field Value Type Description Line | Improve this Doc View Source UnitX The line whose start point is at (0, 0) and end point is at (1, 0). Declaration public static readonly Line UnitX Field Value Type Description Line | Improve this Doc View Source UnitY The line whose start point is at (0, 0) and end point is at (0, 1). Declaration public static readonly Line UnitY Field Value Type Description Line Properties | Improve this Doc View Source End Gets the end point of the line. Declaration public Point End { get; } Property Value Type Description Point The end point. | Improve this Doc View Source Length Gets the length of this line. Declaration public float Length { get; } Property Value Type Description System.Single The length. | Improve this Doc View Source LengthSquared Gets the length of this line, squared. Declaration public float LengthSquared { get; } Property Value Type Description System.Single The squared length. | Improve this Doc View Source Start Gets the start point of the line. Declaration public Point Start { get; } Property Value Type Description Point The start point. Methods | Improve this Doc View Source CompareTo(Nullable<Object>) Compares this instance to another object. Declaration public int CompareTo(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object with with which to compare Returns Type Description System.Int32 A signed number indicating the relative values of this instance and obj . Return value Meaning Less than zero The Length of this instance is less than that of obj . Zero This instance is equal to obj , or the Length of both this instance and obj are not a number ( ), , or . Greater than zero The Length of this instance is greater than that of obj . Remarks Comparison internally measures the LengthSquared property to avoid calls to . obj is not an instance of Line . | Improve this Doc View Source CompareTo(Line) Compares this instance to another Line . Declaration public int CompareTo(Line other) Parameters Type Name Description Line other Returns Type Description System.Int32 A signed number indicating the relative values of this instance and other . Return value Meaning Less than zero The Length of this instance is less than that of other . Zero This instance is equal to other , or the Length of both this instance and other are not a number ( ), , or . Greater than zero The Length of this instance is greater than that of other . Remarks Comparison internally measures the LengthSquared property to avoid calls to . | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Line) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Line other) Parameters Type Name Description Line other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromLine3D(Line3D) Converts a Line3D to a Line . Declaration public static Line FromLine3D(in Line3D line) Parameters Type Name Description Line3D line The line to convert. Returns Type Description Line The converted line. | Improve this Doc View Source FromLineF(LineF) Converts a Line to a LineF . Declaration public static Line FromLineF(in LineF line) Parameters Type Name Description LineF line The line to convert. Returns Type Description Line The converted line. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Line, Line) Returns a value indicating whether two instances of Line are equal. Declaration public static bool operator ==(in Line left, in Line right) Parameters Type Name Description Line left The first instance. Line right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Explicit(Line3D to Line) Explicitly converts a Line3D to a Line . Declaration public static explicit operator Line(in Line3D line) Parameters Type Name Description Line3D line The line to convert. Returns Type Description Line The converted line. | Improve this Doc View Source Explicit(LineF to Line) Explicitly converts a Line to a LineF . Declaration public static explicit operator Line(in LineF line) Parameters Type Name Description LineF line The line to convert. Returns Type Description Line The converted line. | Improve this Doc View Source GreaterThan(Line, Line) Returns a value indicating whether the length of one line is greater than that of another. Declaration public static bool operator>(in Line left, in Line right) Parameters Type Name Description Line left The first instance. Line right The second instance. Returns Type Description System.Boolean true if the Length of left is greater than that of right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(Line, Line) Returns a value indicating whether the length of one line is greater than or equal to that of another. Declaration public static bool operator >=(in Line left, in Line right) Parameters Type Name Description Line left The first instance. Line right The second instance. Returns Type Description System.Boolean true if the Length of left is greater than or equal to that of right ; otherwise, false . | Improve this Doc View Source Inequality(Line, Line) Returns a value indicating whether two instances of Line are not equal. Declaration public static bool operator !=(in Line left, in Line right) Parameters Type Name Description Line left The first instance. Line right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . | Improve this Doc View Source LessThan(Line, Line) Returns a value indicating whether the length of one line is less than that of another. Declaration public static bool operator <(in Line left, in Line right) Parameters Type Name Description Line left The first instance. Line right The second instance. Returns Type Description System.Boolean true if the Length of left is less than that of right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(Line, Line) Returns a value indicating whether the length of one line is less than or equal to that of another. Declaration public static bool operator <=(in Line left, in Line right) Parameters Type Name Description Line left The first instance. Line right The second instance. Returns Type Description System.Boolean true if the Length of left is less than or equal to that of right ; otherwise, false . Implements IEquatable<> IComparable<> IComparable Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.Line3D.html": {
    "href": "api/X10D.Drawing.Line3D.html",
    "title": "Struct Line3D | X10D",
    "keywords": "Struct Line3D Represents a line in 3D space that is composed of 32-bit signed integer X, Y and Z coordinates. Implements IEquatable < Line3D > IComparable < Line3D > IComparable Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct Line3D : IEquatable<Line3D>, IComparable<Line3D>, IComparable Constructors | Improve this Doc View Source Line3D(Vector3, Vector3) Initializes a new instance of the Line3D struct by taking the start and end points. Declaration public Line3D(in Vector3 start, in Vector3 end) Parameters Type Name Description Vector3 start The start point. Vector3 end The end point. Fields | Improve this Doc View Source Empty The empty line. That is, a line whose start and end points are at (0, 0). Declaration public static readonly Line3D Empty Field Value Type Description Line3D | Improve this Doc View Source One The line whose start point is at (0, 0, 0) and end point is at (1, 1, 1). Declaration public static readonly Line3D One Field Value Type Description Line3D | Improve this Doc View Source UnitX The line whose start point is at (0, 0, 0) and end point is at (1, 0, 0). Declaration public static readonly Line3D UnitX Field Value Type Description Line3D | Improve this Doc View Source UnitY The line whose start point is at (0, 0, 0) and end point is at (0, 1, 0). Declaration public static readonly Line3D UnitY Field Value Type Description Line3D | Improve this Doc View Source UnitZ The line whose start point is at (0, 0, 0) and end point is at (0, 0, 1). Declaration public static readonly Line3D UnitZ Field Value Type Description Line3D Properties | Improve this Doc View Source End Gets the end point of the line. Declaration public Vector3 End { get; } Property Value Type Description Vector3 The end point. | Improve this Doc View Source Length Gets the length of this line. Declaration public float Length { get; } Property Value Type Description System.Single The length. | Improve this Doc View Source LengthSquared Gets the length of this line, squared. Declaration public float LengthSquared { get; } Property Value Type Description System.Single The squared length. | Improve this Doc View Source Start Gets the start point of the line. Declaration public Vector3 Start { get; } Property Value Type Description Vector3 The start point. Methods | Improve this Doc View Source CompareTo(Nullable<Object>) Compares this instance to another object. Declaration public int CompareTo(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object with with which to compare Returns Type Description System.Int32 A signed number indicating the relative values of this instance and obj . Return value Meaning Less than zero The Length of this instance is less than that of obj . Zero This instance is equal to obj , or the Length of both this instance and obj are not a number ( ), , or . Greater than zero The Length of this instance is greater than that of obj . Remarks Comparison internally measures the LengthSquared property to avoid calls to . obj is not an instance of Line3D . | Improve this Doc View Source CompareTo(Line3D) Compares this instance to another Line3D . Declaration public int CompareTo(Line3D other) Parameters Type Name Description Line3D other Returns Type Description System.Int32 A signed number indicating the relative values of this instance and other . Return value Meaning Less than zero The Length of this instance is less than that of other . Zero This instance is equal to other , or the Length of both this instance and other are not a number ( ), , or . Greater than zero The Length of this instance is greater than that of other . Remarks Comparison internally measures the LengthSquared property to avoid calls to . | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Line3D) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Line3D other) Parameters Type Name Description Line3D other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromLine(Line) Converts a Line to a LineF . Declaration public static Line3D FromLine(in Line line) Parameters Type Name Description Line line The line to convert. Returns Type Description Line3D The converted line. | Improve this Doc View Source FromLineF(LineF) Converts a LineF to a Line3D . Declaration public static Line3D FromLineF(in LineF line) Parameters Type Name Description LineF line The line to convert. Returns Type Description Line3D The converted line. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Line3D, Line3D) Returns a value indicating whether two instances of Line3D are equal. Declaration public static bool operator ==(Line3D left, Line3D right) Parameters Type Name Description Line3D left The first instance. Line3D right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source GreaterThan(Line3D, Line3D) Returns a value indicating whether the length of one line is greater than that of another. Declaration public static bool operator>(in Line3D left, in Line3D right) Parameters Type Name Description Line3D left The first instance. Line3D right The second instance. Returns Type Description System.Boolean true if the Length of left is greater than that of right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(Line3D, Line3D) Returns a value indicating whether the length of one line is greater than or equal to that of another. Declaration public static bool operator >=(in Line3D left, in Line3D right) Parameters Type Name Description Line3D left The first instance. Line3D right The second instance. Returns Type Description System.Boolean true if the Length of left is greater than or equal to that of right ; otherwise, false . | Improve this Doc View Source Implicit(Line to Line3D) Implicitly converts a Line to a LineF . Declaration public static implicit operator Line3D(in Line line) Parameters Type Name Description Line line The line to convert. Returns Type Description Line3D The converted line. | Improve this Doc View Source Implicit(LineF to Line3D) Implicitly converts a LineF to a Line3D . Declaration public static implicit operator Line3D(in LineF line) Parameters Type Name Description LineF line The line to convert. Returns Type Description Line3D The converted line. | Improve this Doc View Source Inequality(Line3D, Line3D) Returns a value indicating whether two instances of Line3D are not equal. Declaration public static bool operator !=(Line3D left, Line3D right) Parameters Type Name Description Line3D left The first instance. Line3D right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . | Improve this Doc View Source LessThan(Line3D, Line3D) Returns a value indicating whether the length of one line is less than that of another. Declaration public static bool operator <(in Line3D left, in Line3D right) Parameters Type Name Description Line3D left The first instance. Line3D right The second instance. Returns Type Description System.Boolean true if the Length of left is less than that of right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(Line3D, Line3D) Returns a value indicating whether the length of one line is less than or equal to that of another. Declaration public static bool operator <=(in Line3D left, in Line3D right) Parameters Type Name Description Line3D left The first instance. Line3D right The second instance. Returns Type Description System.Boolean true if the Length of left is less than or equal to that of right ; otherwise, false . Implements IEquatable<> IComparable<> IComparable Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.LineF.html": {
    "href": "api/X10D.Drawing.LineF.html",
    "title": "Struct LineF | X10D",
    "keywords": "Struct LineF Represents a line in 2D space that is composed of single-precision floating-point X and Y coordinates. Implements IEquatable < LineF > IComparable < LineF > IComparable Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct LineF : IEquatable<LineF>, IComparable<LineF>, IComparable Constructors | Improve this Doc View Source LineF(PointF, PointF) Initializes a new instance of the LineF struct by taking the start and end points. Declaration public LineF(PointF start, PointF end) Parameters Type Name Description PointF start The start point. PointF end The end point. | Improve this Doc View Source LineF(Vector2, Vector2) Initializes a new instance of the LineF struct by taking the start and end points. Declaration public LineF(Vector2 start, Vector2 end) Parameters Type Name Description Vector2 start The start point. Vector2 end The end point. Fields | Improve this Doc View Source Empty The empty line. That is, a line whose start and end points are at (0, 0). Declaration public static readonly LineF Empty Field Value Type Description LineF | Improve this Doc View Source One The line whose start point is at (0, 0) and end point is at (1, 1). Declaration public static readonly LineF One Field Value Type Description LineF | Improve this Doc View Source UnitX The line whose start point is at (0, 0) and end point is at (1, 0). Declaration public static readonly LineF UnitX Field Value Type Description LineF | Improve this Doc View Source UnitY The line whose start point is at (0, 0) and end point is at (0, 1). Declaration public static readonly LineF UnitY Field Value Type Description LineF Properties | Improve this Doc View Source End Gets the end point of the line. Declaration public PointF End { get; } Property Value Type Description PointF The end point. | Improve this Doc View Source Length Gets the length of this line. Declaration public float Length { get; } Property Value Type Description System.Single The length. | Improve this Doc View Source LengthSquared Gets the length of this line, squared. Declaration public float LengthSquared { get; } Property Value Type Description System.Single The squared length. | Improve this Doc View Source Start Gets the start point of the line. Declaration public PointF Start { get; } Property Value Type Description PointF The start point. Methods | Improve this Doc View Source CompareTo(Nullable<Object>) Compares this instance to another object. Declaration public int CompareTo(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object with with which to compare Returns Type Description System.Int32 A signed number indicating the relative values of this instance and obj . Return value Meaning Less than zero The Length of this instance is less than that of obj . Zero This instance is equal to obj , or the Length of both this instance and obj are not a number ( ), , or . Greater than zero The Length of this instance is greater than that of obj . Remarks Comparison internally measures the LengthSquared property to avoid calls to . obj is not an instance of Line . | Improve this Doc View Source CompareTo(LineF) Compares this instance to another Line . Declaration public int CompareTo(LineF other) Parameters Type Name Description LineF other Returns Type Description System.Int32 A signed number indicating the relative values of this instance and other . Return value Meaning Less than zero The Length of this instance is less than that of other . Zero This instance is equal to other , or the Length of both this instance and other are not a number ( ), , or . Greater than zero The Length of this instance is greater than that of other . Remarks Comparison internally measures the LengthSquared property to avoid calls to . | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(LineF) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(LineF other) Parameters Type Name Description LineF other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromLine(Line) Converts a Line to a LineF . Declaration public static LineF FromLine(in Line line) Parameters Type Name Description Line line The line to convert. Returns Type Description LineF The converted line. | Improve this Doc View Source FromLine3D(Line3D) Converts a Line3D to a LineF . Declaration public static LineF FromLine3D(in Line3D line) Parameters Type Name Description Line3D line The line to convert. Returns Type Description LineF The converted line. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(LineF, LineF) Returns a value indicating whether two instances of LineF are equal. Declaration public static bool operator ==(in LineF left, in LineF right) Parameters Type Name Description LineF left The first instance. LineF right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Explicit(Line3D to LineF) Explicitly converts a Line3D to a LineF . Declaration public static explicit operator LineF(in Line3D line) Parameters Type Name Description Line3D line The line to convert. Returns Type Description LineF The converted line. | Improve this Doc View Source GreaterThan(LineF, LineF) Returns a value indicating whether the length of one line is greater than that of another. Declaration public static bool operator>(in LineF left, in LineF right) Parameters Type Name Description LineF left The first instance. LineF right The second instance. Returns Type Description System.Boolean true if the Length of left is greater than that of right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(LineF, LineF) Returns a value indicating whether the length of one line is greater than or equal to that of another. Declaration public static bool operator >=(in LineF left, in LineF right) Parameters Type Name Description LineF left The first instance. LineF right The second instance. Returns Type Description System.Boolean true if the Length of left is greater than or equal to that of right ; otherwise, false . | Improve this Doc View Source Implicit(Line to LineF) Implicitly converts a Line to a LineF . Declaration public static implicit operator LineF(in Line line) Parameters Type Name Description Line line The line to convert. Returns Type Description LineF The converted line. | Improve this Doc View Source Inequality(LineF, LineF) Returns a value indicating whether two instances of LineF are not equal. Declaration public static bool operator !=(in LineF left, in LineF right) Parameters Type Name Description LineF left The first instance. LineF right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . | Improve this Doc View Source LessThan(LineF, LineF) Returns a value indicating whether the length of one line is less than that of another. Declaration public static bool operator <(in LineF left, in LineF right) Parameters Type Name Description LineF left The first instance. LineF right The second instance. Returns Type Description System.Boolean true if the Length of left is less than that of right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(LineF, LineF) Returns a value indicating whether the length of one line is less than or equal to that of another. Declaration public static bool operator <=(in LineF left, in LineF right) Parameters Type Name Description LineF left The first instance. LineF right The second instance. Returns Type Description System.Boolean true if the Length of left is less than or equal to that of right ; otherwise, false . Implements IEquatable<> IComparable<> IComparable Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Drawing.PointExtensions.html": {
    "href": "api/X10D.Drawing.PointExtensions.html",
    "title": "Class PointExtensions | X10D",
    "keywords": "Class PointExtensions Drawing-related extension methods for . Inheritance System.Object PointExtensions Namespace : X10D.Drawing Assembly : X10D.dll Syntax public static class PointExtensions : object Methods | Improve this Doc View Source IsOnLine(Point, PointF, PointF) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Point point, PointF start, PointF end) Parameters Type Name Description Point point The point to check. PointF start The starting point of the line. PointF end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Point, Vector2, Vector2) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Point point, Vector2 start, Vector2 end) Parameters Type Name Description Point point The point to check. Vector2 start The starting point of the line. Vector2 end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Point, LineF) Determines if the current lies on the specified LineF . Declaration public static bool IsOnLine(this Point point, LineF line) Parameters Type Name Description Point point The point to check. LineF line The line on which the point may lie. Returns Type Description System.Boolean true if point lies on the line defined by line ; otherwise false . | Improve this Doc View Source ToSize(Point) Converts the current to a . Declaration public static Size ToSize(this Point point) Parameters Type Name Description Point point The point to convert. Returns Type Description Size The resulting . | Improve this Doc View Source ToSizeF(Point) Converts the current to a . Declaration public static SizeF ToSizeF(this Point point) Parameters Type Name Description Point point The point to convert. Returns Type Description SizeF The resulting . | Improve this Doc View Source ToVector2(Point) Converts the current to a . Declaration public static Vector2 ToVector2(this Point point) Parameters Type Name Description Point point The point to convert. Returns Type Description Vector2 The resulting ."
  },
  "api/X10D.Drawing.PointFExtensions.html": {
    "href": "api/X10D.Drawing.PointFExtensions.html",
    "title": "Class PointFExtensions | X10D",
    "keywords": "Class PointFExtensions Drawing-related extension methods for . Inheritance System.Object PointFExtensions Namespace : X10D.Drawing Assembly : X10D.dll Syntax public static class PointFExtensions : object Methods | Improve this Doc View Source IsOnLine(PointF, PointF, PointF) Determines if the current lies on the specified LineF . Declaration public static bool IsOnLine(this PointF point, PointF start, PointF end) Parameters Type Name Description PointF point The point to check. PointF start The starting point of the line. PointF end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(PointF, Vector2, Vector2) Determines if the current lies on the specified LineF . Declaration public static bool IsOnLine(this PointF point, Vector2 start, Vector2 end) Parameters Type Name Description PointF point The point to check. Vector2 start The starting point of the line. Vector2 end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(PointF, LineF) Determines if the current lies on the specified LineF . Declaration public static bool IsOnLine(this PointF point, LineF line) Parameters Type Name Description PointF point The point to check. LineF line The line on which the point may lie. Returns Type Description System.Boolean true if point lies on the line defined by line ; otherwise false . | Improve this Doc View Source Round(PointF) Rounds the components in the current to the nearest integer. Declaration public static PointF Round(this PointF point) Parameters Type Name Description PointF point The point whose components to round. Returns Type Description PointF The rounded point. | Improve this Doc View Source Round(PointF, Single) Rounds the components in the current to the nearest multiple of a specified number. Declaration public static PointF Round(this PointF point, float nearest) Parameters Type Name Description PointF point The point whose components to round. System.Single nearest The nearest multiple to which the components should be rounded. Returns Type Description PointF The rounded point. | Improve this Doc View Source ToSizeF(PointF) Converts the current to a . Declaration public static SizeF ToSizeF(this PointF point) Parameters Type Name Description PointF point The point to convert. Returns Type Description SizeF The resulting . | Improve this Doc View Source ToVector2(PointF) Converts the current to a . Declaration public static Vector2 ToVector2(this PointF point) Parameters Type Name Description PointF point The point to convert. Returns Type Description Vector2 The resulting ."
  },
  "api/X10D.Drawing.Polygon.html": {
    "href": "api/X10D.Drawing.Polygon.html",
    "title": "Class Polygon | X10D",
    "keywords": "Class Polygon Represents a 2D polygon composed of 32-bit signed integer vertices. Inheritance System.Object Polygon Namespace : X10D.Drawing Assembly : X10D.dll Syntax public class Polygon : IEquatable<Polygon> Constructors | Improve this Doc View Source Polygon() Initializes a new instance of the Polygon class. Declaration public Polygon() | Improve this Doc View Source Polygon(IEnumerable<Point>) Initializes a new instance of the Polygon class by constructing it from the specified vertices. Declaration public Polygon(IEnumerable<Point> vertices) Parameters Type Name Description IEnumerable < Point > vertices An enumerable collection of vertices from which the polygon should be constructed. | Improve this Doc View Source Polygon(Polygon) Initializes a new instance of the Polygon class by copying the specified polygon. Declaration public Polygon(Polygon polygon) Parameters Type Name Description Polygon polygon Properties | Improve this Doc View Source Empty Gets an empty polygon. That is, a polygon with no vertices. Declaration public static Polygon Empty { get; } Property Value Type Description Polygon An empty polygon. | Improve this Doc View Source IsConvex Returns a value indicating whether this polygon is convex. Declaration public bool IsConvex { get; } Property Value Type Description System.Boolean true if this polygon is convex; otherwise, false . | Improve this Doc View Source VertexCount Gets the number of vertices in this polygon. Declaration public int VertexCount { get; } Property Value Type Description System.Int32 An value, representing the number of vertices in this polygon. | Improve this Doc View Source Vertices Gets a read-only view of the vertices in this polygon. Declaration public IReadOnlyList<Point> Vertices { get; } Property Value Type Description IReadOnlyList < Point > A of values, representing the vertices of this polygon. Methods | Improve this Doc View Source AddVertex(Point) Adds a vertex to this polygon. Declaration public void AddVertex(Point vertex) Parameters Type Name Description Point vertex The vertex to add. | Improve this Doc View Source AddVertices(IEnumerable<Point>) Adds a collection of vertices to this polygon. Declaration public void AddVertices(IEnumerable<Point> vertices) Parameters Type Name Description IEnumerable < Point > vertices An enumerable collection of vertices to add. | Improve this Doc View Source ClearVertices() Clears all vertices from this polygon. Declaration public void ClearVertices() | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Polygon) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Polygon other) Parameters Type Name Description Polygon other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromPolygonF(PolygonF) Explicitly converts a Polygon to a PolygonF . Declaration public static Polygon FromPolygonF(PolygonF polygon) Parameters Type Name Description PolygonF polygon The polygon to convert. Returns Type Description Polygon The converted polygon. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Polygon, Polygon) Returns a value indicating whether two instances of Polygon are equal. Declaration public static bool operator ==(Polygon left, Polygon right) Parameters Type Name Description Polygon left The first instance. Polygon right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Explicit(PolygonF to Polygon) Explicitly converts a Polygon to a PolygonF . Declaration public static explicit operator Polygon(PolygonF polygon) Parameters Type Name Description PolygonF polygon The polygon to convert. Returns Type Description Polygon The converted polygon. | Improve this Doc View Source Inequality(Polygon, Polygon) Returns a value indicating whether two instances of Polygon are not equal. Declaration public static bool operator !=(Polygon left, Polygon right) Parameters Type Name Description Polygon left The first instance. Polygon right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32) PolygonExtensions.AddVertex(Polygon, Vector2Int) PolygonExtensions.AddVertices(Polygon, IEnumerable<Vector2Int>)"
  },
  "api/X10D.Drawing.PolygonF.html": {
    "href": "api/X10D.Drawing.PolygonF.html",
    "title": "Class PolygonF | X10D",
    "keywords": "Class PolygonF Represents a 2D polygon composed of single-precision floating-vertex vertices. Inheritance System.Object PolygonF Namespace : X10D.Drawing Assembly : X10D.dll Syntax public class PolygonF : object Constructors | Improve this Doc View Source PolygonF() Initializes a new instance of the PolygonF class. Declaration public PolygonF() | Improve this Doc View Source PolygonF(IEnumerable<PointF>) Initializes a new instance of the PolygonF class by constructing it from the specified vertices. Declaration public PolygonF(IEnumerable<PointF> vertices) Parameters Type Name Description IEnumerable < PointF > vertices An enumerable collection of vertices from which the polygon should be constructed. | Improve this Doc View Source PolygonF(IEnumerable<Vector2>) Initializes a new instance of the PolygonF class by constructing it from the specified vertices. Declaration public PolygonF(IEnumerable<Vector2> vertices) Parameters Type Name Description IEnumerable < Vector2 > vertices An enumerable collection of vertices from which the polygon should be constructed. | Improve this Doc View Source PolygonF(PolygonF) Initializes a new instance of the PolygonF class by copying the specified polygon. Declaration public PolygonF(PolygonF polygon) Parameters Type Name Description PolygonF polygon Properties | Improve this Doc View Source Empty Gets an empty polygon. That is, a polygon with no vertices. Declaration public static PolygonF Empty { get; } Property Value Type Description PolygonF An empty polygon. | Improve this Doc View Source IsConvex Returns a value indicating whether this polygon is convex. Declaration public bool IsConvex { get; } Property Value Type Description System.Boolean true if this polygon is convex; otherwise, false . | Improve this Doc View Source VertexCount Gets the number of vertices in this polygon. Declaration public int VertexCount { get; } Property Value Type Description System.Int32 An value, representing the number of vertices in this polygon. | Improve this Doc View Source Vertices Gets a read-only view of the vertices in this polygon. Declaration public IReadOnlyList<PointF> Vertices { get; } Property Value Type Description IReadOnlyList < PointF > A of values, representing the vertices of this polygon. Methods | Improve this Doc View Source AddVertex(PointF) Adds a vertex to this polygon. Declaration public void AddVertex(PointF vertex) Parameters Type Name Description PointF vertex The vertex to add. | Improve this Doc View Source AddVertex(Vector2) Adds a vertex to this polygon. Declaration public void AddVertex(Vector2 vertex) Parameters Type Name Description Vector2 vertex The vertex to add. | Improve this Doc View Source AddVertices(IEnumerable<PointF>) Adds a collection of vertices to this polygon. Declaration public void AddVertices(IEnumerable<PointF> vertices) Parameters Type Name Description IEnumerable < PointF > vertices An enumerable collection of vertices to add. | Improve this Doc View Source AddVertices(IEnumerable<Vector2>) Adds a collection of vertices to this polygon. Declaration public void AddVertices(IEnumerable<Vector2> vertices) Parameters Type Name Description IEnumerable < Vector2 > vertices An enumerable collection of vertices to add. | Improve this Doc View Source ClearVertices() Clears all vertices from this polygon. Declaration public void ClearVertices() | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(PolygonF) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(PolygonF other) Parameters Type Name Description PolygonF other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromPolygon(Polygon) Implicitly converts a Polygon to a PolygonF . Declaration public static PolygonF FromPolygon(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to convert. Returns Type Description PolygonF The converted polygon. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(PolygonF, PolygonF) Returns a value indicating whether two instances of PolygonF are equal. Declaration public static bool operator ==(PolygonF left, PolygonF right) Parameters Type Name Description PolygonF left The first instance. PolygonF right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Implicit(Polygon to PolygonF) Implicitly converts a Polygon to a PolygonF . Declaration public static implicit operator PolygonF(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to convert. Returns Type Description PolygonF The converted polygon. | Improve this Doc View Source Inequality(PolygonF, PolygonF) Returns a value indicating whether two instances of PolygonF are not equal. Declaration public static bool operator !=(PolygonF left, PolygonF right) Parameters Type Name Description PolygonF left The first instance. PolygonF right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32) PolygonFExtensions.AddVertex(PolygonF, Vector2Int) PolygonFExtensions.AddVertex(PolygonF, Vector2) PolygonFExtensions.AddVertices(PolygonF, IEnumerable<Vector2Int>) PolygonFExtensions.AddVertices(PolygonF, IEnumerable<Vector2>)"
  },
  "api/X10D.Drawing.Polyhedron.html": {
    "href": "api/X10D.Drawing.Polyhedron.html",
    "title": "Class Polyhedron | X10D",
    "keywords": "Class Polyhedron Represents a 3D polyhedron composed of single-precision floating-point points. Inheritance System.Object Polyhedron Namespace : X10D.Drawing Assembly : X10D.dll Syntax public class Polyhedron : IEquatable<Polyhedron> Constructors | Improve this Doc View Source Polyhedron() Initializes a new instance of the Polyhedron class. Declaration public Polyhedron() | Improve this Doc View Source Polyhedron(IEnumerable<Vector3>) Initializes a new instance of the Polyhedron class by constructing it from the specified vertices. Declaration public Polyhedron(IEnumerable<Vector3> vertices) Parameters Type Name Description IEnumerable < Vector3 > vertices An enumerable collection of vertices from which the polyhedron should be constructed. | Improve this Doc View Source Polyhedron(Polyhedron) Initializes a new instance of the Polyhedron class by copying the specified polyhedron. Declaration public Polyhedron(Polyhedron polyhedron) Parameters Type Name Description Polyhedron polyhedron Properties | Improve this Doc View Source Empty Gets an empty polyhedron. That is, a polygon with no vertices. Declaration public static Polyhedron Empty { get; } Property Value Type Description Polyhedron An empty polyhedron. | Improve this Doc View Source VertexCount Gets the number of vertices in this polyhedron. Declaration public int VertexCount { get; } Property Value Type Description System.Int32 An value, representing the number of vertices in this polyhedron. | Improve this Doc View Source Vertices Gets a read-only view of the vertices in this polyhedron. Declaration public IReadOnlyList<Vector3> Vertices { get; } Property Value Type Description IReadOnlyList < Vector3 > A of values, representing the vertices of this polyhedron. Methods | Improve this Doc View Source AddVertex(Vector3) Adds a vertex to this polyhedron. Declaration public void AddVertex(Vector3 vertex) Parameters Type Name Description Vector3 vertex The vertex to add. | Improve this Doc View Source AddVertices(IEnumerable<Vector3>) Adds a collection of vertices to this polyhedron. Declaration public void AddVertices(IEnumerable<Vector3> vertices) Parameters Type Name Description IEnumerable < Vector3 > vertices An enumerable collection of vertices to add. | Improve this Doc View Source ClearVertices() Clears all vertices from this polyhedron. Declaration public void ClearVertices() | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Polyhedron) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Polyhedron other) Parameters Type Name Description Polyhedron other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source FromPolygon(Polygon) Converts a Polygon to a Polyhedron . Declaration public static Polyhedron FromPolygon(Polygon polygon) Parameters Type Name Description Polygon polygon The polyhedron to convert. Returns Type Description Polyhedron The converted polyhedron. | Improve this Doc View Source FromPolygonF(PolygonF) Converts a PolygonF to a Polyhedron . Declaration public static Polyhedron FromPolygonF(PolygonF polygon) Parameters Type Name Description PolygonF polygon The polyhedron to convert. Returns Type Description Polyhedron The converted polyhedron. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Polyhedron, Polyhedron) Returns a value indicating whether two instances of Polyhedron are equal. Declaration public static bool operator ==(Polyhedron left, Polyhedron right) Parameters Type Name Description Polyhedron left The first instance. Polyhedron right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source Implicit(Polygon to Polyhedron) Implicitly converts a Polygon to a Polyhedron . Declaration public static implicit operator Polyhedron(Polygon polygon) Parameters Type Name Description Polygon polygon The polyhedron to convert. Returns Type Description Polyhedron The converted polyhedron, or null if polygon is null . | Improve this Doc View Source Implicit(PolygonF to Polyhedron) Implicitly converts a PolygonF to a Polyhedron . Declaration public static implicit operator Polyhedron(PolygonF polygon) Parameters Type Name Description PolygonF polygon The polyhedron to convert. Returns Type Description Polyhedron The converted polyhedron, or null if polygon is null . | Improve this Doc View Source Inequality(Polyhedron, Polyhedron) Returns a value indicating whether two instances of Polyhedron are not equal. Declaration public static bool operator !=(Polyhedron left, Polyhedron right) Parameters Type Name Description Polyhedron left The first instance. Polyhedron right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32) PolyhedronExtensions.AddVertex(Polyhedron, Vector3Int) PolyhedronExtensions.AddVertex(Polyhedron, Vector3) PolyhedronExtensions.AddVertices(Polyhedron, IEnumerable<Vector3Int>) PolyhedronExtensions.AddVertices(Polyhedron, IEnumerable<Vector3>)"
  },
  "api/X10D.Drawing.RandomExtensions.html": {
    "href": "api/X10D.Drawing.RandomExtensions.html",
    "title": "Class RandomExtensions | X10D",
    "keywords": "Class RandomExtensions Extension methods for . Inheritance System.Object RandomExtensions Namespace : X10D.Drawing Assembly : X10D.dll Syntax public static class RandomExtensions : object Methods | Improve this Doc View Source NextColorArgb(Random) Returns a color composed of random components for apha, red, green, and blue. Declaration public static Color NextColorArgb(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description Color A whose alpha, red, green, and blue components are all random. | Improve this Doc View Source NextColorRgb(Random) Returns a color of random components for red, green, and blue. Declaration public static Color NextColorRgb(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description Color A whose red, green, and blue components are all random, and whose alpha is 255"
  },
  "api/X10D.Drawing.SizeExtensions.html": {
    "href": "api/X10D.Drawing.SizeExtensions.html",
    "title": "Class SizeExtensions | X10D",
    "keywords": "Class SizeExtensions Drawing-related extension methods for . Inheritance System.Object SizeExtensions Namespace : X10D.Drawing Assembly : X10D.dll Syntax public static class SizeExtensions : object Methods | Improve this Doc View Source ToPoint(Size) Converts the current to a . Declaration public static Point ToPoint(this Size size) Parameters Type Name Description Size size The size to convert. Returns Type Description Point The resulting . | Improve this Doc View Source ToPointF(Size) Converts the current to a . Declaration public static PointF ToPointF(this Size size) Parameters Type Name Description Size size The size to convert. Returns Type Description PointF The resulting . | Improve this Doc View Source ToVector2(Size) Converts the current to a . Declaration public static Vector2 ToVector2(this Size size) Parameters Type Name Description Size size The size to convert. Returns Type Description Vector2 The resulting ."
  },
  "api/X10D.Drawing.Sphere.html": {
    "href": "api/X10D.Drawing.Sphere.html",
    "title": "Struct Sphere | X10D",
    "keywords": "Struct Sphere Represents a sphere in 3D space, which uses single-precision floating-point numbers for its coordinates. Implements IEquatable < Sphere > IComparable < Sphere > IComparable Namespace : X10D.Drawing Assembly : X10D.dll Syntax public struct Sphere : IEquatable<Sphere>, IComparable<Sphere>, IComparable Constructors | Improve this Doc View Source Sphere(Single, Single, Single, Single) Initializes a new instance of the Sphere struct. Declaration public Sphere(float centerX, float centerY, float centerZ, float radius) Parameters Type Name Description System.Single centerX The X coordinate of the center point. System.Single centerY The Y coordinate of the center point. System.Single centerZ The Z coordinate of the center point. System.Single radius The radius. | Improve this Doc View Source Sphere(Vector3, Single) Initializes a new instance of the Sphere struct. Declaration public Sphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center The center point. System.Single radius The radius. Fields | Improve this Doc View Source Sphere The unit sphere. That is, a sphere with a radius of 1. Declaration public static readonly Sphere Field Value Type Description Sphere | Improve this Doc View Source Sphere The unit sphere. That is, a sphere with a radius of 1. Declaration public static readonly Sphere Field Value Type Description Sphere | Improve this Doc View Source Sphere The unit sphere. That is, a sphere with a radius of 1. Declaration public static readonly Sphere Field Value Type Description Sphere | Improve this Doc View Source Empty The empty sphere. That is, a sphere with a radius of zero. Declaration public static readonly Sphere Empty Field Value Type Description Sphere | Improve this Doc View Source Unit The unit sphere. That is, a sphere with a radius of 1. Declaration public static readonly Sphere Unit Field Value Type Description Sphere Properties | Improve this Doc View Source Center Gets the center-point of the sphere. Declaration public Vector3 Center { get; } Property Value Type Description Vector3 The center point. | Improve this Doc View Source Circumference Gets the circumference of the sphere. Declaration public float Circumference { get; } Property Value Type Description System.Single The circumference of the sphere, calculated as 2πr . | Improve this Doc View Source Diameter Gets the diameter of the sphere. Declaration public float Diameter { get; } Property Value Type Description System.Single The diameter. | Improve this Doc View Source Radius Gets the radius of the sphere. Declaration public float Radius { get; } Property Value Type Description System.Single The radius. | Improve this Doc View Source Volume Gets the volume of this sphere. Declaration public float Volume { get; } Property Value Type Description System.Single The volume. Methods | Improve this Doc View Source CompareTo(Nullable<Object>) Compares this instance to another Sphere . Declaration public int CompareTo(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The other object. Returns Type Description System.Int32 A signed number indicating the relative values of this instance and obj . Return value Meaning Less than zero The Radius of this instance is less than that of obj . Zero This instance is equal to obj , or the Radius of both this instance and obj are not a number ( ), , or . Greater than zero The Radius of this instance is greater than that of obj , or obj is null . Remarks Comparison only takes into consideration the Radius . | Improve this Doc View Source CompareTo(Sphere) Compares this instance to another Sphere . Declaration public int CompareTo(Sphere other) Parameters Type Name Description Sphere other The other sphere. Returns Type Description System.Int32 A signed number indicating the relative values of this instance and other . Return value Meaning Less than zero The Radius of this instance is less than that of other . Zero This instance is equal to other , or the Radius of both this instance and other are not a number ( ), , or . Greater than zero The Radius of this instance is greater than that of other . Remarks Comparison only takes into consideration the Radius . | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source Equals(Sphere) Returns a value indicating whether this instance and another instance are equal. Declaration public bool Equals(Sphere other) Parameters Type Name Description Sphere other The instance with which to compare. Returns Type Description System.Boolean true if this instance and other are considered equal; otherwise, false . | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators | Improve this Doc View Source Equality(Sphere, Sphere) Returns a value indicating whether two instances of Sphere are equal. Declaration public static bool operator ==(Sphere left, Sphere right) Parameters Type Name Description Sphere left The first instance. Sphere right The second instance. Returns Type Description System.Boolean true if left and right are considered equal; otherwise, false . | Improve this Doc View Source GreaterThan(Sphere, Sphere) Returns a value indicating whether the radius of one circle is greater than to that of another. Declaration public static bool operator>(Sphere left, Sphere right) Parameters Type Name Description Sphere left The first instance. Sphere right The second instance. Returns Type Description System.Boolean true if the Radius of left is greater than that of right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(Sphere, Sphere) Returns a value indicating whether the radius of one circle is greater than or equal to that of another. Declaration public static bool operator >=(Sphere left, Sphere right) Parameters Type Name Description Sphere left The first instance. Sphere right The second instance. Returns Type Description System.Boolean true if the Radius of left is greater than or equal to that of right ; otherwise, false . | Improve this Doc View Source Inequality(Sphere, Sphere) Returns a value indicating whether two instances of Sphere are not equal. Declaration public static bool operator !=(Sphere left, Sphere right) Parameters Type Name Description Sphere left The first instance. Sphere right The second instance. Returns Type Description System.Boolean true if left and right are considered not equal; otherwise, false . | Improve this Doc View Source LessThan(Sphere, Sphere) Returns a value indicating whether the radius of one circle is less than that of another. Declaration public static bool operator <(Sphere left, Sphere right) Parameters Type Name Description Sphere left The first instance. Sphere right The second instance. Returns Type Description System.Boolean true if the Radius of left is less than that of right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(Sphere, Sphere) Returns a value indicating whether the radius of one circle is less than or equal to that of another. Declaration public static bool operator <=(Sphere left, Sphere right) Parameters Type Name Description Sphere left The first instance. Sphere right The second instance. Returns Type Description System.Boolean true if the Radius of left is less than or equal to that of right ; otherwise, false . Implements IEquatable<> IComparable<> IComparable Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Endianness.html": {
    "href": "api/X10D.Endianness.html",
    "title": "Enum Endianness | X10D",
    "keywords": "Enum Endianness Represents an enumeration of endianness values. Namespace : X10D Assembly : X10D.dll Syntax public enum Endianness : int Fields Name Description BigEndian The value should be read as though it uses big endian encoding. LittleEndian The value should be read as though it uses little endian encoding. Extension Methods Extensions.AsArrayValue<Endianness>() Extensions.AsEnumerableValue<Endianness>() Extensions.RepeatValue<Endianness>(Int32)"
  },
  "api/X10D.Hosting.DependencyInjection.html": {
    "href": "api/X10D.Hosting.DependencyInjection.html",
    "title": "Namespace X10D.Hosting.DependencyInjection | X10D",
    "keywords": "Namespace X10D.Hosting.DependencyInjection Classes ServiceCollectionExtensions Dependency injection extensions for ."
  },
  "api/X10D.Hosting.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/X10D.Hosting.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | X10D",
    "keywords": "Class ServiceCollectionExtensions Dependency injection extensions for . Inheritance System.Object ServiceCollectionExtensions Namespace : X10D.Hosting.DependencyInjection Assembly : X10D.Hosting.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddHostedSingleton(IServiceCollection, Type) Adds an registration for the given type, while simultaneously adding it as a singleton. Declaration public static IServiceCollection AddHostedSingleton(this IServiceCollection services, Type type) Parameters Type Name Description IServiceCollection services The to add the service to. Type type The type of the service to register and the implementation to use. Returns Type Description IServiceCollection A reference to this instance after the operation has completed. | Improve this Doc View Source AddHostedSingleton(IServiceCollection, Type, Type) Adds an registration for the given type, while simultaneously adding it as a singleton. Declaration public static IServiceCollection AddHostedSingleton(this IServiceCollection services, Type serviceType, Type implementationType) Parameters Type Name Description IServiceCollection services The to add the service to. Type serviceType The type of the service to register. Type implementationType The type of the implementation to use. Returns Type Description IServiceCollection A reference to this instance after the operation has completed. | Improve this Doc View Source AddHostedSingleton<TService>(IServiceCollection) Adds an registration for the given type, while simultaneously adding it as a singleton. Declaration public static IServiceCollection AddHostedSingleton<TService>(this IServiceCollection services) where TService : class, IHostedService Parameters Type Name Description IServiceCollection services The to add the service to. Returns Type Description IServiceCollection A reference to this instance after the operation has completed. Type Parameters Name Description TService The type of the service to add. | Improve this Doc View Source AddHostedSingleton<TService, TImplementation>(IServiceCollection) Adds an registration for the given type, while simultaneously adding it as a singleton. Declaration public static IServiceCollection AddHostedSingleton<TService, TImplementation>(this IServiceCollection services) where TService : class where TImplementation : class, TService, IHostedService Parameters Type Name Description IServiceCollection services The to add the service to. Returns Type Description IServiceCollection A reference to this instance after the operation has completed. Type Parameters Name Description TService The type of the service to add. TImplementation The type of the implementation to use."
  },
  "api/X10D.html": {
    "href": "api/X10D.html",
    "title": "Namespace X10D | X10D",
    "keywords": "Namespace X10D Enums Endianness Represents an enumeration of endianness values."
  },
  "api/X10D.IO.BooleanExtensions.html": {
    "href": "api/X10D.IO.BooleanExtensions.html",
    "title": "Class BooleanExtensions | X10D",
    "keywords": "Class BooleanExtensions Extension methods for . Inheritance System.Object BooleanExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class BooleanExtensions : object Methods | Improve this Doc View Source GetBytes(Boolean) Returns the current boolean value as an array of bytes. Declaration public static byte[] GetBytes(this bool value) Parameters Type Name Description System.Boolean value The value to convert. Returns Type Description System.Byte [] An array of bytes with length 1. | Improve this Doc View Source TryWriteBytes(Boolean, Span<Byte>) Converts a into a span of bytes. Declaration public static bool TryWriteBytes(this bool value, Span<byte> destination) Parameters Type Name Description System.Boolean value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.ByteExtensions.html": {
    "href": "api/X10D.IO.ByteExtensions.html",
    "title": "Class ByteExtensions | X10D",
    "keywords": "Class ByteExtensions IO-related extension methods for . Inheritance System.Object ByteExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class ByteExtensions : object Methods | Improve this Doc View Source GetBytes(Byte) Returns the current 8-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this byte value) Parameters Type Name Description System.Byte value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 1. | Improve this Doc View Source TryWriteBytes(Byte, Span<Byte>) Converts a into a span of bytes. Declaration public static bool TryWriteBytes(this byte value, Span<byte> destination) Parameters Type Name Description System.Byte value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.DirectoryInfoExtensions.html": {
    "href": "api/X10D.IO.DirectoryInfoExtensions.html",
    "title": "Class DirectoryInfoExtensions | X10D",
    "keywords": "Class DirectoryInfoExtensions IO-related extension methods for . Inheritance System.Object DirectoryInfoExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class DirectoryInfoExtensions : object Methods | Improve this Doc View Source Clear(DirectoryInfo) Removes all files and subdirectories in this directory, recursively, without deleting this directory. Declaration public static void Clear(this DirectoryInfo directory) Parameters Type Name Description DirectoryInfo directory The directory to clear."
  },
  "api/X10D.IO.DoubleExtensions.html": {
    "href": "api/X10D.IO.DoubleExtensions.html",
    "title": "Class DoubleExtensions | X10D",
    "keywords": "Class DoubleExtensions IO-related extension methods for . Inheritance System.Object DoubleExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class DoubleExtensions : object Methods | Improve this Doc View Source GetBytes(Double) Returns the current double-precision floating-point value as an array of bytes. Declaration public static byte[] GetBytes(this double value) Parameters Type Name Description System.Double value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 8. | Improve this Doc View Source GetBytes(Double, Endianness) Returns the current double-precision floating-point value as an array of bytes. Declaration public static byte[] GetBytes(this double value, Endianness endianness) Parameters Type Name Description System.Double value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 8. | Improve this Doc View Source TryWriteBytes(Double, Span<Byte>) Converts the current double-precision floating-point into a span of bytes. Declaration public static bool TryWriteBytes(this double value, Span<byte> destination) Parameters Type Name Description System.Double value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(Double, Span<Byte>, Endianness) Converts the current double-precision floating-point into a span of bytes. Declaration public static bool TryWriteBytes(this double value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.Double value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.FileInfoExtensions.html": {
    "href": "api/X10D.IO.FileInfoExtensions.html",
    "title": "Class FileInfoExtensions | X10D",
    "keywords": "Class FileInfoExtensions IO-related extension methods for . Inheritance System.Object FileInfoExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class FileInfoExtensions : object Methods | Improve this Doc View Source GetHash<T>(FileInfo) Computes the hash of a file using the specified hash algorithm. Declaration public static byte[] GetHash<T>(this FileInfo value) where T : HashAlgorithm Parameters Type Name Description FileInfo value The file whose hash to compute. Returns Type Description System.Byte [] The hash of value represented as an array of bytes. Type Parameters Name Description T The type of the whose is to be used for computing the hash. | Improve this Doc View Source TryWriteHash<T>(FileInfo, Span<Byte>, out Int32) Computes the hash of a file using the specified hash algorithm. Declaration public static bool TryWriteHash<T>(this FileInfo value, Span<byte> destination, out int bytesWritten) where T : HashAlgorithm Parameters Type Name Description FileInfo value The file whose hash to compute. Span < System.Byte > destination When this method returns, contains the computed hash of value . System.Int32 bytesWritten When this method returns, the total number of bytes written into destination. This parameter is treated as uninitialized. Returns Type Description System.Boolean true if the destination is long enough to receive the hash; otherwise, false . Type Parameters Name Description T The type of the whose is to be used for computing the hash."
  },
  "api/X10D.IO.html": {
    "href": "api/X10D.IO.html",
    "title": "Namespace X10D.IO | X10D",
    "keywords": "Namespace X10D.IO Classes BooleanExtensions Extension methods for . ByteExtensions IO-related extension methods for . DirectoryInfoExtensions IO-related extension methods for . DoubleExtensions IO-related extension methods for . FileInfoExtensions IO-related extension methods for . Int16Extensions IO-related extension methods for . Int32Extensions IO-related extension methods for . Int64Extensions IO-related extension methods for . ListOfByteExtensions Extension methods for array. SByteExtensions IO-related extension methods for . SingleExtensions IO-related extension methods for . StreamExtensions IO-related extension methods for . TextReaderExtensions IO-related extension methods for . TextWriterExtensions IO-related extension methods for . UInt16Extensions IO-related extension methods for . UInt32Extensions IO-related extension methods for . UInt64Extensions IO-related extension methods for ."
  },
  "api/X10D.IO.Int16Extensions.html": {
    "href": "api/X10D.IO.Int16Extensions.html",
    "title": "Class Int16Extensions | X10D",
    "keywords": "Class Int16Extensions IO-related extension methods for . Inheritance System.Object Int16Extensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class Int16Extensions : object Methods | Improve this Doc View Source GetBytes(Int16) Returns the current 16-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(this short value) Parameters Type Name Description System.Int16 value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 2. | Improve this Doc View Source GetBytes(Int16, Endianness) Returns the current 16-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(this short value, Endianness endianness) Parameters Type Name Description System.Int16 value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 2. | Improve this Doc View Source TryWriteBytes(Int16, Span<Byte>) Converts the current 16-bit signed integer into a span of bytes. Declaration public static bool TryWriteBytes(this short value, Span<byte> destination) Parameters Type Name Description System.Int16 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(Int16, Span<Byte>, Endianness) Converts the current 16-bit signed integer into a span of bytes. Declaration public static bool TryWriteBytes(this short value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.Int16 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.Int32Extensions.html": {
    "href": "api/X10D.IO.Int32Extensions.html",
    "title": "Class Int32Extensions | X10D",
    "keywords": "Class Int32Extensions IO-related extension methods for . Inheritance System.Object Int32Extensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class Int32Extensions : object Methods | Improve this Doc View Source GetBytes(Int32) Returns the current 32-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(this int value) Parameters Type Name Description System.Int32 value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 4. | Improve this Doc View Source GetBytes(Int32, Endianness) Returns the current 32-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(this int value, Endianness endianness) Parameters Type Name Description System.Int32 value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 4. | Improve this Doc View Source TryWriteBytes(Int32, Span<Byte>) Converts the current 32-bit signed integer into a span of bytes. Declaration public static bool TryWriteBytes(this int value, Span<byte> destination) Parameters Type Name Description System.Int32 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(Int32, Span<Byte>, Endianness) Converts the current 32-bit signed integer into a span of bytes. Declaration public static bool TryWriteBytes(this int value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.Int32 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.Int64Extensions.html": {
    "href": "api/X10D.IO.Int64Extensions.html",
    "title": "Class Int64Extensions | X10D",
    "keywords": "Class Int64Extensions IO-related extension methods for . Inheritance System.Object Int64Extensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class Int64Extensions : object Methods | Improve this Doc View Source GetBytes(Int64) Returns the current 64-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(this long value) Parameters Type Name Description System.Int64 value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 8. | Improve this Doc View Source GetBytes(Int64, Endianness) Returns the current 64-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(this long value, Endianness endianness) Parameters Type Name Description System.Int64 value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 8. | Improve this Doc View Source TryWriteBytes(Int64, Span<Byte>) Converts the current 64-bit signed integer a span of bytes. Declaration public static bool TryWriteBytes(this long value, Span<byte> destination) Parameters Type Name Description System.Int64 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(Int64, Span<Byte>, Endianness) Converts the current 64-bit signed integer a span of bytes. Declaration public static bool TryWriteBytes(this long value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.Int64 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.ListOfByteExtensions.html": {
    "href": "api/X10D.IO.ListOfByteExtensions.html",
    "title": "Class ListOfByteExtensions | X10D",
    "keywords": "Class ListOfByteExtensions Extension methods for array. Inheritance System.Object ListOfByteExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class ListOfByteExtensions : object Methods | Improve this Doc View Source AsString(IReadOnlyList<Byte>) Converts the numeric value of each element of a specified list of bytes to its equivalent hexadecimal string representation. Declaration public static string AsString(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.String A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in source ; for example, \"7F-2C-4A-00\". | Improve this Doc View Source ToDouble(IReadOnlyList<Byte>) Returns a double-precision floating point number converted from eight bytes. Declaration public static double ToDouble(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.Double A double-precision floating point number formed by eight bytes. | Improve this Doc View Source ToDouble(IReadOnlyList<Byte>, Int32) Returns a double-precision floating point number converted from eight bytes at a specified position in a list of bytes. Declaration public static double ToDouble(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.Double A double-precision floating point number formed by eight bytes beginning at startIndex . | Improve this Doc View Source ToInt16(IReadOnlyList<Byte>) Returns a 16-bit signed integer converted from two bytes. Declaration public static short ToInt16(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.Int16 A 16-bit signed integer formed by two bytes. | Improve this Doc View Source ToInt16(IReadOnlyList<Byte>, Int32) Returns a 16-bit signed integer converted from two bytes at a specified position in a list of bytes. Declaration public static short ToInt16(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.Int16 A 16-bit signed integer formed by two bytes beginning at startIndex . | Improve this Doc View Source ToInt32(IReadOnlyList<Byte>) Returns a 32-bit signed integer converted from four bytes. Declaration public static int ToInt32(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.Int32 A 32-bit signed integer formed by four bytes. | Improve this Doc View Source ToInt32(IReadOnlyList<Byte>, Int32) Returns a 32-bit signed integer converted from four bytes at a specified position in a list of bytes. Declaration public static int ToInt32(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.Int32 A 32-bit signed integer formed by four bytes beginning at startIndex . | Improve this Doc View Source ToInt64(IReadOnlyList<Byte>) Returns a 64-bit signed integer converted from eight bytes. Declaration public static long ToInt64(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.Int64 A 64-bit signed integer formed by eight bytes. | Improve this Doc View Source ToInt64(IReadOnlyList<Byte>, Int32) Returns a 64-bit signed integer converted from eight bytes at a specified position in a list of bytes. Declaration public static long ToInt64(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.Int64 A 64-bit signed integer formed by eight bytes beginning at startIndex . | Improve this Doc View Source ToSingle(IReadOnlyList<Byte>) Returns a single-precision floating point number converted from four bytes. Declaration public static float ToSingle(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.Single A single-precision floating point number formed by four bytes. | Improve this Doc View Source ToSingle(IReadOnlyList<Byte>, Int32) Returns a single-precision floating point number converted from four bytes at a specified position in a list of bytes. Declaration public static float ToSingle(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.Single A single-precision floating point number formed by four bytes beginning at startIndex . | Improve this Doc View Source ToString(IReadOnlyList<Byte>, Encoding) Decodes all the bytes within the current list of bytes to a string, using a specified encoding. Declaration public static string ToString(this IReadOnlyList<byte> source, Encoding encoding) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Encoding encoding The encoding which should be used to decode source . Returns Type Description System.String A string that contains the results of decoding the specified sequence of bytes. | Improve this Doc View Source ToUInt16(IReadOnlyList<Byte>) Returns a 16-bit unsigned integer converted from two bytes. Declaration public static ushort ToUInt16(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.UInt16 A 16-bit unsigned integer formed by two bytes. | Improve this Doc View Source ToUInt16(IReadOnlyList<Byte>, Int32) Returns a 16-bit unsigned integer converted from two bytes at a specified position in a list of bytes. Declaration public static ushort ToUInt16(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.UInt16 A 16-bit unsigned integer formed by two bytes beginning at startIndex . | Improve this Doc View Source ToUInt32(IReadOnlyList<Byte>) Returns a 32-bit unsigned integer converted from four bytes. Declaration public static uint ToUInt32(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.UInt32 A 32-bit unsigned integer formed by four bytes. | Improve this Doc View Source ToUInt32(IReadOnlyList<Byte>, Int32) Returns a 32-bit unsigned integer converted from four bytes at a specified position in a list of bytes. Declaration public static uint ToUInt32(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.UInt32 A 32-bit unsigned integer formed by four bytes beginning at startIndex . | Improve this Doc View Source ToUInt64(IReadOnlyList<Byte>) Returns a 64-bit unsigned integer converted from eight bytes. Declaration public static ulong ToUInt64(this IReadOnlyList<byte> source) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. Returns Type Description System.UInt64 A 64-bit unsigned integer formed by eight bytes. | Improve this Doc View Source ToUInt64(IReadOnlyList<Byte>, Int32) Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a list of bytes. Declaration public static ulong ToUInt64(this IReadOnlyList<byte> source, int startIndex) Parameters Type Name Description IReadOnlyList < System.Byte > source The source list of bytes. System.Int32 startIndex The starting position within source . Returns Type Description System.UInt64 A 64-bit unsigned integer formed by eight bytes beginning at startIndex ."
  },
  "api/X10D.IO.SByteExtensions.html": {
    "href": "api/X10D.IO.SByteExtensions.html",
    "title": "Class SByteExtensions | X10D",
    "keywords": "Class SByteExtensions IO-related extension methods for . Inheritance System.Object SByteExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class SByteExtensions : object Methods | Improve this Doc View Source GetBytes(SByte) Returns the current 16-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this sbyte value) Parameters Type Name Description System.SByte value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 1. | Improve this Doc View Source TryWriteBytes(SByte, Span<Byte>) Converts the current 16-bit unsigned integer into a span of bytes. Declaration public static bool TryWriteBytes(this sbyte value, Span<byte> destination) Parameters Type Name Description System.SByte value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.SingleExtensions.html": {
    "href": "api/X10D.IO.SingleExtensions.html",
    "title": "Class SingleExtensions | X10D",
    "keywords": "Class SingleExtensions IO-related extension methods for . Inheritance System.Object SingleExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class SingleExtensions : object Methods | Improve this Doc View Source GetBytes(Single) Returns the current single-precision floating-point value as an array of bytes. Declaration public static byte[] GetBytes(this float value) Parameters Type Name Description System.Single value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 4. | Improve this Doc View Source GetBytes(Single, Endianness) Returns the current single-precision floating-point value as an array of bytes. Declaration public static byte[] GetBytes(this float value, Endianness endianness) Parameters Type Name Description System.Single value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 4. | Improve this Doc View Source TryWriteBytes(Single, Span<Byte>) Converts the current single-precision floating-point into a span of bytes. Declaration public static bool TryWriteBytes(this float value, Span<byte> destination) Parameters Type Name Description System.Single value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(Single, Span<Byte>, Endianness) Converts the current single-precision floating-point into a span of bytes. Declaration public static bool TryWriteBytes(this float value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.Single value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.StreamExtensions.html": {
    "href": "api/X10D.IO.StreamExtensions.html",
    "title": "Class StreamExtensions | X10D",
    "keywords": "Class StreamExtensions IO-related extension methods for . Inheritance System.Object StreamExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class StreamExtensions : object Methods | Improve this Doc View Source GetHash<T>(Stream) Returns the hash of the current stream as an array of bytes using the specified hash algorithm. Declaration public static byte[] GetHash<T>(this Stream stream) where T : HashAlgorithm Parameters Type Name Description Stream stream The stream whose hash is to be computed. Returns Type Description System.Byte [] The hash of stream represented as an array of bytes. Type Parameters Name Description T The type of the whose is to be used for computing the hash. | Improve this Doc View Source ReadDecimal(Stream) Reads a decimal value from the current stream using the system's default endian encoding, and advances the stream position by sixteen bytes. Declaration public static decimal ReadDecimal(this Stream stream) Parameters Type Name Description Stream stream The stream to read. Returns Type Description System.Decimal A sixteen-byte decimal value read from the stream. | Improve this Doc View Source ReadDecimal(Stream, Endianness) Reads a decimal value from the current stream using a specified endian encoding, and advances the stream position by sixteen bytes. Declaration public static decimal ReadDecimal(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.Decimal A decimal value read from the stream. | Improve this Doc View Source ReadDouble(Stream) Reads a double-precision floating point value from the current stream using the system's default endian encoding, and advances the stream position by eight bytes. Declaration public static double ReadDouble(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.Double A double-precision floating point value read from the stream. | Improve this Doc View Source ReadDouble(Stream, Endianness) Reads a double-precision floating point value from the current stream using a specified endian encoding, and advances the stream position by eight bytes. Declaration public static double ReadDouble(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.Double A double-precision floating point value read from the stream. | Improve this Doc View Source ReadInt16(Stream) Reads a two-byte signed integer from the current stream using the system's default endian encoding, and advances the stream position by two bytes. Declaration public static short ReadInt16(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.Int16 An two-byte signed integer read from the stream. | Improve this Doc View Source ReadInt16(Stream, Endianness) Reads a two-byte signed integer from the current stream using the specified endian encoding, and advances the stream position by two bytes. Declaration public static short ReadInt16(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.Int16 An two-byte unsigned integer read from the stream. | Improve this Doc View Source ReadInt32(Stream) Reads a four-byte signed integer from the current stream using the system's default endian encoding, and advances the stream position by four bytes. Declaration public static int ReadInt32(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.Int32 An four-byte signed integer read from the stream. | Improve this Doc View Source ReadInt32(Stream, Endianness) Reads a four-byte signed integer from the current stream using the specified endian encoding, and advances the stream position by four bytes. Declaration public static int ReadInt32(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 An four-byte unsigned integer read from the stream. | Improve this Doc View Source ReadInt64(Stream) Reads an eight-byte signed integer from the current stream using the system's default endian encoding, and advances the stream position by eight bytes. Declaration public static long ReadInt64(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.Int64 An eight-byte signed integer read from the stream. | Improve this Doc View Source ReadInt64(Stream, Endianness) Reads an eight-byte signed integer from the current stream using the specified endian encoding, and advances the stream position by eight bytes. Declaration public static long ReadInt64(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.Int64 An eight-byte unsigned integer read from the stream. | Improve this Doc View Source ReadSingle(Stream) Reads a single-precision floating point value from the current stream using the system's default endian encoding, and advances the stream position by four bytes. Declaration public static double ReadSingle(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.Double A single-precision floating point value read from the stream. | Improve this Doc View Source ReadSingle(Stream, Endianness) Reads a double-precision floating point value from the current stream using a specified endian encoding, and advances the stream position by four bytes. Declaration public static float ReadSingle(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.Single A single-precision floating point value read from the stream. | Improve this Doc View Source ReadUInt16(Stream) Reads a two-byte unsigned integer from the current stream using the system's default endian encoding, and advances the stream position by two bytes. Declaration public static ushort ReadUInt16(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.UInt16 An two-byte unsigned integer read from the stream. | Improve this Doc View Source ReadUInt16(Stream, Endianness) Reads a two-byte unsigned integer from the current stream using the specified endian encoding, and advances the stream position by two bytes. Declaration public static ushort ReadUInt16(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.UInt16 An two-byte unsigned integer read from the stream. | Improve this Doc View Source ReadUInt32(Stream) Reads a four-byte unsigned integer from the current stream using the system's default endian encoding, and advances the stream position by four bytes. Declaration public static uint ReadUInt32(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.UInt32 An four-byte unsigned integer read from the stream. | Improve this Doc View Source ReadUInt32(Stream, Endianness) Reads a four-byte unsigned integer from the current stream using the specified endian encoding, and advances the stream position by four bytes. Declaration public static uint ReadUInt32(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.UInt32 An four-byte unsigned integer read from the stream. | Improve this Doc View Source ReadUInt64(Stream) Reads an eight-byte unsigned integer from the current stream using the system's default endian encoding, and advances the stream position by eight bytes. Declaration public static ulong ReadUInt64(this Stream stream) Parameters Type Name Description Stream stream The stream from which the value should be read. Returns Type Description System.UInt64 An eight-byte unsigned integer read from the stream. | Improve this Doc View Source ReadUInt64(Stream, Endianness) Reads an eight-byte unsigned integer from the current stream using the specified endian encoding, and advances the stream position by eight bytes. Declaration public static ulong ReadUInt64(this Stream stream, Endianness endianness) Parameters Type Name Description Stream stream The stream from which the value should be read. Endianness endianness The endian encoding to use. Returns Type Description System.UInt64 An eight-byte unsigned integer read from the stream. | Improve this Doc View Source TryWriteHash<T>(Stream, Span<Byte>, out Int32) Returns the hash of the current stream as an array of bytes using the specified hash algorithm. Declaration public static bool TryWriteHash<T>(this Stream stream, Span<byte> destination, out int bytesWritten) where T : HashAlgorithm Parameters Type Name Description Stream stream The stream whose hash is to be computed. Span < System.Byte > destination When this method returns, contains the computed hash of stream . System.Int32 bytesWritten When this method returns, the total number of bytes written into destination. This parameter is treated as uninitialized. Returns Type Description System.Boolean true if the destination is long enough to receive the hash; otherwise, false . Type Parameters Name Description T The type of the whose is to be used for computing the hash. | Improve this Doc View Source Write(Stream, Decimal, Endianness) Writes a decimal value to the current stream using the specified endian encoding, and advances the stream position by sixteen bytes. Declaration public static int Write(this Stream stream, decimal value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Decimal value The decimal value to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Double, Endianness) Writes a double-precision floating point value to the current stream using the specified endian encoding, and advances the stream position by eight bytes. Declaration public static int Write(this Stream stream, double value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Double value The double-precision floating point value to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Int16) Writes a two-byte signed integer to the current stream using the system's default endian encoding, and advances the stream position by two bytes. Declaration public static int Write(this Stream stream, short value) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Int16 value The two-byte signed integer to write. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Int16, Endianness) Writes a two-byte signed integer to the current stream using the specified endian encoding, and advances the stream position by two bytes. Declaration public static int Write(this Stream stream, short value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Int16 value The two-byte signed integer to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Int32) Writes a four-byte signed integer to the current stream using the system's default endian encoding, and advances the stream position by four bytes. Declaration public static int Write(this Stream stream, int value) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Int32 value The four-byte signed integer to write. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Int32, Endianness) Writes a four-byte signed integer to the current stream using the specified endian encoding, and advances the stream position by four bytes. Declaration public static int Write(this Stream stream, int value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Int32 value The four-byte signed integer to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Int64) Writes an eight-byte signed integer to the current stream using the system's default endian encoding, and advances the stream position by eight bytes. Declaration public static int Write(this Stream stream, long value) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Int64 value The eight-byte signed integer to write. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Int64, Endianness) Writes an eight-byte signed integer to the current stream using the specified endian encoding, and advances the stream position by eight bytes. Declaration public static int Write(this Stream stream, long value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Int64 value The eight-byte signed integer to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, Single, Endianness) Writes a single-precision floating point value to the current stream using the specified endian encoding, and advances the stream position by four bytes. Declaration public static int Write(this Stream stream, float value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.Single value The single-precision floating point value to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, UInt16) Writes a two-byte unsigned integer to the current stream using the system's default endian encoding, and advances the stream position by two bytes. Declaration public static int Write(this Stream stream, ushort value) Parameters Type Name Description Stream stream The stream to which the value should be written. System.UInt16 value The two-byte unsigned integer to write. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, UInt16, Endianness) Writes a two-byte unsigned integer to the current stream using the specified endian encoding, and advances the stream position by two bytes. Declaration public static int Write(this Stream stream, ushort value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.UInt16 value The two-byte unsigned integer to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, UInt32) Writes a four-byte unsigned integer to the current stream using the system's default endian encoding, and advances the stream position by four bytes. Declaration public static int Write(this Stream stream, uint value) Parameters Type Name Description Stream stream The stream to which the value should be written. System.UInt32 value The four-byte unsigned integer to write. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, UInt32, Endianness) Writes a four-byte unsigned integer to the current stream using the specified endian encoding, and advances the stream position by four bytes. Declaration public static int Write(this Stream stream, uint value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.UInt32 value The four-byte unsigned integer to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, UInt64) Writes an eight-byte unsigned integer to the current stream using the system's default endian encoding, and advances the stream position by eight bytes. Declaration public static int Write(this Stream stream, ulong value) Parameters Type Name Description Stream stream The stream to which the value should be written. System.UInt64 value The eight-byte unsigned integer to write. Returns Type Description System.Int32 The number of bytes written to the stream. | Improve this Doc View Source Write(Stream, UInt64, Endianness) Writes an eight-byte signed integer to the current stream using the specified endian encoding, and advances the stream position by eight bytes. Declaration public static int Write(this Stream stream, ulong value, Endianness endianness) Parameters Type Name Description Stream stream The stream to which the value should be written. System.UInt64 value The eight-byte signed integer to write. Endianness endianness The endian encoding to use. Returns Type Description System.Int32 The number of bytes written to the stream."
  },
  "api/X10D.IO.TextReaderExtensions.html": {
    "href": "api/X10D.IO.TextReaderExtensions.html",
    "title": "Class TextReaderExtensions | X10D",
    "keywords": "Class TextReaderExtensions IO-related extension methods for . Inheritance System.Object TextReaderExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class TextReaderExtensions : object Methods | Improve this Doc View Source EnumerateLines(TextReader) Enumerates the lines provided by the current text reader. Declaration public static IEnumerable<string> EnumerateLines(this TextReader reader) Parameters Type Name Description TextReader reader The reader whose lines to enumerate. Returns Type Description IEnumerable < System.String > An enumerable collection of lines as read from reader . | Improve this Doc View Source EnumerateLinesAsync(TextReader) Asynchronously enumerates the lines provided by the current text reader. Declaration public static IAsyncEnumerable<string> EnumerateLinesAsync(this TextReader reader) Parameters Type Name Description TextReader reader The reader whose lines to enumerate. Returns Type Description IAsyncEnumerable < System.String > An asynchronous enumerable collection of lines as read from reader ."
  },
  "api/X10D.IO.TextWriterExtensions.html": {
    "href": "api/X10D.IO.TextWriterExtensions.html",
    "title": "Class TextWriterExtensions | X10D",
    "keywords": "Class TextWriterExtensions IO-related extension methods for . Inheritance System.Object TextWriterExtensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class TextWriterExtensions : object Methods | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Double) Writes the text representation of an 8-byte floating-point value to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, double value) Parameters Type Name Description TextWriter writer The to write to. System.Double value The 8-byte floating-point value to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Double, ReadOnlySpan<Char>) Writes the text representation of an 8-byte floating-point value to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, double value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Double value The 8-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Double, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of an 8-byte floating-point value to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, double value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Double value The 8-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Int32) Writes the text representation of a 4-byte signed integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, int value) Parameters Type Name Description TextWriter writer The to write to. System.Int32 value The 4-byte signed integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Int32, ReadOnlySpan<Char>) Writes the text representation of a 4-byte signed integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, int value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Int32 value The 4-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Int32, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of a 4-byte signed integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, int value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Int32 value The 4-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Int64) Writes the text representation of an 8-byte signed integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, long value) Parameters Type Name Description TextWriter writer The to write to. System.Int64 value The 8-byte signed integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Int64, ReadOnlySpan<Char>) Writes the text representation of an 8-byte signed integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, long value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Int64 value The 8-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Int64, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of an 8-byte signed integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, long value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Int64 value The 8-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Single) Writes the text representation of a 4-byte floating-point value to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, float value) Parameters Type Name Description TextWriter writer The to write to. System.Single value The 4-byte floating-point value to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Single, ReadOnlySpan<Char>) Writes the text representation of a 4-byte floating-point value to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, float value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Single value The 4-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, Single, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of a 4-byte floating-point value to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, float value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Single value The 4-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, UInt32) Writes the text representation of a 4-byte unsigned integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, uint value) Parameters Type Name Description TextWriter writer The to write to. System.UInt32 value The 4-byte unsigned integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, UInt32, ReadOnlySpan<Char>) Writes the text representation of a 4-byte unsigned integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, uint value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.UInt32 value The 4-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, UInt32, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of a 4-byte unsigned integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, uint value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.UInt32 value The 4-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, UInt64) Writes the text representation of an 8-byte unsigned integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, ulong value) Parameters Type Name Description TextWriter writer The to write to. System.UInt64 value The 8-byte unsigned integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, UInt64, ReadOnlySpan<Char>) Writes the text representation of an 8-byte unsigned integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, ulong value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.UInt64 value The 8-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteLineNoAlloc(TextWriter, UInt64, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of an 8-byte unsigned integer to the text stream, followed by a line terminator, without allocating a string. Declaration public static void WriteLineNoAlloc(this TextWriter writer, ulong value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.UInt64 value The 8-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Double) Writes the text representation of an 8-byte floating-point value to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, double value) Parameters Type Name Description TextWriter writer The to write to. System.Double value The 8-byte floating-point value to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Double, ReadOnlySpan<Char>) Writes the text representation of an 8-byte floating-point value to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, double value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Double value The 8-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Double, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of an 8-byte floating-point value to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, double value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Double value The 8-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Int32) Writes the text representation of a 4-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, int value) Parameters Type Name Description TextWriter writer The to write to. System.Int32 value The 4-byte signed integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Int32, ReadOnlySpan<Char>) Writes the text representation of a 4-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, int value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Int32 value The 4-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Int32, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of a 4-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, int value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Int32 value The 4-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Int64) Writes the text representation of an 8-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, long value) Parameters Type Name Description TextWriter writer The to write to. System.Int64 value The 8-byte signed integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Int64, ReadOnlySpan<Char>) Writes the text representation of an 8-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, long value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Int64 value The 8-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Int64, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of an 8-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, long value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Int64 value The 8-byte signed integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Single) Writes the text representation of a 4-byte floating-point value to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, float value) Parameters Type Name Description TextWriter writer The to write to. System.Single value The 4-byte floating-point value to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Single, ReadOnlySpan<Char>) Writes the text representation of a 4-byte floating-point value to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, float value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.Single value The 4-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, Single, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of a 4-byte floating-point value to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, float value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.Single value The 4-byte floating-point value to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, UInt32) Writes the text representation of a 4-byte unsigned integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, uint value) Parameters Type Name Description TextWriter writer The to write to. System.UInt32 value The 4-byte unsigned integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, UInt32, ReadOnlySpan<Char>) Writes the text representation of a 4-byte unsigned integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, uint value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.UInt32 value The 4-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, UInt32, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of a 4-byte unsigned integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, uint value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.UInt32 value The 4-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, UInt64) Writes the text representation of an 8-byte unsigned integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, ulong value) Parameters Type Name Description TextWriter writer The to write to. System.UInt64 value The 8-byte unsigned integer to write. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, UInt64, ReadOnlySpan<Char>) Writes the text representation of an 8-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, ulong value, ReadOnlySpan<char> format) Parameters Type Name Description TextWriter writer The to write to. System.UInt64 value The 8-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer. | Improve this Doc View Source WriteNoAlloc(TextWriter, UInt64, ReadOnlySpan<Char>, Nullable<IFormatProvider>) Writes the text representation of an 8-byte signed integer to the text stream, without allocating a string. Declaration public static void WriteNoAlloc(this TextWriter writer, ulong value, ReadOnlySpan<char> format, IFormatProvider? formatProvider) Parameters Type Name Description TextWriter writer The to write to. System.UInt64 value The 8-byte unsigned integer to write. ReadOnlySpan < System.Char > format A standard or custom numeric format string. System.Nullable < IFormatProvider > formatProvider An object that supplies culture-specific formatting information. Remarks This method may still allocate if the integer is too large to fit in a stack-allocated buffer."
  },
  "api/X10D.IO.UInt16Extensions.html": {
    "href": "api/X10D.IO.UInt16Extensions.html",
    "title": "Class UInt16Extensions | X10D",
    "keywords": "Class UInt16Extensions IO-related extension methods for . Inheritance System.Object UInt16Extensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class UInt16Extensions : object Methods | Improve this Doc View Source GetBytes(UInt16) Returns the current 16-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this ushort value) Parameters Type Name Description System.UInt16 value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 2. | Improve this Doc View Source GetBytes(UInt16, Endianness) Returns the current 16-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this ushort value, Endianness endianness) Parameters Type Name Description System.UInt16 value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 2. | Improve this Doc View Source TryWriteBytes(UInt16, Span<Byte>) Converts the current 16-bit unsigned integer into a span of bytes. Declaration public static bool TryWriteBytes(this ushort value, Span<byte> destination) Parameters Type Name Description System.UInt16 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(UInt16, Span<Byte>, Endianness) Converts the current 16-bit unsigned integer into a span of bytes. Declaration public static bool TryWriteBytes(this ushort value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.UInt16 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.UInt32Extensions.html": {
    "href": "api/X10D.IO.UInt32Extensions.html",
    "title": "Class UInt32Extensions | X10D",
    "keywords": "Class UInt32Extensions IO-related extension methods for . Inheritance System.Object UInt32Extensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class UInt32Extensions : object Methods | Improve this Doc View Source GetBytes(UInt32) Returns the current 32-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this uint value) Parameters Type Name Description System.UInt32 value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 4. | Improve this Doc View Source GetBytes(UInt32, Endianness) Returns the current 32-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this uint value, Endianness endianness) Parameters Type Name Description System.UInt32 value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 4. | Improve this Doc View Source TryWriteBytes(UInt32, Span<Byte>) Converts the current 32-bit unsigned integer into a span of bytes. Declaration public static bool TryWriteBytes(this uint value, Span<byte> destination) Parameters Type Name Description System.UInt32 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(UInt32, Span<Byte>, Endianness) Converts the current 32-bit unsigned integer into a span of bytes. Declaration public static bool TryWriteBytes(this uint value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.UInt32 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.IO.UInt64Extensions.html": {
    "href": "api/X10D.IO.UInt64Extensions.html",
    "title": "Class UInt64Extensions | X10D",
    "keywords": "Class UInt64Extensions IO-related extension methods for . Inheritance System.Object UInt64Extensions Namespace : X10D.IO Assembly : X10D.dll Syntax public static class UInt64Extensions : object Methods | Improve this Doc View Source GetBytes(UInt64) Returns the current 64-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this ulong value) Parameters Type Name Description System.UInt64 value The number to convert. Returns Type Description System.Byte [] An array of bytes with length 8. | Improve this Doc View Source GetBytes(UInt64, Endianness) Returns the current 64-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(this ulong value, Endianness endianness) Parameters Type Name Description System.UInt64 value The number to convert. Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Byte [] An array of bytes with length 8. | Improve this Doc View Source TryWriteBytes(UInt64, Span<Byte>) Converts the current 64-bit unsigned integer into a span of bytes. Declaration public static bool TryWriteBytes(this ulong value, Span<byte> destination) Parameters Type Name Description System.UInt64 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Returns Type Description System.Boolean true if the conversion was successful; otherwise, false . | Improve this Doc View Source TryWriteBytes(UInt64, Span<Byte>, Endianness) Converts the current 64-bit unsigned integer into a span of bytes. Declaration public static bool TryWriteBytes(this ulong value, Span<byte> destination, Endianness endianness) Parameters Type Name Description System.UInt64 value The value. Span < System.Byte > destination When this method returns, the bytes representing the converted . Endianness endianness The endianness with which to write the bytes. Returns Type Description System.Boolean true if the conversion was successful; otherwise, false ."
  },
  "api/X10D.Linq.ByteExtensions.html": {
    "href": "api/X10D.Linq.ByteExtensions.html",
    "title": "Class ByteExtensions | X10D",
    "keywords": "Class ByteExtensions LINQ-inspired extension methods for of . Inheritance System.Object ByteExtensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class ByteExtensions : object Methods | Improve this Doc View Source Product(IEnumerable<Byte>) Computes the product of a sequence of values. Declaration public static byte Product(this IEnumerable<byte> source) Parameters Type Name Description IEnumerable < System.Byte > source A sequence of values that are used to calculate the product. Returns Type Description System.Byte The product the values in the sequence. | Improve this Doc View Source Product(IEnumerable<SByte>) Computes the product of a sequence of values. Declaration public static sbyte Product(this IEnumerable<sbyte> source) Parameters Type Name Description IEnumerable < System.SByte > source A sequence of values that are used to calculate the product. Returns Type Description System.SByte The product the values in the sequence. | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static byte Product<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.Byte > selector A transform function to apply to each element. Returns Type Description System.Byte The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static sbyte Product<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.SByte > selector A transform function to apply to each element. Returns Type Description System.SByte The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source RangeTo(Byte, Byte) Returns an enumerable sequence of 8-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<byte> RangeTo(this byte value, byte end) Parameters Type Name Description System.Byte value The starting value of the sequence. System.Byte end The ending value of the sequence. Returns Type Description IEnumerable < System.Byte > An enumerable collection of 8-bit integers, ranging from value to end . | Improve this Doc View Source RangeTo(Byte, Int16) Returns an enumerable sequence of 16-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<short> RangeTo(this byte value, short end) Parameters Type Name Description System.Byte value The starting value of the sequence. System.Int16 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int16 > An enumerable collection of 16-bit integers, ranging from value to end . | Improve this Doc View Source RangeTo(Byte, Int32) Returns an enumerable sequence of 32-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<int> RangeTo(this byte value, int end) Parameters Type Name Description System.Byte value The starting value of the sequence. System.Int32 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int32 > An enumerable collection of 32-bit integers, ranging from value to end . | Improve this Doc View Source RangeTo(Byte, Int64) Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<long> RangeTo(this byte value, long end) Parameters Type Name Description System.Byte value The starting value of the sequence. System.Int64 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int64 > An enumerable collection of 64-bit integers, ranging from value to end ."
  },
  "api/X10D.Linq.DecimalExtensions.html": {
    "href": "api/X10D.Linq.DecimalExtensions.html",
    "title": "Class DecimalExtensions | X10D",
    "keywords": "Class DecimalExtensions LINQ-inspired extension methods for of . Inheritance System.Object DecimalExtensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class DecimalExtensions : object Methods | Improve this Doc View Source Product(IEnumerable<Decimal>) Computes the product of a sequence of values. Declaration public static decimal Product(this IEnumerable<decimal> source) Parameters Type Name Description IEnumerable < System.Decimal > source A sequence of values that are used to calculate the product. Returns Type Description System.Decimal The product the values in the sequence. | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static decimal Product<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.Decimal > selector A transform function to apply to each element. Returns Type Description System.Decimal The product of the projected values. Type Parameters Name Description TSource The type of the elements of source ."
  },
  "api/X10D.Linq.DoubleExtensions.html": {
    "href": "api/X10D.Linq.DoubleExtensions.html",
    "title": "Class DoubleExtensions | X10D",
    "keywords": "Class DoubleExtensions LINQ-inspired extension methods for of . Inheritance System.Object DoubleExtensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class DoubleExtensions : object Methods | Improve this Doc View Source Product(IEnumerable<Double>) Computes the product of a sequence of values. Declaration public static double Product(this IEnumerable<double> source) Parameters Type Name Description IEnumerable < System.Double > source A sequence of values that are used to calculate the product. Returns Type Description System.Double The product the values in the sequence. | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, Double>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static double Product<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.Double > selector A transform function to apply to each element. Returns Type Description System.Double The product of the projected values. Type Parameters Name Description TSource The type of the elements of source ."
  },
  "api/X10D.Linq.EnumerableExtensions.html": {
    "href": "api/X10D.Linq.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | X10D",
    "keywords": "Class EnumerableExtensions LINQ-inspired extension methods for . Inheritance System.Object EnumerableExtensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class EnumerableExtensions : object Methods | Improve this Doc View Source ConcatOne<TSource>(IEnumerable<TSource>, TSource) Concatenates a single value to the end of a sequence. Declaration public static IEnumerable<TSource> ConcatOne<TSource>(this IEnumerable<TSource> source, TSource value) Parameters Type Name Description IEnumerable <TSource> source The source sequence. TSource value The value to concatenate to the end of the source sequence. Returns Type Description IEnumerable <TSource> An that contains the concatenated elements of the input sequence, and the specified value. Type Parameters Name Description TSource The type of the elements in source . | Improve this Doc View Source Except<TSource>(IEnumerable<TSource>, TSource) Filters a sequence of values by omitting elements that match a specified value. Declaration public static IEnumerable<TSource> Except<TSource>(this IEnumerable<TSource> source, TSource item) Parameters Type Name Description IEnumerable <TSource> source An to filter. TSource item The value to omit. Returns Type Description IEnumerable <TSource> An that contains elements from the input sequence that do not match the specified value. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source MinMax<T>(IEnumerable<T>) Returns the minimum and maximum values in a sequence of values. Declaration public static (T Minimum, T Maximum) MinMax<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source A sequence of values to determine the minimum and maximum values of. Returns Type Description System.ValueTuple <T, T> A tuple containing the minimum and maximum values in source . Type Parameters Name Description T The type of the elements in source . | Improve this Doc View Source MinMax<T>(IEnumerable<T>, Nullable<IComparer<T>>) Returns the minimum and maximum values in a sequence of values, using a specified comparer. Declaration public static (T Minimum, T Maximum) MinMax<T>(this IEnumerable<T> source, IComparer<T>? comparer) Parameters Type Name Description IEnumerable <T> source A sequence of values to determine the minimum and maximum values of. System.Nullable < IComparer <T>> comparer The comparer which shall be used to compare each element in the sequence. Returns Type Description System.ValueTuple <T, T> A tuple containing the minimum and maximum values in source . Type Parameters Name Description T The type of the elements in source . | Improve this Doc View Source MinMax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Invokes a transform function on each element of a sequence of elements and returns the minimum and maximum values. Declaration public static (TResult Minimum, TResult Maximum) MinMax<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values to determine the minimum and maximum values of. Func <TSource, TResult> selector A transform function to apply to each element. Returns Type Description System.ValueTuple <TResult, TResult> A tuple containing the minimum and maximum values in source . Type Parameters Name Description TSource The type of the elements in source . TResult The type of the elements to compare. | Improve this Doc View Source MinMax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, Nullable<IComparer<TResult>>) Invokes a transform function on each element of a sequence of elements and returns the minimum and maximum values, using a specified comparer. Declaration public static (TResult Minimum, TResult Maximum) MinMax<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector, IComparer<TResult>? comparer) Parameters Type Name Description IEnumerable <TSource> source A sequence of values to determine the minimum and maximum values of. Func <TSource, TResult> selector A transform function to apply to each element. System.Nullable < IComparer <TResult>> comparer The comparer which shall be used to compare each element in the sequence. Returns Type Description System.ValueTuple <TResult, TResult> A tuple containing the minimum and maximum values in source . Type Parameters Name Description TSource The type of the elements in source . TResult The type of the elements to compare. | Improve this Doc View Source MinMaxBy<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Returns the minimum and maximum values in a sequence according to a specified key selector function. Declaration public static (TSource Minimum, TSource Maximum) MinMaxBy<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> keySelector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values to determine the minimum and maximum values of. Func <TSource, TResult> keySelector A function to extract the key for each element. Returns Type Description System.ValueTuple <TSource, TSource> A tuple containing the minimum and maximum values in source . Type Parameters Name Description TSource The type of the elements in source . TResult The type of the elements to compare. | Improve this Doc View Source MinMaxBy<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, Nullable<IComparer<TResult>>) Returns the minimum and maximum values in a sequence according to a specified key selector function. Declaration public static (TSource Minimum, TSource Maximum) MinMaxBy<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> keySelector, IComparer<TResult>? comparer) Parameters Type Name Description IEnumerable <TSource> source A sequence of values to determine the minimum and maximum values of. Func <TSource, TResult> keySelector A function to extract the key for each element. System.Nullable < IComparer <TResult>> comparer The comparer which shall be used to compare each element in the sequence. Returns Type Description System.ValueTuple <TSource, TSource> A tuple containing the minimum and maximum values in source . Type Parameters Name Description TSource The type of the elements in source . TResult The type of the elements to compare."
  },
  "api/X10D.Linq.html": {
    "href": "api/X10D.Linq.html",
    "title": "Namespace X10D.Linq | X10D",
    "keywords": "Namespace X10D.Linq Classes ByteExtensions LINQ-inspired extension methods for of . DecimalExtensions LINQ-inspired extension methods for of . DoubleExtensions LINQ-inspired extension methods for of . EnumerableExtensions LINQ-inspired extension methods for . Int16Extensions LINQ-inspired extension methods for of . Int32Extensions LINQ-inspired extension methods for of . Int64Extensions LINQ-inspired extension methods for of . ReadOnlySpanExtensions Extension methods for . SingleExtensions LINQ-inspired extension methods for of . SpanExtensions Extension methods for ."
  },
  "api/X10D.Linq.Int16Extensions.html": {
    "href": "api/X10D.Linq.Int16Extensions.html",
    "title": "Class Int16Extensions | X10D",
    "keywords": "Class Int16Extensions LINQ-inspired extension methods for of . Inheritance System.Object Int16Extensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class Int16Extensions : object Methods | Improve this Doc View Source Product(IEnumerable<Int16>) Computes the product of a sequence of values. Declaration public static short Product(this IEnumerable<short> source) Parameters Type Name Description IEnumerable < System.Int16 > source A sequence of values that are used to calculate the product. Returns Type Description System.Int16 The product the values in the sequence. | Improve this Doc View Source Product(IEnumerable<UInt16>) Computes the product of a sequence of values. Declaration public static ushort Product(this IEnumerable<ushort> source) Parameters Type Name Description IEnumerable < System.UInt16 > source A sequence of values that are used to calculate the product. Returns Type Description System.UInt16 The product the values in the sequence. | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static short Product<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.Int16 > selector A transform function to apply to each element. Returns Type Description System.Int16 The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static ushort Product<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.UInt16 > selector A transform function to apply to each element. Returns Type Description System.UInt16 The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source RangeTo(Int16, Int16) Returns an enumerable sequence of 16-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<short> RangeTo(this short value, short end) Parameters Type Name Description System.Int16 value The starting value of the sequence. System.Int16 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int16 > An enumerable collection of 16-bit integers, ranging from value to end . | Improve this Doc View Source RangeTo(Int16, Int32) Returns an enumerable sequence of 32-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<int> RangeTo(this short value, int end) Parameters Type Name Description System.Int16 value The starting value of the sequence. System.Int32 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int32 > An enumerable collection of 32-bit integers, ranging from value to end . | Improve this Doc View Source RangeTo(Int16, Int64) Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<long> RangeTo(this short value, long end) Parameters Type Name Description System.Int16 value The starting value of the sequence. System.Int64 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int64 > An enumerable collection of 64-bit integers, ranging from value to end ."
  },
  "api/X10D.Linq.Int32Extensions.html": {
    "href": "api/X10D.Linq.Int32Extensions.html",
    "title": "Class Int32Extensions | X10D",
    "keywords": "Class Int32Extensions LINQ-inspired extension methods for of . Inheritance System.Object Int32Extensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class Int32Extensions : object Methods | Improve this Doc View Source Product(IEnumerable<Int32>) Computes the product of a sequence of values. Declaration public static int Product(this IEnumerable<int> source) Parameters Type Name Description IEnumerable < System.Int32 > source A sequence of values that are used to calculate the product. Returns Type Description System.Int32 The product the values in the sequence. | Improve this Doc View Source Product(IEnumerable<UInt32>) Computes the product of a sequence of values. Declaration public static uint Product(this IEnumerable<uint> source) Parameters Type Name Description IEnumerable < System.UInt32 > source A sequence of values that are used to calculate the product. Returns Type Description System.UInt32 The product the values in the sequence. | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static int Product<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.Int32 > selector A transform function to apply to each element. Returns Type Description System.Int32 The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static uint Product<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.UInt32 > selector A transform function to apply to each element. Returns Type Description System.UInt32 The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source RangeTo(Int32, Int32) Returns an enumerable sequence of 32-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<int> RangeTo(this int value, int end) Parameters Type Name Description System.Int32 value The starting value of the sequence. System.Int32 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int32 > An enumerable collection of 32-bit integers, ranging from value to end . | Improve this Doc View Source RangeTo(Int32, Int64) Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<long> RangeTo(this int value, long end) Parameters Type Name Description System.Int32 value The starting value of the sequence. System.Int64 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int64 > An enumerable collection of 64-bit integers, ranging from value to end ."
  },
  "api/X10D.Linq.Int64Extensions.html": {
    "href": "api/X10D.Linq.Int64Extensions.html",
    "title": "Class Int64Extensions | X10D",
    "keywords": "Class Int64Extensions LINQ-inspired extension methods for of . Inheritance System.Object Int64Extensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class Int64Extensions : object Methods | Improve this Doc View Source Product(IEnumerable<Int64>) Computes the product of a sequence of values. Declaration public static long Product(this IEnumerable<long> source) Parameters Type Name Description IEnumerable < System.Int64 > source A sequence of values that are used to calculate the product. Returns Type Description System.Int64 The product the values in the sequence. | Improve this Doc View Source Product(IEnumerable<UInt64>) Computes the product of a sequence of values. Declaration public static ulong Product(this IEnumerable<ulong> source) Parameters Type Name Description IEnumerable < System.UInt64 > source A sequence of values that are used to calculate the product. Returns Type Description System.UInt64 The product the values in the sequence. | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static long Product<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.Int64 > selector A transform function to apply to each element. Returns Type Description System.Int64 The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static ulong Product<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.UInt64 > selector A transform function to apply to each element. Returns Type Description System.UInt64 The product of the projected values. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source RangeTo(Int64, Int64) Returns an enumerable sequence of 64-bit integers ranging from the current value to a specified value. Declaration public static IEnumerable<long> RangeTo(this long value, long end) Parameters Type Name Description System.Int64 value The starting value of the sequence. System.Int64 end The ending value of the sequence. Returns Type Description IEnumerable < System.Int64 > An enumerable collection of 64-bit integers, ranging from value to end ."
  },
  "api/X10D.Linq.ReadOnlySpanExtensions.html": {
    "href": "api/X10D.Linq.ReadOnlySpanExtensions.html",
    "title": "Class ReadOnlySpanExtensions | X10D",
    "keywords": "Class ReadOnlySpanExtensions Extension methods for . Inheritance System.Object ReadOnlySpanExtensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class ReadOnlySpanExtensions : object Methods | Improve this Doc View Source All<TSource>(ReadOnlySpan<TSource>, Predicate<TSource>) Determines whether all elements of a read-only span satisfy a condition. Declaration public static bool All<TSource>(this ReadOnlySpan<TSource> source, Predicate<TSource> predicate) Parameters Type Name Description ReadOnlySpan <TSource> source A that contains the elements to apply the predicate to. Predicate <TSource> predicate A function to test each element for a condition. Returns Type Description System.Boolean true if every element of the source sequence passes the test in the specified predicate, or if the span is empty; otherwise, false . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Any<TSource>(ReadOnlySpan<TSource>, Predicate<TSource>) Determines whether any element of a read-only span satisfies a condition. Declaration public static bool Any<TSource>(this ReadOnlySpan<TSource> source, Predicate<TSource> predicate) Parameters Type Name Description ReadOnlySpan <TSource> source A that contains the elements to apply the predicate to. Predicate <TSource> predicate A function to test each element for a condition. Returns Type Description System.Boolean true if the source span is not empty and at least one of its elements passes the test in the specified predicate; otherwise, false . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Count<TSource>(ReadOnlySpan<TSource>, Predicate<TSource>) Returns a number that represents how many elements in the specified sequence satisfy a condition. Declaration public static int Count<TSource>(this ReadOnlySpan<TSource> source, Predicate<TSource> predicate) Parameters Type Name Description ReadOnlySpan <TSource> source A that contains elements to be tested and counted. Predicate <TSource> predicate A function to test each element for a condition. Returns Type Description System.Int32 A number that represents how many elements in the sequence satisfy the condition in the predicate function. Type Parameters Name Description TSource The type of the elements in source ."
  },
  "api/X10D.Linq.SingleExtensions.html": {
    "href": "api/X10D.Linq.SingleExtensions.html",
    "title": "Class SingleExtensions | X10D",
    "keywords": "Class SingleExtensions LINQ-inspired extension methods for of . Inheritance System.Object SingleExtensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class SingleExtensions : object Methods | Improve this Doc View Source Product(IEnumerable<Single>) Computes the product of a sequence of values. Declaration public static float Product(this IEnumerable<float> source) Parameters Type Name Description IEnumerable < System.Single > source A sequence of values that are used to calculate the product. Returns Type Description System.Single The product the values in the sequence. | Improve this Doc View Source Product<TSource>(IEnumerable<TSource>, Func<TSource, Single>) Computes the product of a sequence of values that are obtained by invoking a transform function on each element of the input sequence. Declaration public static float Product<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector) Parameters Type Name Description IEnumerable <TSource> source A sequence of values that are used to calculate a product. Func <TSource, System.Single > selector A transform function to apply to each element. Returns Type Description System.Single The product of the projected values. Type Parameters Name Description TSource The type of the elements of source ."
  },
  "api/X10D.Linq.SpanExtensions.html": {
    "href": "api/X10D.Linq.SpanExtensions.html",
    "title": "Class SpanExtensions | X10D",
    "keywords": "Class SpanExtensions Extension methods for . Inheritance System.Object SpanExtensions Namespace : X10D.Linq Assembly : X10D.dll Syntax public static class SpanExtensions : object Methods | Improve this Doc View Source All<TSource>(Span<TSource>, Predicate<TSource>) Determines whether all elements of a span satisfy a condition. Declaration public static bool All<TSource>(this Span<TSource> source, Predicate<TSource> predicate) Parameters Type Name Description Span <TSource> source A that contains the elements to apply the predicate to. Predicate <TSource> predicate A function to test each element for a condition. Returns Type Description System.Boolean true if every element of the source sequence passes the test in the specified predicate, or if the span is empty; otherwise, false . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Any<TSource>(Span<TSource>, Predicate<TSource>) Determines whether any element of a span satisfies a condition. Declaration public static bool Any<TSource>(this Span<TSource> source, Predicate<TSource> predicate) Parameters Type Name Description Span <TSource> source A that contains the elements to apply the predicate to. Predicate <TSource> predicate A function to test each element for a condition. Returns Type Description System.Boolean true if the source span is not empty and at least one of its elements passes the test in the specified predicate; otherwise, false . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc View Source Count<TSource>(Span<TSource>, Predicate<TSource>) Returns a number that represents how many elements in the specified sequence satisfy a condition. Declaration public static int Count<TSource>(this Span<TSource> source, Predicate<TSource> predicate) Parameters Type Name Description Span <TSource> source A that contains elements to be tested and counted. Predicate <TSource> predicate A function to test each element for a condition. Returns Type Description System.Int32 A number that represents how many elements in the sequence satisfy the condition in the predicate function. Type Parameters Name Description TSource The type of the elements in source ."
  },
  "api/X10D.Math.BigIntegerExtensions.html": {
    "href": "api/X10D.Math.BigIntegerExtensions.html",
    "title": "Class BigIntegerExtensions | X10D",
    "keywords": "Class BigIntegerExtensions Math-related extension methods for . Inheritance System.Object BigIntegerExtensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class BigIntegerExtensions : object Methods | Improve this Doc View Source CountDigits(BigInteger) Returns the number of digits in the current integer. Declaration public static int CountDigits(this BigInteger value) Parameters Type Name Description BigInteger value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(BigInteger) Computes the digital root of this 8-bit integer. Declaration public static int DigitalRoot(this BigInteger value) Parameters Type Name Description BigInteger value The value whose digital root to compute. Returns Type Description System.Int32 The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. | Improve this Doc View Source Factorial(BigInteger) Returns the factorial of the current 64-bit signed integer. Declaration public static BigInteger Factorial(this BigInteger value) Parameters Type Name Description BigInteger value The value whose factorial to compute. Returns Type Description BigInteger The factorial of value . | Improve this Doc View Source GreatestCommonFactor(BigInteger, BigInteger) Calculates the greatest common factor between this, and another, . Declaration public static BigInteger GreatestCommonFactor(this BigInteger value, BigInteger other) Parameters Type Name Description BigInteger value The first value. BigInteger other The second value. Returns Type Description BigInteger The greatest common factor between value and other . | Improve this Doc View Source IsOdd(BigInteger) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this BigInteger value) Parameters Type Name Description BigInteger value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(BigInteger) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this BigInteger value) Parameters Type Name Description BigInteger value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(BigInteger, BigInteger) Calculates the lowest common multiple between the current 64-bit signed integer, and another 64-bit signed integer. Declaration public static BigInteger LowestCommonMultiple(this BigInteger value, BigInteger other) Parameters Type Name Description BigInteger value The first value. BigInteger other The second value. Returns Type Description BigInteger The lowest common multiple between value and other . | Improve this Doc View Source Mod(BigInteger, BigInteger) Performs a modulo operation which supports a negative dividend. Declaration public static BigInteger Mod(this BigInteger dividend, BigInteger divisor) Parameters Type Name Description BigInteger dividend The dividend. BigInteger divisor The divisor. Returns Type Description BigInteger The result of dividend mod divisor . Remarks The % operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead remainder. This quirk inherently makes it difficult to use modulo in a negative context, as x % y where x is negative will return a negative value, akin to -(x % y) , even if precedence is forced. This method provides a modulo operation which supports negative dividends. | Improve this Doc View Source MultiplicativePersistence(BigInteger) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this BigInteger value) Parameters Type Name Description BigInteger value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Wrap(BigInteger, BigInteger) Wraps the current integer between 0 and a high value. Declaration public static BigInteger Wrap(this BigInteger value, BigInteger length) Parameters Type Name Description BigInteger value The value to wrap. BigInteger length The exclusive upper bound. Returns Type Description BigInteger The wrapped value. | Improve this Doc View Source Wrap(BigInteger, BigInteger, BigInteger) Wraps the current integer between a low and a high value. Declaration public static BigInteger Wrap(this BigInteger value, BigInteger low, BigInteger high) Parameters Type Name Description BigInteger value The value to wrap. BigInteger low The inclusive lower bound. BigInteger high The exclusive upper bound. Returns Type Description BigInteger The wrapped value."
  },
  "api/X10D.Math.ByteExtensions.html": {
    "href": "api/X10D.Math.ByteExtensions.html",
    "title": "Class ByteExtensions | X10D",
    "keywords": "Class ByteExtensions Math-related extension methods for . Inheritance System.Object ByteExtensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class ByteExtensions : object Methods | Improve this Doc View Source CountDigits(Byte) Returns the number of digits in the current 8-bit unsigned integer. Declaration public static int CountDigits(this byte value) Parameters Type Name Description System.Byte value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(Byte) Computes the digital root of this 8-bit integer. Declaration public static byte DigitalRoot(this byte value) Parameters Type Name Description System.Byte value The value whose digital root to compute. Returns Type Description System.Byte The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. | Improve this Doc View Source Factorial(Byte) Returns the factorial of the current 8-bit unsigned integer. Declaration public static long Factorial(this byte value) Parameters Type Name Description System.Byte value The value whose factorial to compute. Returns Type Description System.Int64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(Byte, Byte) Calculates the greatest common factor between the current 8-bit unsigned integer, and another 8-bit unsigned integer. Declaration public static byte GreatestCommonFactor(this byte value, byte other) Parameters Type Name Description System.Byte value The first value. System.Byte other The second value. Returns Type Description System.Byte The greatest common factor between value and other . | Improve this Doc View Source IsEven(Byte) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this byte value) Parameters Type Name Description System.Byte value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(Byte) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this byte value) Parameters Type Name Description System.Byte value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(Byte) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this byte value) Parameters Type Name Description System.Byte value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(Byte, Byte) Calculates the lowest common multiple between the current 8-bit signed integer, and another 8-bit signed integer. Declaration public static byte LowestCommonMultiple(this byte value, byte other) Parameters Type Name Description System.Byte value The first value. System.Byte other The second value. Returns Type Description System.Byte The lowest common multiple between value and other . | Improve this Doc View Source MultiplicativePersistence(Byte) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this byte value) Parameters Type Name Description System.Byte value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Wrap(Byte, Byte) Wraps the current 8-bit unsigned integer between 0 and a high value. Declaration public static byte Wrap(this byte value, byte length) Parameters Type Name Description System.Byte value The value to wrap. System.Byte length The exclusive upper bound. Returns Type Description System.Byte The wrapped value. | Improve this Doc View Source Wrap(Byte, Byte, Byte) Wraps the current 8-bit unsigned integer between a low and a high value. Declaration public static byte Wrap(this byte value, byte low, byte high) Parameters Type Name Description System.Byte value The value to wrap. System.Byte low The inclusive lower bound. System.Byte high The exclusive upper bound. Returns Type Description System.Byte The wrapped value."
  },
  "api/X10D.Math.ComparableExtensions.html": {
    "href": "api/X10D.Math.ComparableExtensions.html",
    "title": "Class ComparableExtensions | X10D",
    "keywords": "Class ComparableExtensions Extension methods for . Inheritance System.Object ComparableExtensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class ComparableExtensions : object Methods | Improve this Doc View Source Between<T1, T2, T3>(T1, T2, T3, InclusiveOptions) Determines if a specified value falls exclusively between a specified lower bound and upper bound. Declaration public static bool Between<T1, T2, T3>(this T1 value, T2 lower, T3 upper, InclusiveOptions inclusiveOptions = default(InclusiveOptions)) where T1 : IComparable<T2>, IComparable<T3> where T2 : IComparable<T3> where T3 : IComparable<T2> Parameters Type Name Description T1 value The value to compare. T2 lower The exclusive lower bound. T3 upper The exclusive upper bound. InclusiveOptions inclusiveOptions The comparison clusivity. Returns Type Description System.Boolean true if value is between the lower and upper -or- false otherwise. Type Parameters Name Description T1 An type. T2 The first comparison operand type. T3 The second comparison operand type. Examples int firstValue = 42; int secondValue = 15; int lower = 0; int upper = 20; Console.WriteLine($\"{firstValue} between {lower} and {upper}?\"); Console.WriteLine(firstValue.Between(lower, upper)); Console.WriteLine($\"{secondValue} between {lower} and {upper}?\"); Console.WriteLine(secondValue.Between(lower, upper)); // This will output the following: // 42 between 0 and 20? // False // 15 between 0 and 20? // True | Improve this Doc View Source Clamp<T>(T, T, T) Returns the current value clamped to the inclusive range of lower and upper . Declaration public static T Clamp<T>(this T value, T lower, T upper) where T : IComparable<T> Parameters Type Name Description T value The value to be clamped. T lower The lower bound of the result. T upper The upper bound of the result. Returns Type Description T value if lower ≤ value ≤ upper . -or- lower if value < lower . -or- upper if upper < value . Type Parameters Name Description T An type. Examples int value = 42; int lower = 0; int upper = 20; int clamped = value.Clamp(lower, upper); // clamped will be 20 | Improve this Doc View Source GreaterThan<T1, T2>(T1, T2) Determines if the current value is greater than another value. Declaration public static bool GreaterThan<T1, T2>(this T1 value, T2 other) where T1 : IComparable<T2> Parameters Type Name Description T1 value The first value. T2 other The second value. Returns Type Description System.Boolean true if value is greater than other -or- false otherwise. Type Parameters Name Description T1 An type. T2 The comparison operand type. Examples int first = 5; int second = 10; bool result = first.GreaterThan(second); // result will be False | Improve this Doc View Source GreaterThanOrEqualTo<T1, T2>(T1, T2) Determines if the current value is greater than or equal to another value. Declaration public static bool GreaterThanOrEqualTo<T1, T2>(this T1 value, T2 other) where T1 : IComparable<T2> Parameters Type Name Description T1 value The first value. T2 other The second value. Returns Type Description System.Boolean true if value is greater than or equal to other -or- false otherwise. Type Parameters Name Description T1 An type. T2 The comparison operand type. Examples int first = 5; int second = 10; bool result = first.GreaterThanOrEqualTo(second); // result will be False | Improve this Doc View Source LessThan<T1, T2>(T1, T2) Determines if the current value is less than another value. Declaration public static bool LessThan<T1, T2>(this T1 value, T2 other) where T1 : IComparable<T2> Parameters Type Name Description T1 value The first value. T2 other The second value. Returns Type Description System.Boolean true if value is less than other -or- false otherwise. Type Parameters Name Description T1 An type. T2 The comparison operand type. Examples int first = 5; int second = 10; bool result = first.LessThan(second); // result will be True | Improve this Doc View Source LessThanOrEqualTo<T1, T2>(T1, T2) Determines if the current value is less than or equal to another value. Declaration public static bool LessThanOrEqualTo<T1, T2>(this T1 value, T2 other) where T1 : IComparable<T2> Parameters Type Name Description T1 value The first value. T2 other The second value. Returns Type Description System.Boolean true if value is less than or equal to other -or- false otherwise. Type Parameters Name Description T1 An type. T2 The comparison operand type. Examples int first = 5; int second = 10; bool result = first.LessThanOrEqualTo(second); // result will be True | Improve this Doc View Source Max<T>(T, T) Returns the maximum of two values. Declaration public static T Max<T>(this T value, T other) where T : IComparable<T> Parameters Type Name Description T value The first value. T other The second value. Returns Type Description T value if value is greater than other -or- other otherwise. Type Parameters Name Description T A type which implements . Examples int first = 5; int second = 10; int max = first.Max(second); // max will be 10 | Improve this Doc View Source Min<T>(T, T) Returns the minimum of two values. Declaration public static T Min<T>(this T value, T other) where T : IComparable<T> Parameters Type Name Description T value The first value. T other The second value. Returns Type Description T value if value is less than other -or- other otherwise. Type Parameters Name Description T A type which implements . Examples int first = 5; int second = 10; int min = first.Min(second); // min will be 5"
  },
  "api/X10D.Math.DecimalExtensions.html": {
    "href": "api/X10D.Math.DecimalExtensions.html",
    "title": "Class DecimalExtensions | X10D",
    "keywords": "Class DecimalExtensions Extension methods for . Inheritance System.Object DecimalExtensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class DecimalExtensions : object Methods | Improve this Doc View Source ComplexSqrt(Decimal) Returns the complex square root of this decimal number. Declaration public static Complex ComplexSqrt(this decimal value) Parameters Type Name Description System.Decimal value The number whose square root is to be found. Returns Type Description Complex The square root of value . | Improve this Doc View Source IsEven(Decimal) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this decimal value) Parameters Type Name Description System.Decimal value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(Decimal) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this decimal value) Parameters Type Name Description System.Decimal value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source Round(Decimal) Rounds the current value to the nearest whole number. Declaration public static decimal Round(this decimal value) Parameters Type Name Description System.Decimal value The value to round. Returns Type Description System.Decimal value rounded to the nearest whole number. | Improve this Doc View Source Round(Decimal, Decimal) Rounds the current value to the nearest multiple of a specified number. Declaration public static decimal Round(this decimal value, decimal nearest) Parameters Type Name Description System.Decimal value The value to round. System.Decimal nearest The nearest multiple to which value should be rounded. Returns Type Description System.Decimal value rounded to the nearest multiple of nearest . | Improve this Doc View Source Saturate(Decimal) Saturates this decimal number. Declaration public static decimal Saturate(this decimal value) Parameters Type Name Description System.Decimal value The value to saturate. Returns Type Description System.Decimal The saturated value. Remarks This method clamps value between 0 and 1. | Improve this Doc View Source Sign(Decimal) Returns an integer that indicates the sign of this decimal number. Declaration public static int Sign(this decimal value) Parameters Type Name Description System.Decimal value A signed number. Returns Type Description System.Int32 A number that indicates the sign of value , as shown in the following table. Return value Meaning -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero. | Improve this Doc View Source Sqrt(Decimal) Returns the square root of this decimal number. Declaration public static decimal Sqrt(this decimal value) Parameters Type Name Description System.Decimal value The number whose square root is to be found. Returns Type Description System.Decimal One of the values in the following table. Return value Meaning The positive square root of value . value is greater than or equal to 0. value is equal to or is negative. value is equal to . | Improve this Doc View Source Wrap(Decimal, Decimal) Wraps the current decimal number between 0 and a high value. Declaration public static decimal Wrap(this decimal value, decimal length) Parameters Type Name Description System.Decimal value The value to wrap. System.Decimal length The exclusive upper bound. Returns Type Description System.Decimal The wrapped value. | Improve this Doc View Source Wrap(Decimal, Decimal, Decimal) Wraps the current decimal number between a low and a high value. Declaration public static decimal Wrap(this decimal value, decimal low, decimal high) Parameters Type Name Description System.Decimal value The value to wrap. System.Decimal low The inclusive lower bound. System.Decimal high The exclusive upper bound. Returns Type Description System.Decimal The wrapped value."
  },
  "api/X10D.Math.DoubleExtensions.html": {
    "href": "api/X10D.Math.DoubleExtensions.html",
    "title": "Class DoubleExtensions | X10D",
    "keywords": "Class DoubleExtensions Mathematical extension methods. Inheritance System.Object DoubleExtensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class DoubleExtensions : object Methods | Improve this Doc View Source Acos(Double) Returns the arccosine of the specified value. Declaration public static double Acos(this double value) Parameters Type Name Description System.Double value The value representing a cosine, which must be greater than or equal to -1, but less than or equal to 1. Returns Type Description System.Double The arccosine of value , θ, measured in radians; such that 0 ≤ θ ≤ π. If value is equal to , less than -1, or greater than 1, is returned. | Improve this Doc View Source Acosh(Double) Returns the hyperbolic arccosine of the specified value. Declaration public static double Acosh(this double value) Parameters Type Name Description System.Double value The value representing a hyperbolic cosine, which must be greater than or equal to 1, but less than or equal to . Returns Type Description System.Double The hyperbolic arccosine of value , θ, measured in radians; such that 0 ≤ θ ≤ ∞. If value is less than 1 or equal to , is returned. | Improve this Doc View Source Asin(Double) Returns the arcsine of the specified value. Declaration public static double Asin(this double value) Parameters Type Name Description System.Double value The value representing a sine, which must be greater than or equal to -1, but less than or equal to 1. Returns Type Description System.Double The arccosine of value , θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If value is equal to , less than -1, or greater than 1, is returned. | Improve this Doc View Source Asinh(Double) Returns the hyperbolic arcsine of the specified value. Declaration public static double Asinh(this double value) Parameters Type Name Description System.Double value The value representing a hyperbolic sine, which must be greater than or equal to 1, but less than or equal to . Returns Type Description System.Double The hyperbolic arccosine of value , measured in radians. If value is equal to , is returned. | Improve this Doc View Source Atan(Double) Returns the arctangent of the specified value. Declaration public static double Atan(this double value) Parameters Type Name Description System.Double value The value representing a tangent, which must be greater than or equal to -1, but less than or equal to 1. Returns Type Description System.Double The arctangent of value , θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If value is equal to , is returned. | Improve this Doc View Source Atanh(Double) Returns the hyperbolic arctangent of the specified value. Declaration public static double Atanh(this double value) Parameters Type Name Description System.Double value The value representing a hyperbolic tangent, which must be greater than or equal to 1, but less than or equal to . Returns Type Description System.Double The hyperbolic arctangent of value , θ, measured in radians; such that -∞ < θ < -1, or 1 < θ < ∞. If value is equal to , less than -1, or greater than 1, is returned. | Improve this Doc View Source ComplexSqrt(Double) Returns the complex square root of this double-precision floating-point number. Declaration public static Complex ComplexSqrt(this double value) Parameters Type Name Description System.Double value The number whose square root is to be found. Returns Type Description Complex The square root of value . | Improve this Doc View Source Cos(Double) Returns the cosine of the specified angle. Declaration public static double Cos(this double value) Parameters Type Name Description System.Double value The angle, measured in radians. Returns Type Description System.Double The cosine of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Cosh(Double) Returns the hyperbolic cosine of the specified angle. Declaration public static double Cosh(this double value) Parameters Type Name Description System.Double value The angle, measured in radians. Returns Type Description System.Double The hyperbolic cosine of value . If value is equal to or , is returned. If value is equal to , is returned. | Improve this Doc View Source DegreesToRadians(Double) Converts the current angle in degrees to its equivalent represented in radians. Declaration public static double DegreesToRadians(this double value) Parameters Type Name Description System.Double value The angle in degrees to convert. Returns Type Description System.Double The result of π * value / 180. | Improve this Doc View Source IsEven(Double) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this double value) Parameters Type Name Description System.Double value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(Double) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this double value) Parameters Type Name Description System.Double value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source RadiansToDegrees(Double) Converts the current angle in radians to its equivalent represented in degrees. Declaration public static double RadiansToDegrees(this double value) Parameters Type Name Description System.Double value The angle in radians to convert. Returns Type Description System.Double The result of π * value / 180. | Improve this Doc View Source Round(Double) Rounds the current value to the nearest whole number. Declaration public static double Round(this double value) Parameters Type Name Description System.Double value The value to round. Returns Type Description System.Double value rounded to the nearest whole number. | Improve this Doc View Source Round(Double, Double) Rounds the current value to the nearest multiple of a specified number. Declaration public static double Round(this double value, double nearest) Parameters Type Name Description System.Double value The value to round. System.Double nearest The nearest multiple to which value should be rounded. Returns Type Description System.Double value rounded to the nearest multiple of nearest . | Improve this Doc View Source Saturate(Double) Saturates this double-precision floating-point number. Declaration public static double Saturate(this double value) Parameters Type Name Description System.Double value The value to saturate. Returns Type Description System.Double The saturated value. Remarks This method clamps value between 0 and 1. | Improve this Doc View Source Sign(Double) Returns an integer that indicates the sign of this double-precision floating-point number. Declaration public static int Sign(this double value) Parameters Type Name Description System.Double value A signed number. Returns Type Description System.Int32 A number that indicates the sign of value , as shown in the following table. Return value Meaning -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero. | Improve this Doc View Source Sin(Double) Returns the sine of the specified angle. Declaration public static double Sin(this double value) Parameters Type Name Description System.Double value The angle, in radians. Returns Type Description System.Double The sine of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Sinh(Double) Returns the hyperbolic sine of the specified angle. Declaration public static double Sinh(this double value) Parameters Type Name Description System.Double value The angle, in radians. Returns Type Description System.Double The hyperbolic sine of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Sqrt(Double) Returns the square root of this double-precision floating-point number. Declaration public static double Sqrt(this double value) Parameters Type Name Description System.Double value The number whose square root is to be found. Returns Type Description System.Double One of the values in the following table. Return value Meaning The positive square root of value . value is greater than or equal to 0. value is equal to or is negative. value is equal to . | Improve this Doc View Source Tan(Double) Returns the tangent of the specified angle. Declaration public static double Tan(this double value) Parameters Type Name Description System.Double value The angle, measured in radians. Returns Type Description System.Double The tangent of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Tanh(Double) Returns the hyperbolic tangent of the specified angle. Declaration public static double Tanh(this double value) Parameters Type Name Description System.Double value The angle, measured in radians. Returns Type Description System.Double The hyperbolic tangent of value . If value is equal to , this method returns -1. If value is equal to , this method returns 1. If value is equal to , this method returns . | Improve this Doc View Source Wrap(Double, Double) Wraps the current double-precision floating-point number between 0 and a high value. Declaration public static double Wrap(this double value, double length) Parameters Type Name Description System.Double value The value to wrap. System.Double length The exclusive upper bound. Returns Type Description System.Double The wrapped value. | Improve this Doc View Source Wrap(Double, Double, Double) Wraps the current double-precision floating-point number between a low and a high value. Declaration public static double Wrap(this double value, double low, double high) Parameters Type Name Description System.Double value The value to wrap. System.Double low The inclusive lower bound. System.Double high The exclusive upper bound. Returns Type Description System.Double The wrapped value."
  },
  "api/X10D.Math.html": {
    "href": "api/X10D.Math.html",
    "title": "Namespace X10D.Math | X10D",
    "keywords": "Namespace X10D.Math Classes BigIntegerExtensions Math-related extension methods for . ByteExtensions Math-related extension methods for . ComparableExtensions Extension methods for . DecimalExtensions Extension methods for . DoubleExtensions Mathematical extension methods. Int16Extensions Extension methods for . Int32Extensions Extension methods for . Int64Extensions Extension methods for . MathUtility Provides static helpers methods for mathematical functions not found in the .NET class. SByteExtensions Math-related extension methods for . SingleExtensions Extension methods for . UInt16Extensions Extension methods for . UInt32Extensions Extension methods for . UInt64Extensions Extension methods for . Enums InclusiveOptions Provides options for Between<T1, T2, T3>(T1, T2, T3, InclusiveOptions) clusivity."
  },
  "api/X10D.Math.InclusiveOptions.html": {
    "href": "api/X10D.Math.InclusiveOptions.html",
    "title": "Enum InclusiveOptions | X10D",
    "keywords": "Enum InclusiveOptions Provides options for Between<T1, T2, T3>(T1, T2, T3, InclusiveOptions) clusivity. Namespace : X10D.Math Assembly : X10D.dll Syntax public enum InclusiveOptions : int Fields Name Description Inclusive Indicates that the comparison will treat both the upper and lower bound as exclusive. LowerInclusive Indicates that the comparison will treat the lower bound as exclusive. None Indicates that the comparison will be exclusive. UpperInclusive Indicates that the comparison will treat the upper bound as exclusive. Extension Methods Extensions.AsArrayValue<InclusiveOptions>() Extensions.AsEnumerableValue<InclusiveOptions>() Extensions.RepeatValue<InclusiveOptions>(Int32)"
  },
  "api/X10D.Math.Int16Extensions.html": {
    "href": "api/X10D.Math.Int16Extensions.html",
    "title": "Class Int16Extensions | X10D",
    "keywords": "Class Int16Extensions Extension methods for . Inheritance System.Object Int16Extensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class Int16Extensions : object Methods | Improve this Doc View Source CountDigits(Int16) Returns the number of digits in the current 16-bit signed integer. Declaration public static int CountDigits(this short value) Parameters Type Name Description System.Int16 value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(Int16) Computes the digital root of this 16-bit integer. Declaration public static short DigitalRoot(this short value) Parameters Type Name Description System.Int16 value The value whose digital root to compute. Returns Type Description System.Int16 The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. For example, the digital root of 239 is 5: 2 + 3 + 9 = 14 , then 1 + 4 = 5 . | Improve this Doc View Source Factorial(Int16) Returns the factorial of the current 16-bit signed integer. Declaration public static long Factorial(this short value) Parameters Type Name Description System.Int16 value The value whose factorial to compute. Returns Type Description System.Int64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(Int16, Int16) Calculates the greatest common factor between the current 16-bit signed integer, and another 16-bit signed integer. Declaration public static short GreatestCommonFactor(this short value, short other) Parameters Type Name Description System.Int16 value The first value. System.Int16 other The second value. Returns Type Description System.Int16 The greatest common factor between value and other . | Improve this Doc View Source IsEven(Int16) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this short value) Parameters Type Name Description System.Int16 value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(Int16) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this short value) Parameters Type Name Description System.Int16 value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(Int16) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this short value) Parameters Type Name Description System.Int16 value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(Int16, Int16) Calculates the lowest common multiple between the current 16-bit signed integer, and another 16-bit signed integer. Declaration public static short LowestCommonMultiple(this short value, short other) Parameters Type Name Description System.Int16 value The first value. System.Int16 other The second value. Returns Type Description System.Int16 The lowest common multiple between value and other . | Improve this Doc View Source Mod(Int16, Int16) Performs a modulo operation which supports a negative dividend. Declaration public static short Mod(this short dividend, short divisor) Parameters Type Name Description System.Int16 dividend The dividend. System.Int16 divisor The divisor. Returns Type Description System.Int16 The result of dividend mod divisor . Remarks The % operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead remainder. This quirk inherently makes it difficult to use modulo in a negative context, as x % y where x is negative will return a negative value, akin to -(x % y) , even if precedence is forced. This method provides a modulo operation which supports negative dividends. | Improve this Doc View Source MultiplicativePersistence(Int16) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this short value) Parameters Type Name Description System.Int16 value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Sign(Int16) Returns an integer that indicates the sign of this 16-bit signed integer. Declaration public static int Sign(this short value) Parameters Type Name Description System.Int16 value A signed number. Returns Type Description System.Int32 A number that indicates the sign of value , as shown in the following table. Return value Meaning -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero. | Improve this Doc View Source Wrap(Int16, Int16) Wraps the current 16-bit signed integer between 0 and a high value. Declaration public static short Wrap(this short value, short length) Parameters Type Name Description System.Int16 value The value to wrap. System.Int16 length The exclusive upper bound. Returns Type Description System.Int16 The wrapped value. | Improve this Doc View Source Wrap(Int16, Int16, Int16) Wraps the current 16-bit signed integer between a low and a high value. Declaration public static short Wrap(this short value, short low, short high) Parameters Type Name Description System.Int16 value The value to wrap. System.Int16 low The inclusive lower bound. System.Int16 high The exclusive upper bound. Returns Type Description System.Int16 The wrapped value."
  },
  "api/X10D.Math.Int32Extensions.html": {
    "href": "api/X10D.Math.Int32Extensions.html",
    "title": "Class Int32Extensions | X10D",
    "keywords": "Class Int32Extensions Extension methods for . Inheritance System.Object Int32Extensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class Int32Extensions : object Methods | Improve this Doc View Source CountDigits(Int32) Returns the number of digits in the current 32-bit signed integer. Declaration public static int CountDigits(this int value) Parameters Type Name Description System.Int32 value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(Int32) Computes the digital root of this 32-bit integer. Declaration public static int DigitalRoot(this int value) Parameters Type Name Description System.Int32 value The value whose digital root to compute. Returns Type Description System.Int32 The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. For example, the digital root of 239 is 5: 2 + 3 + 9 = 14 , then 1 + 4 = 5 . | Improve this Doc View Source Factorial(Int32) Returns the factorial of the current 32-bit signed integer. Declaration public static long Factorial(this int value) Parameters Type Name Description System.Int32 value The value whose factorial to compute. Returns Type Description System.Int64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(Int32, Int32) Calculates the greatest common factor between the current 32-bit signed integer, and another 32-bit signed integer. Declaration public static int GreatestCommonFactor(this int value, int other) Parameters Type Name Description System.Int32 value The first value. System.Int32 other The second value. Returns Type Description System.Int32 The greatest common factor between value and other . | Improve this Doc View Source IsEven(Int32) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this int value) Parameters Type Name Description System.Int32 value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(Int32) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this int value) Parameters Type Name Description System.Int32 value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(Int32) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this int value) Parameters Type Name Description System.Int32 value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(Int32, Int32) Calculates the lowest common multiple between the current 32-bit signed integer, and another 32-bit signed integer. Declaration public static int LowestCommonMultiple(this int value, int other) Parameters Type Name Description System.Int32 value The first value. System.Int32 other The second value. Returns Type Description System.Int32 The lowest common multiple between value and other . | Improve this Doc View Source Mod(Int32, Int32) Performs a modulo operation which supports a negative dividend. Declaration public static int Mod(this int dividend, int divisor) Parameters Type Name Description System.Int32 dividend The dividend. System.Int32 divisor The divisor. Returns Type Description System.Int32 The result of dividend mod divisor . Remarks The % operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead remainder. This quirk inherently makes it difficult to use modulo in a negative context, as x % y where x is negative will return a negative value, akin to -(x % y) , even if precedence is forced. This method provides a modulo operation which supports negative dividends. | Improve this Doc View Source MultiplicativePersistence(Int32) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this int value) Parameters Type Name Description System.Int32 value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Sign(Int32) Returns an integer that indicates the sign of this 32-bit signed integer. Declaration public static int Sign(this int value) Parameters Type Name Description System.Int32 value A signed number. Returns Type Description System.Int32 A number that indicates the sign of value , as shown in the following table. Return value Meaning -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero. | Improve this Doc View Source Wrap(Int32, Int32) Wraps the current 32-bit signed integer between 0 and a high value. Declaration public static int Wrap(this int value, int length) Parameters Type Name Description System.Int32 value The value to wrap. System.Int32 length The exclusive upper bound. Returns Type Description System.Int32 The wrapped value. | Improve this Doc View Source Wrap(Int32, Int32, Int32) Wraps the current 32-bit signed integer between a low and a high value. Declaration public static int Wrap(this int value, int low, int high) Parameters Type Name Description System.Int32 value The value to wrap. System.Int32 low The inclusive lower bound. System.Int32 high The exclusive upper bound. Returns Type Description System.Int32 The wrapped value."
  },
  "api/X10D.Math.Int64Extensions.html": {
    "href": "api/X10D.Math.Int64Extensions.html",
    "title": "Class Int64Extensions | X10D",
    "keywords": "Class Int64Extensions Extension methods for . Inheritance System.Object Int64Extensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class Int64Extensions : object Methods | Improve this Doc View Source CountDigits(Int64) Returns the number of digits in the current 64-bit signed integer. Declaration public static int CountDigits(this long value) Parameters Type Name Description System.Int64 value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(Int64) Computes the digital root of this 64-bit integer. Declaration public static long DigitalRoot(this long value) Parameters Type Name Description System.Int64 value The value whose digital root to compute. Returns Type Description System.Int64 The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. For example, the digital root of 239 is 5: 2 + 3 + 9 = 14 , then 1 + 4 = 5 . | Improve this Doc View Source Factorial(Int64) Returns the factorial of the current 64-bit signed integer. Declaration public static long Factorial(this long value) Parameters Type Name Description System.Int64 value The value whose factorial to compute. Returns Type Description System.Int64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(Int64, Int64) Calculates the greatest common factor between the current 64-bit signed integer, and another 64-bit unsigned integer. Declaration public static long GreatestCommonFactor(this long value, long other) Parameters Type Name Description System.Int64 value The first value. System.Int64 other The second value. Returns Type Description System.Int64 The greatest common factor between value and other . | Improve this Doc View Source IsEven(Int64) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this long value) Parameters Type Name Description System.Int64 value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(Int64) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this long value) Parameters Type Name Description System.Int64 value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(Int64) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this long value) Parameters Type Name Description System.Int64 value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(Int64, Int64) Calculates the lowest common multiple between the current 64-bit signed integer, and another 64-bit signed integer. Declaration public static long LowestCommonMultiple(this long value, long other) Parameters Type Name Description System.Int64 value The first value. System.Int64 other The second value. Returns Type Description System.Int64 The lowest common multiple between value and other . | Improve this Doc View Source Mod(Int64, Int64) Performs a modulo operation which supports a negative dividend. Declaration public static long Mod(this long dividend, long divisor) Parameters Type Name Description System.Int64 dividend The dividend. System.Int64 divisor The divisor. Returns Type Description System.Int64 The result of dividend mod divisor . Remarks The % operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead remainder. This quirk inherently makes it difficult to use modulo in a negative context, as x % y where x is negative will return a negative value, akin to -(x % y) , even if precedence is forced. This method provides a modulo operation which supports negative dividends. | Improve this Doc View Source MultiplicativePersistence(Int64) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this long value) Parameters Type Name Description System.Int64 value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Sign(Int64) Returns an integer that indicates the sign of this 64-bit signed integer. Declaration public static int Sign(this long value) Parameters Type Name Description System.Int64 value A signed number. Returns Type Description System.Int32 A number that indicates the sign of value , as shown in the following table. Return value Meaning -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero. | Improve this Doc View Source Wrap(Int64, Int64) Wraps the current 64-bit signed integer between 0 and a high value. Declaration public static long Wrap(this long value, long length) Parameters Type Name Description System.Int64 value The value to wrap. System.Int64 length The exclusive upper bound. Returns Type Description System.Int64 The wrapped value. | Improve this Doc View Source Wrap(Int64, Int64, Int64) Wraps the current 64-bit signed integer between a low and a high value. Declaration public static long Wrap(this long value, long low, long high) Parameters Type Name Description System.Int64 value The value to wrap. System.Int64 low The inclusive lower bound. System.Int64 high The exclusive upper bound. Returns Type Description System.Int64 The wrapped value."
  },
  "api/X10D.Math.MathUtility.html": {
    "href": "api/X10D.Math.MathUtility.html",
    "title": "Class MathUtility | X10D",
    "keywords": "Class MathUtility Provides static helpers methods for mathematical functions not found in the .NET class. Inheritance System.Object MathUtility Namespace : X10D.Math Assembly : X10D.dll Syntax public static class MathUtility : object Methods | Improve this Doc View Source Bias(Double, Double) Applies a simple bias function to value. Declaration public static double Bias(double value, double bias) Parameters Type Name Description System.Double value The value to which the bias function will be applied. System.Double bias The bias value. Valid values range from 0-1. Returns Type Description System.Double The biased result. Remarks If bias is less than 0.5, value will be shifted downward; otherwise, upward. | Improve this Doc View Source Bias(Single, Single) Applies a simple bias function to value. Declaration public static float Bias(float value, float bias) Parameters Type Name Description System.Single value The value to which the bias function will be applied. System.Single bias The bias value. Valid values range from 0-1. Returns Type Description System.Single The biased result. Remarks If bias is less than 0.5, value will be shifted downward; otherwise, upward. | Improve this Doc View Source ExponentialDecay(Double, Double, Double) Calculates exponential decay for a value. Declaration public static double ExponentialDecay(double value, double alpha, double decay) Parameters Type Name Description System.Double value The value to decay. System.Double alpha A factor by which to scale the decay. System.Double decay The decay amount. Returns Type Description System.Double The exponentially decayed value. | Improve this Doc View Source ExponentialDecay(Single, Single, Single) Calculates exponential decay for a value. Declaration public static float ExponentialDecay(float value, float alpha, float decay) Parameters Type Name Description System.Single value The value to decay. System.Single alpha A factor by which to scale the decay. System.Single decay The decay amount. Returns Type Description System.Single The exponentially decayed value. | Improve this Doc View Source GammaToLinear(Double) Converts a gamma-encoded value to a linear value using a gamma value of 2.2 . Declaration public static double GammaToLinear(double value) Parameters Type Name Description System.Double value The gamma-encoded value to convert. Expected range is [0, 1]. Returns Type Description System.Double The linear value. | Improve this Doc View Source GammaToLinear(Double, Double) Converts a gamma-encoded value to a linear value using the specified gamma value. Declaration public static double GammaToLinear(double value, double gamma) Parameters Type Name Description System.Double value The gamma-encoded value to convert. Expected range is [0, 1]. System.Double gamma The gamma value to use for decoding. Returns Type Description System.Double The linear value. | Improve this Doc View Source GammaToLinear(Single) Converts a gamma-encoded value to a linear value using a gamma value of 2.2 . Declaration public static float GammaToLinear(float value) Parameters Type Name Description System.Single value The gamma-encoded value to convert. Expected range is [0, 1]. Returns Type Description System.Single The linear value. | Improve this Doc View Source GammaToLinear(Single, Single) Converts a gamma-encoded value to a linear value using the specified gamma value. Declaration public static float GammaToLinear(float value, float gamma) Parameters Type Name Description System.Single value The gamma-encoded value to convert. Expected range is [0, 1]. System.Single gamma The gamma value to use for decoding. Returns Type Description System.Single The linear value. | Improve this Doc View Source InverseLerp(Double, Double, Double) Returns the linear interpolation inverse of a value, such that it determines where a value lies between two other values. Declaration public static double InverseLerp(double alpha, double start, double end) Parameters Type Name Description System.Double alpha The value whose lerp inverse is to be found. System.Double start The start of the range. System.Double end The end of the range. Returns Type Description System.Double A value determined by (alpha - start) / (end - start) . | Improve this Doc View Source InverseLerp(Single, Single, Single) Returns the linear interpolation inverse of a value, such that it determines where a value lies between two other values. Declaration public static float InverseLerp(float alpha, float start, float end) Parameters Type Name Description System.Single alpha The value whose lerp inverse is to be found. System.Single start The start of the range. System.Single end The end of the range. Returns Type Description System.Single A value determined by (alpha - start) / (end - start) . | Improve this Doc View Source Lerp(Double, Double, Double) Linearly interpolates from one value to a target using a specified alpha. Declaration public static double Lerp(double value, double target, double alpha) Parameters Type Name Description System.Double value The interpolation source. System.Double target The interpolation target. System.Double alpha The interpolation alpha. Returns Type Description System.Double The interpolation result as determined by (1 - alpha) * value + alpha * target . | Improve this Doc View Source Lerp(Single, Single, Single) Linearly interpolates from one value to a target using a specified alpha. Declaration public static float Lerp(float value, float target, float alpha) Parameters Type Name Description System.Single value The interpolation source. System.Single target The interpolation target. System.Single alpha The interpolation alpha. Returns Type Description System.Single The interpolation result as determined by (1 - alpha) * value + alpha * target . | Improve this Doc View Source LinearToGamma(Double) Converts a linear value to a gamma-encoded value using a gamma value of 2.2 . Declaration public static double LinearToGamma(double value) Parameters Type Name Description System.Double value The linear value to convert. Expected range is [0, 1]. Returns Type Description System.Double The gamma-encoded value. | Improve this Doc View Source LinearToGamma(Double, Double) Converts a linear value to a gamma-encoded value using the specified gamma value. Declaration public static double LinearToGamma(double value, double gamma) Parameters Type Name Description System.Double value The linear value to convert. Expected range is [0, 1]. System.Double gamma The gamma value to use for encoding. Returns Type Description System.Double The gamma-encoded value. | Improve this Doc View Source LinearToGamma(Single) Converts a linear value to a gamma-encoded value using a gamma value of 2.2 . Declaration public static float LinearToGamma(float value) Parameters Type Name Description System.Single value The linear value to convert. Expected range is [0, 1]. Returns Type Description System.Single The gamma-encoded value. | Improve this Doc View Source LinearToGamma(Single, Single) Converts a linear value to a gamma-encoded value using the specified gamma value. Declaration public static float LinearToGamma(float value, float gamma) Parameters Type Name Description System.Single value The linear value to convert. Expected range is [0, 1]. System.Single gamma The gamma value to use for encoding. Returns Type Description System.Single The gamma-encoded value. | Improve this Doc View Source Pulse(Double, Double, Double) Returns the pulse wave for a given value. Declaration public static double Pulse(double value, double lowerBound, double upperBound) Parameters Type Name Description System.Double value The value to calculate. System.Double lowerBound The inclusive lower bound of the pulse. System.Double upperBound The inclusive upper bound of the pulse. Returns Type Description System.Double 1 if value lies between lowerBound and upperBound ; otherwise, 0. | Improve this Doc View Source Pulse(Single, Single, Single) Returns the pulse wave for a given value. Declaration public static float Pulse(float value, float lowerBound, float upperBound) Parameters Type Name Description System.Single value The value to calculate. System.Single lowerBound The inclusive lower bound of the pulse. System.Single upperBound The inclusive upper bound of the pulse. Returns Type Description System.Single 1 if value lies between lowerBound and upperBound ; otherwise, 0. | Improve this Doc View Source Sawtooth(Double) Returns the incremental sawtooth wave of a given value. Declaration public static double Sawtooth(double value) Parameters Type Name Description System.Double value The value to calculate. Returns Type Description System.Double The sawtooth wave of the given value. | Improve this Doc View Source Sawtooth(Single) Returns the incremental sawtooth wave of a given value. Declaration public static float Sawtooth(float value) Parameters Type Name Description System.Single value The value to calculate. Returns Type Description System.Single The sawtooth wave of the given value. | Improve this Doc View Source ScaleRange(Double, Double, Double, Double, Double) Converts a value from being a percentage of one range, to being the same percentage in a new range. Declaration public static double ScaleRange(double value, double oldMin, double oldMax, double newMin, double newMax) Parameters Type Name Description System.Double value The value to convert. System.Double oldMin The old minimum value. System.Double oldMax The old maximum value. System.Double newMin The new minimum value. System.Double newMax The new maximum value. Returns Type Description System.Double The scaled value. | Improve this Doc View Source ScaleRange(Single, Single, Single, Single, Single) Converts a value from being a percentage of one range, to being the same percentage in a new range. Declaration public static float ScaleRange(float value, float oldMin, float oldMax, float newMin, float newMax) Parameters Type Name Description System.Single value The value to convert. System.Single oldMin The old minimum value. System.Single oldMax The old maximum value. System.Single newMin The new minimum value. System.Single newMax The new maximum value. Returns Type Description System.Single The scaled value. | Improve this Doc View Source Sigmoid(Double) Calculates the sigmoid function for the given input value. Declaration public static double Sigmoid(double value) Parameters Type Name Description System.Double value The input value for which to calculate the sigmoid function. Returns Type Description System.Double The result of applying the sigmoid function to the input value. Remarks The sigmoid function is a commonly used activation function in artificial neural networks and logistic regression. It maps any real-valued number to a value between 0 and 1. | Improve this Doc View Source Sigmoid(Single) Calculates the sigmoid function for the given input value. Declaration public static float Sigmoid(float value) Parameters Type Name Description System.Single value The input value for which to calculate the sigmoid function. Returns Type Description System.Single The result of applying the sigmoid function to the input value. Remarks The sigmoid function is a commonly used activation function in artificial neural networks and logistic regression. It maps any real-valued number to a value between 0 and 1. | Improve this Doc View Source SmoothStep(Double, Double, Double) Performs smooth Hermite interpolation from one value to a target using a specified alpha. Declaration public static double SmoothStep(double value, double target, double alpha) Parameters Type Name Description System.Double value The interpolation source. System.Double target The interpolation target. System.Double alpha The interpolation alpha. Returns Type Description System.Double The interpolation result. | Improve this Doc View Source SmoothStep(Single, Single, Single) Performs smooth Hermite interpolation from one value to a target using a specified alpha. Declaration public static float SmoothStep(float value, float target, float alpha) Parameters Type Name Description System.Single value The interpolation source. System.Single target The interpolation target. System.Single alpha The interpolation alpha. Returns Type Description System.Single The interpolation result."
  },
  "api/X10D.Math.SByteExtensions.html": {
    "href": "api/X10D.Math.SByteExtensions.html",
    "title": "Class SByteExtensions | X10D",
    "keywords": "Class SByteExtensions Math-related extension methods for . Inheritance System.Object SByteExtensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class SByteExtensions : object Methods | Improve this Doc View Source CountDigits(SByte) Returns the number of digits in the current 8-bit signed integer. Declaration public static int CountDigits(this sbyte value) Parameters Type Name Description System.SByte value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(SByte) Computes the digital root of this 32-bit integer. Declaration public static sbyte DigitalRoot(this sbyte value) Parameters Type Name Description System.SByte value The value whose digital root to compute. Returns Type Description System.SByte The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. For example, the digital root of 239 is 5: 2 + 3 + 9 = 14 , then 1 + 4 = 5 . | Improve this Doc View Source Factorial(SByte) Returns the factorial of the current 8-bit signed integer. Declaration public static long Factorial(this sbyte value) Parameters Type Name Description System.SByte value The value whose factorial to compute. Returns Type Description System.Int64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(SByte, SByte) Calculates the greatest common factor between the current 8-bit signed integer, and another 8-bit signed integer. Declaration public static sbyte GreatestCommonFactor(this sbyte value, sbyte other) Parameters Type Name Description System.SByte value The first value. System.SByte other The second value. Returns Type Description System.SByte The greatest common factor between value and other . | Improve this Doc View Source IsEven(SByte) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this sbyte value) Parameters Type Name Description System.SByte value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(SByte) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this sbyte value) Parameters Type Name Description System.SByte value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(SByte) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this sbyte value) Parameters Type Name Description System.SByte value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(SByte, SByte) Calculates the lowest common multiple between the current 8-bit signed integer, and another 8-bit signed integer. Declaration public static sbyte LowestCommonMultiple(this sbyte value, sbyte other) Parameters Type Name Description System.SByte value The first value. System.SByte other The second value. Returns Type Description System.SByte The lowest common multiple between value and other . | Improve this Doc View Source Mod(SByte, SByte) Performs a modulo operation which supports a negative dividend. Declaration public static sbyte Mod(this sbyte dividend, sbyte divisor) Parameters Type Name Description System.SByte dividend The dividend. System.SByte divisor The divisor. Returns Type Description System.SByte The result of dividend mod divisor . Remarks The % operator (commonly called the modulo operator) in C# is not defined to be modulo, but is instead remainder. This quirk inherently makes it difficult to use modulo in a negative context, as x % y where x is negative will return a negative value, akin to -(x % y) , even if precedence is forced. This method provides a modulo operation which supports negative dividends. | Improve this Doc View Source MultiplicativePersistence(SByte) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this sbyte value) Parameters Type Name Description System.SByte value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Sign(SByte) Returns an integer that indicates the sign of this 8-bit signed integer. Declaration public static int Sign(this sbyte value) Parameters Type Name Description System.SByte value A signed number. Returns Type Description System.Int32 A number that indicates the sign of value , as shown in the following table. Return value Meaning -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero. | Improve this Doc View Source Wrap(SByte, SByte) Wraps the current 8-bit signed integer between 0 and a high value. Declaration public static sbyte Wrap(this sbyte value, sbyte length) Parameters Type Name Description System.SByte value The value to wrap. System.SByte length The exclusive upper bound. Returns Type Description System.SByte The wrapped value. | Improve this Doc View Source Wrap(SByte, SByte, SByte) Wraps the current 8-bit signed integer between a low and a high value. Declaration public static sbyte Wrap(this sbyte value, sbyte low, sbyte high) Parameters Type Name Description System.SByte value The value to wrap. System.SByte low The inclusive lower bound. System.SByte high The exclusive upper bound. Returns Type Description System.SByte The wrapped value."
  },
  "api/X10D.Math.SingleExtensions.html": {
    "href": "api/X10D.Math.SingleExtensions.html",
    "title": "Class SingleExtensions | X10D",
    "keywords": "Class SingleExtensions Extension methods for . Inheritance System.Object SingleExtensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class SingleExtensions : object Methods | Improve this Doc View Source Acos(Single) Returns the arccosine of the specified value. Declaration public static float Acos(this float value) Parameters Type Name Description System.Single value The value representing a cosine, which must be greater than or equal to -1, but less than or equal to 1. Returns Type Description System.Single The arccosine of value , θ, measured in radians; such that 0 ≤ θ ≤ π. If value is equal to , less than -1, or greater than 1, is returned. | Improve this Doc View Source Acosh(Single) Returns the hyperbolic arccosine of the specified value. Declaration public static float Acosh(this float value) Parameters Type Name Description System.Single value The value representing a hyperbolic cosine, which must be greater than or equal to 1, but less than or equal to . Returns Type Description System.Single The hyperbolic arccosine of value , θ, measured in radians; such that 0 ≤ θ ≤ ∞. If value is less than 1 or equal to , is returned. | Improve this Doc View Source Asin(Single) Returns the arcsine of the specified value. Declaration public static float Asin(this float value) Parameters Type Name Description System.Single value The value representing a sine, which must be greater than or equal to -1, but less than or equal to 1. Returns Type Description System.Single The arccosine of value , θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If value is equal to , less than -1, or greater than 1, is returned. | Improve this Doc View Source Asinh(Single) Returns the hyperbolic arcsine of the specified value. Declaration public static float Asinh(this float value) Parameters Type Name Description System.Single value The value representing a hyperbolic sine, which must be greater than or equal to 1, but less than or equal to . Returns Type Description System.Single The hyperbolic arccosine of value , measured in radians. If value is equal to , is returned. | Improve this Doc View Source Atan(Single) Returns the arctangent of the specified value. Declaration public static float Atan(this float value) Parameters Type Name Description System.Single value The value representing a tangent, which must be greater than or equal to -1, but less than or equal to 1. Returns Type Description System.Single The arctangent of value , θ, measured in radians; such that π/2 ≤ θ ≤ π/2. If value is equal to , is returned. | Improve this Doc View Source Atanh(Single) Returns the hyperbolic arctangent of the specified value. Declaration public static float Atanh(this float value) Parameters Type Name Description System.Single value The value representing a hyperbolic tangent, which must be greater than or equal to 1, but less than or equal to . Returns Type Description System.Single The hyperbolic arctangent of value , θ, measured in radians; such that -∞ < θ < -1, or 1 < θ < ∞. If value is equal to , less than -1, or greater than 1, is returned. | Improve this Doc View Source ComplexSqrt(Single) Returns the complex square root of this single-precision floating-point number. Declaration public static Complex ComplexSqrt(this float value) Parameters Type Name Description System.Single value The number whose square root is to be found. Returns Type Description Complex The square root of value . | Improve this Doc View Source Cos(Single) Returns the cosine of the specified angle. Declaration public static float Cos(this float value) Parameters Type Name Description System.Single value The angle, measured in radians. Returns Type Description System.Single The cosine of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Cosh(Single) Returns the hyperbolic cosine of the specified angle. Declaration public static float Cosh(this float value) Parameters Type Name Description System.Single value The angle, measured in radians. Returns Type Description System.Single The hyperbolic cosine of value . If value is equal to or , is returned. If value is equal to , is returned. | Improve this Doc View Source DegreesToRadians(Single) Converts the current angle in degrees to its equivalent represented in radians. Declaration public static float DegreesToRadians(this float value) Parameters Type Name Description System.Single value The angle in degrees to convert. Returns Type Description System.Single The result of π * value / 180. | Improve this Doc View Source IsEven(Single) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this float value) Parameters Type Name Description System.Single value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(Single) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this float value) Parameters Type Name Description System.Single value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source RadiansToDegrees(Single) Converts the current angle in radians to its equivalent represented in degrees. Declaration public static float RadiansToDegrees(this float value) Parameters Type Name Description System.Single value The angle in radians to convert. Returns Type Description System.Single The result of π * value / 180. | Improve this Doc View Source Round(Single) Rounds the current value to the nearest whole number. Declaration public static float Round(this float value) Parameters Type Name Description System.Single value The value to round. Returns Type Description System.Single value rounded to the nearest whole number. | Improve this Doc View Source Round(Single, Single) Rounds the current value to the nearest multiple of a specified number. Declaration public static float Round(this float value, float nearest) Parameters Type Name Description System.Single value The value to round. System.Single nearest The nearest multiple to which value should be rounded. Returns Type Description System.Single value rounded to the nearest multiple of nearest . | Improve this Doc View Source Saturate(Single) Saturates this single-precision floating-point number. Declaration public static float Saturate(this float value) Parameters Type Name Description System.Single value The value to saturate. Returns Type Description System.Single The saturated value. Remarks This method clamps value between 0 and 1. | Improve this Doc View Source Sign(Single) Returns an integer that indicates the sign of this single-precision floating-point number. Declaration public static int Sign(this float value) Parameters Type Name Description System.Single value A signed number. Returns Type Description System.Int32 A number that indicates the sign of value , as shown in the following table. Return value Meaning -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero. | Improve this Doc View Source Sin(Single) Returns the sine of the specified angle. Declaration public static float Sin(this float value) Parameters Type Name Description System.Single value The angle, measured in radians. Returns Type Description System.Single The sine of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Sinh(Single) Returns the hyperbolic sine of the specified angle. Declaration public static float Sinh(this float value) Parameters Type Name Description System.Single value The angle, measured in radians. Returns Type Description System.Single The hyperbolic sine of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Sqrt(Single) Returns the square root of this single-precision floating-point number. Declaration public static float Sqrt(this float value) Parameters Type Name Description System.Single value The number whose square root is to be found. Returns Type Description System.Single One of the values in the following table. Return value Meaning The positive square root of value . value is greater than or equal to 0. value is equal to or is negative. value is equal to . | Improve this Doc View Source Tan(Single) Returns the tangent of the specified angle. Declaration public static float Tan(this float value) Parameters Type Name Description System.Single value The angle, measured in radians. Returns Type Description System.Single The tangent of value . If value is equal to , , or , this method returns . | Improve this Doc View Source Tanh(Single) Returns the hyperbolic tangent of the specified angle. Declaration public static float Tanh(this float value) Parameters Type Name Description System.Single value The angle, measured in radians. Returns Type Description System.Single The hyperbolic tangent of value . If value is equal to , this method returns -1. If value is equal to , this method returns 1. If value is equal to , this method returns . | Improve this Doc View Source Wrap(Single, Single) Wraps the current single-precision floating-point number between 0 and a high value. Declaration public static float Wrap(this float value, float length) Parameters Type Name Description System.Single value The value to wrap. System.Single length The exclusive upper bound. Returns Type Description System.Single The wrapped value. | Improve this Doc View Source Wrap(Single, Single, Single) Wraps the current single-precision floating-point number between a low and a high value. Declaration public static float Wrap(this float value, float low, float high) Parameters Type Name Description System.Single value The value to wrap. System.Single low The inclusive lower bound. System.Single high The exclusive upper bound. Returns Type Description System.Single The wrapped value."
  },
  "api/X10D.Math.UInt16Extensions.html": {
    "href": "api/X10D.Math.UInt16Extensions.html",
    "title": "Class UInt16Extensions | X10D",
    "keywords": "Class UInt16Extensions Extension methods for . Inheritance System.Object UInt16Extensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class UInt16Extensions : object Methods | Improve this Doc View Source CountDigits(UInt16) Returns the number of digits in the current 16-bit signed integer. Declaration public static int CountDigits(this ushort value) Parameters Type Name Description System.UInt16 value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(UInt16) Computes the digital root of the current 16-bit unsigned integer. Declaration public static ushort DigitalRoot(this ushort value) Parameters Type Name Description System.UInt16 value The value whose digital root to compute. Returns Type Description System.UInt16 The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. For example, the digital root of 239 is 5: 2 + 3 + 9 = 14 , then 1 + 4 = 5 . | Improve this Doc View Source Factorial(UInt16) Returns the factorial of the current 16-bit unsigned integer. Declaration public static ulong Factorial(this ushort value) Parameters Type Name Description System.UInt16 value The value whose factorial to compute. Returns Type Description System.UInt64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(UInt16, UInt16) Calculates the greatest common factor between the current 16-bit unsigned integer, and another 16-bit unsigned integer. Declaration public static ushort GreatestCommonFactor(this ushort value, ushort other) Parameters Type Name Description System.UInt16 value The first value. System.UInt16 other The second value. Returns Type Description System.UInt16 The greatest common factor between value and other . | Improve this Doc View Source IsEven(UInt16) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this ushort value) Parameters Type Name Description System.UInt16 value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(UInt16) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this ushort value) Parameters Type Name Description System.UInt16 value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(UInt16) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this ushort value) Parameters Type Name Description System.UInt16 value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(UInt16, UInt16) Calculates the lowest common multiple between the current 16-bit unsigned integer, and another 16-bit unsigned integer. Declaration public static ushort LowestCommonMultiple(this ushort value, ushort other) Parameters Type Name Description System.UInt16 value The first value. System.UInt16 other The second value. Returns Type Description System.UInt16 The lowest common multiple between value and other . | Improve this Doc View Source MultiplicativePersistence(UInt16) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this ushort value) Parameters Type Name Description System.UInt16 value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Wrap(UInt16, UInt16) Wraps the current 16-bit unsigned integer between 0 and a high value. Declaration public static ushort Wrap(this ushort value, ushort length) Parameters Type Name Description System.UInt16 value The value to wrap. System.UInt16 length The exclusive upper bound. Returns Type Description System.UInt16 The wrapped value. | Improve this Doc View Source Wrap(UInt16, UInt16, UInt16) Wraps the current 16-bit unsigned integer between a low and a high value. Declaration public static ushort Wrap(this ushort value, ushort low, ushort high) Parameters Type Name Description System.UInt16 value The value to wrap. System.UInt16 low The inclusive lower bound. System.UInt16 high The exclusive upper bound. Returns Type Description System.UInt16 The wrapped value."
  },
  "api/X10D.Math.UInt32Extensions.html": {
    "href": "api/X10D.Math.UInt32Extensions.html",
    "title": "Class UInt32Extensions | X10D",
    "keywords": "Class UInt32Extensions Extension methods for . Inheritance System.Object UInt32Extensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class UInt32Extensions : object Methods | Improve this Doc View Source CountDigits(UInt32) Returns the number of digits in the current 32-bit unsigned integer. Declaration public static int CountDigits(this uint value) Parameters Type Name Description System.UInt32 value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(UInt32) Computes the digital root of the current 32-bit unsigned integer. Declaration public static uint DigitalRoot(this uint value) Parameters Type Name Description System.UInt32 value The value whose digital root to compute. Returns Type Description System.UInt32 The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. For example, the digital root of 239 is 5: 2 + 3 + 9 = 14 , then 1 + 4 = 5 . | Improve this Doc View Source Factorial(UInt32) Returns the factorial of the current 32-bit unsigned integer. Declaration public static ulong Factorial(this uint value) Parameters Type Name Description System.UInt32 value The value whose factorial to compute. Returns Type Description System.UInt64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(UInt32, UInt32) Calculates the greatest common factor between the current 32-bit unsigned integer, and another 32-bit unsigned integer. Declaration public static uint GreatestCommonFactor(this uint value, uint other) Parameters Type Name Description System.UInt32 value The first value. System.UInt32 other The second value. Returns Type Description System.UInt32 The greatest common factor between value and other . | Improve this Doc View Source IsEven(UInt32) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this uint value) Parameters Type Name Description System.UInt32 value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(UInt32) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this uint value) Parameters Type Name Description System.UInt32 value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(UInt32) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this uint value) Parameters Type Name Description System.UInt32 value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(UInt32, UInt32) Calculates the lowest common multiple between the current 32-bit unsigned integer, and another 32-bit unsigned integer. Declaration public static uint LowestCommonMultiple(this uint value, uint other) Parameters Type Name Description System.UInt32 value The first value. System.UInt32 other The second value. Returns Type Description System.UInt32 The lowest common multiple between value and other . | Improve this Doc View Source MultiplicativePersistence(UInt32) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this uint value) Parameters Type Name Description System.UInt32 value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Wrap(UInt32, UInt32) Wraps the current 32-bit unsigned integer between 0 and a high value. Declaration public static uint Wrap(this uint value, uint length) Parameters Type Name Description System.UInt32 value The value to wrap. System.UInt32 length The exclusive upper bound. Returns Type Description System.UInt32 The wrapped value. | Improve this Doc View Source Wrap(UInt32, UInt32, UInt32) Wraps the current 32-bit unsigned integer between a low and a high value. Declaration public static uint Wrap(this uint value, uint low, uint high) Parameters Type Name Description System.UInt32 value The value to wrap. System.UInt32 low The inclusive lower bound. System.UInt32 high The exclusive upper bound. Returns Type Description System.UInt32 The wrapped value."
  },
  "api/X10D.Math.UInt64Extensions.html": {
    "href": "api/X10D.Math.UInt64Extensions.html",
    "title": "Class UInt64Extensions | X10D",
    "keywords": "Class UInt64Extensions Extension methods for . Inheritance System.Object UInt64Extensions Namespace : X10D.Math Assembly : X10D.dll Syntax public static class UInt64Extensions : object Methods | Improve this Doc View Source CountDigits(UInt64) Returns the number of digits in the current 64-bit unsigned integer. Declaration public static int CountDigits(this ulong value) Parameters Type Name Description System.UInt64 value The value whose digit count to compute. Returns Type Description System.Int32 The number of digits in value . | Improve this Doc View Source DigitalRoot(UInt64) Computes the digital root of the current 64-bit unsigned integer. Declaration public static ulong DigitalRoot(this ulong value) Parameters Type Name Description System.UInt64 value The value whose digital root to compute. Returns Type Description System.UInt64 The digital root of value . Remarks The digital root is defined as the recursive sum of digits until that result is a single digit. For example, the digital root of 239 is 5: 2 + 3 + 9 = 14 , then 1 + 4 = 5 . | Improve this Doc View Source Factorial(UInt64) Returns the factorial of the current 64-bit unsigned integer. Declaration public static ulong Factorial(this ulong value) Parameters Type Name Description System.UInt64 value The value whose factorial to compute. Returns Type Description System.UInt64 The factorial of value . | Improve this Doc View Source GreatestCommonFactor(UInt64, UInt64) Calculates the greatest common factor between the current 64-bit unsigned integer, and another 64-bit unsigned integer. Declaration public static ulong GreatestCommonFactor(this ulong value, ulong other) Parameters Type Name Description System.UInt64 value The first value. System.UInt64 other The second value. Returns Type Description System.UInt64 The greatest common factor between value and other . | Improve this Doc View Source IsEven(UInt64) Returns a value indicating whether the current value is evenly divisible by 2. Declaration public static bool IsEven(this ulong value) Parameters Type Name Description System.UInt64 value The value whose parity to check. Returns Type Description System.Boolean true if value is evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsOdd(UInt64) Returns a value indicating whether the current value is not evenly divisible by 2. Declaration public static bool IsOdd(this ulong value) Parameters Type Name Description System.UInt64 value The value whose parity to check. Returns Type Description System.Boolean true if value is not evenly divisible by 2, or false otherwise. | Improve this Doc View Source IsPrime(UInt64) Returns a value indicating whether the current value is a prime number. Declaration public static bool IsPrime(this ulong value) Parameters Type Name Description System.UInt64 value The value whose primality to check. Returns Type Description System.Boolean true if value is prime; otherwise, false . | Improve this Doc View Source LowestCommonMultiple(UInt64, UInt64) Calculates the lowest common multiple between the current 64-bit unsigned integer, and another 64-bit unsigned integer. Declaration public static ulong LowestCommonMultiple(this ulong value, ulong other) Parameters Type Name Description System.UInt64 value The first value. System.UInt64 other The second value. Returns Type Description System.UInt64 The lowest common multiple between value and other . | Improve this Doc View Source MultiplicativePersistence(UInt64) Returns the multiplicative persistence of a specified value. Declaration public static int MultiplicativePersistence(this ulong value) Parameters Type Name Description System.UInt64 value The value whose multiplicative persistence to calculate. Returns Type Description System.Int32 The multiplicative persistence. Remarks Multiplicative persistence is defined as the recursive digital product until that product is a single digit. | Improve this Doc View Source Wrap(UInt64, UInt64) Wraps the current 64-bit unsigned integer between 0 and a high value. Declaration public static ulong Wrap(this ulong value, ulong length) Parameters Type Name Description System.UInt64 value The value to wrap. System.UInt64 length The exclusive upper bound. Returns Type Description System.UInt64 The wrapped value. | Improve this Doc View Source Wrap(UInt64, UInt64, UInt64) Wraps the current 64-bit unsigned integer between a low and a high value. Declaration public static ulong Wrap(this ulong value, ulong low, ulong high) Parameters Type Name Description System.UInt64 value The value to wrap. System.UInt64 low The inclusive lower bound. System.UInt64 high The exclusive upper bound. Returns Type Description System.UInt64 The wrapped value."
  },
  "api/X10D.Net.EndPointExtensions.html": {
    "href": "api/X10D.Net.EndPointExtensions.html",
    "title": "Class EndPointExtensions | X10D",
    "keywords": "Class EndPointExtensions Extension methods for and derived types. Inheritance System.Object EndPointExtensions Namespace : X10D.Net Assembly : X10D.dll Syntax public static class EndPointExtensions : object Methods | Improve this Doc View Source GetHost(EndPoint) Returns the hostname for the current . Declaration public static string GetHost(this EndPoint endPoint) Parameters Type Name Description EndPoint endPoint The endpoint whose hostname to get. Returns Type Description System.String if endPoint is . -or- if endPoint is . -or- otherwise. | Improve this Doc View Source GetPort(EndPoint) Returns the port number for the current . Declaration public static int GetPort(this EndPoint endPoint) Parameters Type Name Description EndPoint endPoint The endpoint whose port number to get. Returns Type Description System.Int32 if endPoint is . -or- if endPoint is . -or- 0 otherwise."
  },
  "api/X10D.Net.html": {
    "href": "api/X10D.Net.html",
    "title": "Namespace X10D.Net | X10D",
    "keywords": "Namespace X10D.Net Classes EndPointExtensions Extension methods for and derived types. Int16Extensions Network-related extension methods for . Int32Extensions IO-related extension methods for . Int64Extensions IO-related extension methods for . IPAddressExtensions Extension methods for ."
  },
  "api/X10D.Net.Int16Extensions.html": {
    "href": "api/X10D.Net.Int16Extensions.html",
    "title": "Class Int16Extensions | X10D",
    "keywords": "Class Int16Extensions Network-related extension methods for . Inheritance System.Object Int16Extensions Namespace : X10D.Net Assembly : X10D.dll Syntax public static class Int16Extensions : object Methods | Improve this Doc View Source HostToNetworkOrder(Int16) Converts a 16-bit signed integer value from host byte order to network byte order. Declaration public static short HostToNetworkOrder(this short value) Parameters Type Name Description System.Int16 value The value to convert, expressed in host byte order. Returns Type Description System.Int16 An integer value, expressed in network byte order. | Improve this Doc View Source NetworkToHostOrder(Int16) Converts a 16-bit signed integer value from network byte order to host byte order. Declaration public static short NetworkToHostOrder(this short value) Parameters Type Name Description System.Int16 value The value to convert, expressed in network byte order. Returns Type Description System.Int16 An integer value, expressed in host byte order."
  },
  "api/X10D.Net.Int32Extensions.html": {
    "href": "api/X10D.Net.Int32Extensions.html",
    "title": "Class Int32Extensions | X10D",
    "keywords": "Class Int32Extensions IO-related extension methods for . Inheritance System.Object Int32Extensions Namespace : X10D.Net Assembly : X10D.dll Syntax public static class Int32Extensions : object Methods | Improve this Doc View Source HostToNetworkOrder(Int32) Converts a 32-bit signed integer value from host byte order to network byte order. Declaration public static int HostToNetworkOrder(this int value) Parameters Type Name Description System.Int32 value The value to convert, expressed in host byte order. Returns Type Description System.Int32 An integer value, expressed in network byte order. | Improve this Doc View Source NetworkToHostOrder(Int32) Converts a 32-bit signed integer value from network byte order to host byte order. Declaration public static int NetworkToHostOrder(this int value) Parameters Type Name Description System.Int32 value The value to convert, expressed in network byte order. Returns Type Description System.Int32 An integer value, expressed in host byte order."
  },
  "api/X10D.Net.Int64Extensions.html": {
    "href": "api/X10D.Net.Int64Extensions.html",
    "title": "Class Int64Extensions | X10D",
    "keywords": "Class Int64Extensions IO-related extension methods for . Inheritance System.Object Int64Extensions Namespace : X10D.Net Assembly : X10D.dll Syntax public static class Int64Extensions : object Methods | Improve this Doc View Source HostToNetworkOrder(Int64) Converts a 64-bit signed integer value from host byte order to network byte order. Declaration public static long HostToNetworkOrder(this long value) Parameters Type Name Description System.Int64 value The value to convert, expressed in host byte order. Returns Type Description System.Int64 An integer value, expressed in network byte order. | Improve this Doc View Source NetworkToHostOrder(Int64) Converts a 64-bit signed integer value from network byte order to host byte order. Declaration public static long NetworkToHostOrder(this long value) Parameters Type Name Description System.Int64 value The value to convert, expressed in network byte order. Returns Type Description System.Int64 An integer value, expressed in host byte order."
  },
  "api/X10D.Net.IPAddressExtensions.html": {
    "href": "api/X10D.Net.IPAddressExtensions.html",
    "title": "Class IPAddressExtensions | X10D",
    "keywords": "Class IPAddressExtensions Extension methods for . Inheritance System.Object IPAddressExtensions Namespace : X10D.Net Assembly : X10D.dll Syntax public static class IPAddressExtensions : object Methods | Improve this Doc View Source IsIPv4(IPAddress) Returns a value indicating whether the specified IP address is a valid IPv4 address. Declaration public static bool IsIPv4(this IPAddress address) Parameters Type Name Description IPAddress address The IP address to check. Returns Type Description System.Boolean true if the specified IP address is a valid IPv4 address; otherwise, false . | Improve this Doc View Source IsIPv6(IPAddress) Returns a value indicating whether the specified IP address is a valid IPv6 address. Declaration public static bool IsIPv6(this IPAddress address) Parameters Type Name Description IPAddress address The IP address to check. Returns Type Description System.Boolean true if the specified IP address is a valid IPv6 address; otherwise, false ."
  },
  "api/X10D.Numerics.ByteExtensions.html": {
    "href": "api/X10D.Numerics.ByteExtensions.html",
    "title": "Class ByteExtensions | X10D",
    "keywords": "Class ByteExtensions Numeric-related extension methods for . Inheritance System.Object ByteExtensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class ByteExtensions : object Methods | Improve this Doc View Source PopCount(Byte) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this byte value) Parameters Type Name Description System.Byte value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(Byte, Int32) Rotates the current value left by the specified number of bits. Declaration public static byte RotateLeft(this byte value, int count) Parameters Type Name Description System.Byte value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8. Returns Type Description System.Byte The rotated value. | Improve this Doc View Source RotateRight(Byte, Int32) Rotates the current value right by the specified number of bits. Declaration public static byte RotateRight(this byte value, int count) Parameters Type Name Description System.Byte value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8. Returns Type Description System.Byte The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(Byte) Rounds the current value up to a power of two. Declaration public static byte RoundUpToPowerOf2(this byte value) Parameters Type Name Description System.Byte value The value to round. Returns Type Description System.Byte The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.html": {
    "href": "api/X10D.Numerics.html",
    "title": "Namespace X10D.Numerics | X10D",
    "keywords": "Namespace X10D.Numerics Classes ByteExtensions Numeric-related extension methods for . Int16Extensions Numeric-related extension methods for . Int32Extensions Numeric-related extension methods for . Int64Extensions Numeric-related extension methods for . QuaternionExtensions Numeric-related extension methods for . RandomExtensions Extension methods for . SByteExtensions Numeric-related extension methods for . UInt16Extensions Numeric-related extension methods for . UInt32Extensions Numeric-related extension methods for . UInt64Extensions Numeric-related extension methods for . Vector2Extensions Numeric-extensions for . Vector3Extensions Numeric-extensions for . Vector4Extensions Numeric-extensions for ."
  },
  "api/X10D.Numerics.Int16Extensions.html": {
    "href": "api/X10D.Numerics.Int16Extensions.html",
    "title": "Class Int16Extensions | X10D",
    "keywords": "Class Int16Extensions Numeric-related extension methods for . Inheritance System.Object Int16Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class Int16Extensions : object Methods | Improve this Doc View Source PopCount(Int16) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this short value) Parameters Type Name Description System.Int16 value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(Int16, Int32) Rotates the current value left by the specified number of bits. Declaration public static short RotateLeft(this short value, int count) Parameters Type Name Description System.Int16 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16. Returns Type Description System.Int16 The rotated value. | Improve this Doc View Source RotateRight(Int16, Int32) Rotates the current value right by the specified number of bits. Declaration public static short RotateRight(this short value, int count) Parameters Type Name Description System.Int16 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16. Returns Type Description System.Int16 The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(Int16) Rounds the current value up to a power of two. Declaration public static short RoundUpToPowerOf2(this short value) Parameters Type Name Description System.Int16 value The value to round. Returns Type Description System.Int16 The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.Int32Extensions.html": {
    "href": "api/X10D.Numerics.Int32Extensions.html",
    "title": "Class Int32Extensions | X10D",
    "keywords": "Class Int32Extensions Numeric-related extension methods for . Inheritance System.Object Int32Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class Int32Extensions : object Methods | Improve this Doc View Source PopCount(Int32) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this int value) Parameters Type Name Description System.Int32 value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(Int32, Int32) Rotates the current value left by the specified number of bits. Declaration public static int RotateLeft(this int value, int count) Parameters Type Name Description System.Int32 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32. Returns Type Description System.Int32 The rotated value. | Improve this Doc View Source RotateRight(Int32, Int32) Rotates the current value right by the specified number of bits. Declaration public static int RotateRight(this int value, int count) Parameters Type Name Description System.Int32 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32. Returns Type Description System.Int32 The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(Int32) Rounds the current value up to a power of two. Declaration public static int RoundUpToPowerOf2(this int value) Parameters Type Name Description System.Int32 value The value to round. Returns Type Description System.Int32 The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.Int64Extensions.html": {
    "href": "api/X10D.Numerics.Int64Extensions.html",
    "title": "Class Int64Extensions | X10D",
    "keywords": "Class Int64Extensions Numeric-related extension methods for . Inheritance System.Object Int64Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class Int64Extensions : object Methods | Improve this Doc View Source PopCount(Int64) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this long value) Parameters Type Name Description System.Int64 value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(Int64, Int32) Rotates the current value left by the specified number of bits. Declaration public static long RotateLeft(this long value, int count) Parameters Type Name Description System.Int64 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64. Returns Type Description System.Int64 The rotated value. | Improve this Doc View Source RotateRight(Int64, Int32) Rotates the current value right by the specified number of bits. Declaration public static long RotateRight(this long value, int count) Parameters Type Name Description System.Int64 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64. Returns Type Description System.Int64 The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(Int64) Rounds the current value up to a power of two. Declaration public static long RoundUpToPowerOf2(this long value) Parameters Type Name Description System.Int64 value The value to round. Returns Type Description System.Int64 The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.QuaternionExtensions.html": {
    "href": "api/X10D.Numerics.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | X10D",
    "keywords": "Class QuaternionExtensions Numeric-related extension methods for . Inheritance System.Object QuaternionExtensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class QuaternionExtensions : object Methods | Improve this Doc View Source Multiply(Quaternion, Vector3) Rotates the specified point with the specified rotation. Declaration public static Vector3 Multiply(this in Quaternion rotation, in Vector3 point) Parameters Type Name Description Quaternion rotation The rotation. Vector3 point The point. Returns Type Description Vector3 The rotated point. | Improve this Doc View Source ToAxisAngle(Quaternion) Converts this quaternion to an axis/angle pair. Declaration public static (Vector3 Axis, float Angle) ToAxisAngle(this in Quaternion value) Parameters Type Name Description Quaternion value The quaternion to convert. Returns Type Description System.ValueTuple < Vector3 , System.Single > A tuple containing the converted axis, and the angle in radians. | Improve this Doc View Source ToVector3(Quaternion) Converts this quaternion to a containing an Euler representation of the rotation. Declaration public static Vector3 ToVector3(this in Quaternion value) Parameters Type Name Description Quaternion value The quaternion to convert. Returns Type Description Vector3 The Euler representation of value , in radians."
  },
  "api/X10D.Numerics.RandomExtensions.html": {
    "href": "api/X10D.Numerics.RandomExtensions.html",
    "title": "Class RandomExtensions | X10D",
    "keywords": "Class RandomExtensions Extension methods for . Inheritance System.Object RandomExtensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class RandomExtensions : object Methods | Improve this Doc View Source NextRotation(Random) Returns a randomly generated rotation as represented by a . Declaration public static Quaternion NextRotation(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description Quaternion A constructed from 3 random single-precision floating point numbers representing the yaw, pitch, and roll. | Improve this Doc View Source NextRotationUniform(Random) Returns a randomly generated rotation with uniform distribution. Declaration public static Quaternion NextRotationUniform(this Random random) Parameters Type Name Description Random random The instance. Returns Type Description Quaternion A constructed with uniform distribution. | Improve this Doc View Source NextUnitVector2(Random) Returns a with magnitude 1 whose components indicate a random point on the unit circle. Declaration public static Vector2 NextUnitVector2(this Random random) Parameters Type Name Description Random random The instance Returns Type Description Vector2 A whose returns 1, and whose components indicate a random point on the unit circle. | Improve this Doc View Source NextUnitVector3(Random) Returns a with magnitude 1 whose components indicate a random point on the unit sphere. Declaration public static Vector3 NextUnitVector3(this Random random) Parameters Type Name Description Random random The instance Returns Type Description Vector3 A whose returns 1, and whose components indicate a random point on the unit sphere."
  },
  "api/X10D.Numerics.SByteExtensions.html": {
    "href": "api/X10D.Numerics.SByteExtensions.html",
    "title": "Class SByteExtensions | X10D",
    "keywords": "Class SByteExtensions Numeric-related extension methods for . Inheritance System.Object SByteExtensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class SByteExtensions : object Methods | Improve this Doc View Source PopCount(SByte) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this sbyte value) Parameters Type Name Description System.SByte value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(SByte, Int32) Rotates the current value left by the specified number of bits. Declaration public static sbyte RotateLeft(this sbyte value, int count) Parameters Type Name Description System.SByte value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8. Returns Type Description System.SByte The rotated value. | Improve this Doc View Source RotateRight(SByte, Int32) Rotates the current value right by the specified number of bits. Declaration public static sbyte RotateRight(this sbyte value, int count) Parameters Type Name Description System.SByte value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..7] is treated as congruent mod 8. Returns Type Description System.SByte The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(SByte) Rounds the current value up to a power of two. Declaration public static sbyte RoundUpToPowerOf2(this sbyte value) Parameters Type Name Description System.SByte value The value to round. Returns Type Description System.SByte The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.UInt16Extensions.html": {
    "href": "api/X10D.Numerics.UInt16Extensions.html",
    "title": "Class UInt16Extensions | X10D",
    "keywords": "Class UInt16Extensions Numeric-related extension methods for . Inheritance System.Object UInt16Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class UInt16Extensions : object Methods | Improve this Doc View Source PopCount(UInt16) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this ushort value) Parameters Type Name Description System.UInt16 value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(UInt16, Int32) Rotates the current value left by the specified number of bits. Declaration public static ushort RotateLeft(this ushort value, int count) Parameters Type Name Description System.UInt16 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16. Returns Type Description System.UInt16 The rotated value. | Improve this Doc View Source RotateRight(UInt16, Int32) Rotates the current value right by the specified number of bits. Declaration public static ushort RotateRight(this ushort value, int count) Parameters Type Name Description System.UInt16 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..15] is treated as congruent mod 16. Returns Type Description System.UInt16 The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(UInt16) Rounds the current value up to a power of two. Declaration public static ushort RoundUpToPowerOf2(this ushort value) Parameters Type Name Description System.UInt16 value The value to round. Returns Type Description System.UInt16 The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.UInt32Extensions.html": {
    "href": "api/X10D.Numerics.UInt32Extensions.html",
    "title": "Class UInt32Extensions | X10D",
    "keywords": "Class UInt32Extensions Numeric-related extension methods for . Inheritance System.Object UInt32Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class UInt32Extensions : object Methods | Improve this Doc View Source PopCount(UInt32) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this uint value) Parameters Type Name Description System.UInt32 value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(UInt32, Int32) Rotates the current value left by the specified number of bits. Declaration public static uint RotateLeft(this uint value, int count) Parameters Type Name Description System.UInt32 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32. Returns Type Description System.UInt32 The rotated value. | Improve this Doc View Source RotateRight(UInt32, Int32) Rotates the current value right by the specified number of bits. Declaration public static uint RotateRight(this uint value, int count) Parameters Type Name Description System.UInt32 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..31] is treated as congruent mod 32. Returns Type Description System.UInt32 The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(UInt32) Rounds the current value up to a power of two. Declaration public static uint RoundUpToPowerOf2(this uint value) Parameters Type Name Description System.UInt32 value The value to round. Returns Type Description System.UInt32 The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.UInt64Extensions.html": {
    "href": "api/X10D.Numerics.UInt64Extensions.html",
    "title": "Class UInt64Extensions | X10D",
    "keywords": "Class UInt64Extensions Numeric-related extension methods for . Inheritance System.Object UInt64Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class UInt64Extensions : object Methods | Improve this Doc View Source PopCount(UInt64) Returns the population count (number of bits set) of a mask. Declaration public static int PopCount(this ulong value) Parameters Type Name Description System.UInt64 value The mask. Returns Type Description System.Int32 The population count of value . Remarks This method is similar in behavior to the x86 instruction POPCNT | Improve this Doc View Source RotateLeft(UInt64, Int32) Rotates the current value left by the specified number of bits. Declaration public static ulong RotateLeft(this ulong value, int count) Parameters Type Name Description System.UInt64 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64. Returns Type Description System.UInt64 The rotated value. | Improve this Doc View Source RotateRight(UInt64, Int32) Rotates the current value right by the specified number of bits. Declaration public static ulong RotateRight(this ulong value, int count) Parameters Type Name Description System.UInt64 value The value to rotate. System.Int32 count The number of bits by which to rotate. Any value outside the range [0..63] is treated as congruent mod 64. Returns Type Description System.UInt64 The rotated value. | Improve this Doc View Source RoundUpToPowerOf2(UInt64) Rounds the current value up to a power of two. Declaration public static ulong RoundUpToPowerOf2(this ulong value) Parameters Type Name Description System.UInt64 value The value to round. Returns Type Description System.UInt64 The smallest power of two that's greater than or equal to value , or 0 if value is 0 or the result overflows."
  },
  "api/X10D.Numerics.Vector2Extensions.html": {
    "href": "api/X10D.Numerics.Vector2Extensions.html",
    "title": "Class Vector2Extensions | X10D",
    "keywords": "Class Vector2Extensions Numeric-extensions for . Inheritance System.Object Vector2Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class Vector2Extensions : object Methods | Improve this Doc View Source Deconstruct(Vector2, out Single, out Single) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector2 vector, out float x, out float y) Parameters Type Name Description Vector2 vector The vector to deconstruct. System.Single x The X component value. System.Single y The Y component value. | Improve this Doc View Source IsOnLine(Vector2, PointF, PointF) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2 point, PointF start, PointF end) Parameters Type Name Description Vector2 point The point to check. PointF start The starting point of the line. PointF end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Vector2, Vector2, Vector2) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2 point, Vector2 start, Vector2 end) Parameters Type Name Description Vector2 point The point to check. Vector2 start The starting point of the line. Vector2 end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Vector2, LineF) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2 point, LineF line) Parameters Type Name Description Vector2 point The point to check. LineF line The line on which the point may lie. Returns Type Description System.Boolean true if point lies on the line defined by line ; otherwise false . | Improve this Doc View Source Round(Vector2) Rounds the components in the current to the nearest integer. Declaration public static Vector2 Round(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector whose components to round. Returns Type Description Vector2 The rounded vector. | Improve this Doc View Source Round(Vector2, Single) Rounds the components in the current to the nearest multiple of a specified number. Declaration public static Vector2 Round(this Vector2 vector, float nearest) Parameters Type Name Description Vector2 vector The vector whose components to round. System.Single nearest The nearest multiple to which the components should be rounded. Returns Type Description Vector2 The rounded vector. | Improve this Doc View Source ToPointF(Vector2) Converts the current to a . Declaration public static PointF ToPointF(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector to convert. Returns Type Description PointF The resulting . | Improve this Doc View Source ToSizeF(Vector2) Converts the current to a . Declaration public static SizeF ToSizeF(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector to convert. Returns Type Description SizeF The resulting . | Improve this Doc View Source WithX(Vector2, Single) Returns a vector whose Y component is the same as the specified vector, and whose X component is a new value. Declaration public static Vector2 WithX(this Vector2 vector, float x) Parameters Type Name Description Vector2 vector The vector to copy. System.Single x The new X component value. Returns Type Description Vector2 A new instance of whose components is the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector2, Single) Returns a vector whose X component is the same as the specified vector, and whose Y component is a new value. Declaration public static Vector2 WithY(this Vector2 vector, float y) Parameters Type Name Description Vector2 vector The vector to copy. System.Single y The new Y component value. Returns Type Description Vector2 A new instance of whose components is the same as that of vector , and whose component is y ."
  },
  "api/X10D.Numerics.Vector3Extensions.html": {
    "href": "api/X10D.Numerics.Vector3Extensions.html",
    "title": "Class Vector3Extensions | X10D",
    "keywords": "Class Vector3Extensions Numeric-extensions for . Inheritance System.Object Vector3Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class Vector3Extensions : object Methods | Improve this Doc View Source Deconstruct(Vector3, out Single, out Single, out Single) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector3 vector, out float x, out float y, out float z) Parameters Type Name Description Vector3 vector The vector to deconstruct. System.Single x The X component value. System.Single y The Y component value. System.Single z The Z component value. | Improve this Doc View Source Round(Vector3) Rounds the components in the current to the nearest integer. Declaration public static Vector3 Round(this Vector3 vector) Parameters Type Name Description Vector3 vector The vector whose components to round. Returns Type Description Vector3 The rounded vector. | Improve this Doc View Source Round(Vector3, Single) Rounds the components in the current to the nearest multiple of a specified number. Declaration public static Vector3 Round(this Vector3 vector, float nearest) Parameters Type Name Description Vector3 vector The vector whose components to round. System.Single nearest The nearest multiple to which the components should be rounded. Returns Type Description Vector3 The rounded vector. | Improve this Doc View Source WithX(Vector3, Single) Returns a vector whose Y and Z components are the same as the specified vector, and whose X component is a new value. Declaration public static Vector3 WithX(this Vector3 vector, float x) Parameters Type Name Description Vector3 vector The vector to copy. System.Single x The new X component value. Returns Type Description Vector3 A new instance of whose and components are the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector3, Single) Returns a vector whose X and Z components are the same as the specified vector, and whose Y component is a new value. Declaration public static Vector3 WithY(this Vector3 vector, float y) Parameters Type Name Description Vector3 vector The vector to copy. System.Single y The new Y component value. Returns Type Description Vector3 A new instance of whose and components are the same as that of vector , and whose component is y . | Improve this Doc View Source WithZ(Vector3, Single) Returns a vector whose X and Y components are the same as the specified vector, and whose Z component is a new value. Declaration public static Vector3 WithZ(this Vector3 vector, float z) Parameters Type Name Description Vector3 vector The vector to copy. System.Single z The new Z component value. Returns Type Description Vector3 A new instance of whose and components are the same as that of vector , and whose component is z ."
  },
  "api/X10D.Numerics.Vector4Extensions.html": {
    "href": "api/X10D.Numerics.Vector4Extensions.html",
    "title": "Class Vector4Extensions | X10D",
    "keywords": "Class Vector4Extensions Numeric-extensions for . Inheritance System.Object Vector4Extensions Namespace : X10D.Numerics Assembly : X10D.dll Syntax public static class Vector4Extensions : object Methods | Improve this Doc View Source Deconstruct(Vector4, out Single, out Single, out Single, out Single) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector4 vector, out float x, out float y, out float z, out float w) Parameters Type Name Description Vector4 vector The vector to deconstruct. System.Single x The X component value. System.Single y The Y component value. System.Single z The Z component value. System.Single w The W component value. | Improve this Doc View Source Round(Vector4) Rounds the components in the current to the nearest integer. Declaration public static Vector4 Round(this Vector4 vector) Parameters Type Name Description Vector4 vector The vector whose components to round. Returns Type Description Vector4 The rounded vector. | Improve this Doc View Source Round(Vector4, Single) Rounds the components in the current to the nearest multiple of a specified number. Declaration public static Vector4 Round(this Vector4 vector, float nearest) Parameters Type Name Description Vector4 vector The vector whose components to round. System.Single nearest The nearest multiple to which the components should be rounded. Returns Type Description Vector4 The rounded vector. | Improve this Doc View Source WithW(Vector4, Single) Returns a vector whose X, Y, and Z components are the same as the specified vector, and whose W component is a new value. Declaration public static Vector4 WithW(this Vector4 vector, float w) Parameters Type Name Description Vector4 vector The vector to copy. System.Single w The new W component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is w . | Improve this Doc View Source WithX(Vector4, Single) Returns a vector whose Y, Z, and W components are the same as the specified vector, and whose X component is a new value. Declaration public static Vector4 WithX(this Vector4 vector, float x) Parameters Type Name Description Vector4 vector The vector to copy. System.Single x The new X component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector4, Single) Returns a vector whose X, Z, and W components are the same as the specified vector, and whose Y component is a new value. Declaration public static Vector4 WithY(this Vector4 vector, float y) Parameters Type Name Description Vector4 vector The vector to copy. System.Single y The new Y component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is y . | Improve this Doc View Source WithZ(Vector4, Single) Returns a vector whose X, Y, and W components are the same as the specified vector, and whose Z component is a new value. Declaration public static Vector4 WithZ(this Vector4 vector, float z) Parameters Type Name Description Vector4 vector The vector to copy. System.Single z The new Z component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is z ."
  },
  "api/X10D.Reactive.html": {
    "href": "api/X10D.Reactive.html",
    "title": "Namespace X10D.Reactive | X10D",
    "keywords": "Namespace X10D.Reactive Classes ProgressExtensions Provides extension methods for ."
  },
  "api/X10D.Reactive.ProgressExtensions.html": {
    "href": "api/X10D.Reactive.ProgressExtensions.html",
    "title": "Class ProgressExtensions | X10D",
    "keywords": "Class ProgressExtensions Provides extension methods for . Inheritance System.Object ProgressExtensions Namespace : X10D.Reactive Assembly : X10D.dll Syntax public static class ProgressExtensions : object Methods | Improve this Doc View Source OnProgressChanged<T>(Progress<T>) Wraps the event of the current in an object. Declaration public static IObservable<T> OnProgressChanged<T>(this Progress<T> progress) Parameters Type Name Description Progress <T> progress The progress whose event to wrap. Returns Type Description IObservable <T> An object that wraps the event of the current . Type Parameters Name Description T The type of progress update value. | Improve this Doc View Source OnProgressChanged<T>(Progress<T>, T) Wraps the event of the current in an object, and completes the observable when the progress reaches the specified value. Declaration public static IObservable<T> OnProgressChanged<T>(this Progress<T> progress, T completeValue) Parameters Type Name Description Progress <T> progress The progress whose event to wrap. T completeValue The value that indicates completion. Returns Type Description IObservable <T> An object that wraps the event of the current . Type Parameters Name Description T The type of progress update value."
  },
  "api/X10D.Reflection.html": {
    "href": "api/X10D.Reflection.html",
    "title": "Namespace X10D.Reflection | X10D",
    "keywords": "Namespace X10D.Reflection Classes MemberInfoExtensions Extension methods for . TypeExtensions Extension methods for ."
  },
  "api/X10D.Reflection.MemberInfoExtensions.html": {
    "href": "api/X10D.Reflection.MemberInfoExtensions.html",
    "title": "Class MemberInfoExtensions | X10D",
    "keywords": "Class MemberInfoExtensions Extension methods for . Inheritance System.Object MemberInfoExtensions Namespace : X10D.Reflection Assembly : X10D.dll Syntax public static class MemberInfoExtensions : object Methods | Improve this Doc View Source HasCustomAttribute(MemberInfo, Type) Returns a value indicating whether or not the current member has been decorated with a specified attribute. Declaration public static bool HasCustomAttribute(this MemberInfo member, Type attribute) Parameters Type Name Description MemberInfo member The member attributes to check. Type attribute The attribute type. Returns Type Description System.Boolean true if the current member has been decorated with a specified attribute, or false otherwise. | Improve this Doc View Source HasCustomAttribute<T>(MemberInfo) Returns a value indicating whether or not the current member has been decorated with a specified attribute. Declaration public static bool HasCustomAttribute<T>(this MemberInfo member) where T : Attribute Parameters Type Name Description MemberInfo member The member attributes to check. Returns Type Description System.Boolean true if the current member has been decorated with a specified attribute, or false otherwise. Type Parameters Name Description T The attribute type. | Improve this Doc View Source SelectFromCustomAttribute<TAttribute, TReturn>(MemberInfo, Func<TAttribute, TReturn>) Retrieves a custom attribute that is decorated by the current member, and projects it into to a new form. Declaration public static TReturn SelectFromCustomAttribute<TAttribute, TReturn>(this MemberInfo member, Func<TAttribute, TReturn> selector) where TAttribute : Attribute Parameters Type Name Description MemberInfo member The member. Func <TAttribute, TReturn> selector A transform function to apply to the attribute. Returns Type Description TReturn An instance of TReturn as provided from selector . Type Parameters Name Description TAttribute The attribute type. TReturn The return type of the selector delegate. | Improve this Doc View Source SelectFromCustomAttribute<TAttribute, TReturn>(MemberInfo, Func<TAttribute, TReturn>, TReturn) Retrieves a custom attribute that is decorated by the current member, and projects it into to a new form. Declaration public static TReturn SelectFromCustomAttribute<TAttribute, TReturn>(this MemberInfo member, Func<TAttribute, TReturn> selector, TReturn defaultValue) where TAttribute : Attribute Parameters Type Name Description MemberInfo member The member. Func <TAttribute, TReturn> selector A transform function to apply to the attribute. TReturn defaultValue The default value to return when the specified attribute is not found. Returns Type Description TReturn An instance of TReturn as provided from selector . Type Parameters Name Description TAttribute The attribute type. TReturn The return type of the selector delegate."
  },
  "api/X10D.Reflection.TypeExtensions.html": {
    "href": "api/X10D.Reflection.TypeExtensions.html",
    "title": "Class TypeExtensions | X10D",
    "keywords": "Class TypeExtensions Extension methods for . Inheritance System.Object TypeExtensions Namespace : X10D.Reflection Assembly : X10D.dll Syntax public static class TypeExtensions : object Methods | Improve this Doc View Source Implements(Type, Type) Returns a value indicating whether the current type implements a specified interface. Declaration public static bool Implements(this Type value, Type interfaceType) Parameters Type Name Description Type value The type whose interface list to check. Type interfaceType The interface type. Returns Type Description System.Boolean true if the current exists on the type; otherwise, false . | Improve this Doc View Source Implements<T>(Type) Returns a value indicating whether the current type implements a specified interface. Declaration public static bool Implements<T>(this Type value) Parameters Type Name Description Type value The type whose interface list to check. Returns Type Description System.Boolean true if the current exists on the type; otherwise, false . Type Parameters Name Description T The interface type. | Improve this Doc View Source Inherits(Type, Type) Returns a value indicating whether the current type inherits a specified type. Declaration public static bool Inherits(this Type value, Type type) Parameters Type Name Description Type value The type whose interface list to check. Type type The base type. Returns Type Description System.Boolean true if the current type inherits type , or false otherwise. | Improve this Doc View Source Inherits<T>(Type) Returns a value indicating whether the current type inherits a specified type. Declaration public static bool Inherits<T>(this Type value) where T : class Parameters Type Name Description Type value The type whose interface list to check. Returns Type Description System.Boolean true if the current type inherits T , or false otherwise. Type Parameters Name Description T The base type."
  },
  "api/X10D.Text.CharExtensions.html": {
    "href": "api/X10D.Text.CharExtensions.html",
    "title": "Class CharExtensions | X10D",
    "keywords": "Class CharExtensions Text-related extension methods for . Inheritance System.Object CharExtensions Namespace : X10D.Text Assembly : X10D.dll Syntax public static class CharExtensions : object Methods | Improve this Doc View Source IsEmoji(Char) Returns a value indicating whether this character constitutes an emoji. Declaration public static bool IsEmoji(this char value) Parameters Type Name Description System.Char value The character to check. Returns Type Description System.Boolean true if this character is an emoji; otherwise, false . | Improve this Doc View Source Repeat(Char, Int32) Returns a string composed of the current character repeated a specified number of times. Declaration public static string Repeat(this char value, int count) Parameters Type Name Description System.Char value The character to repeat. System.Int32 count The number of times to repeat. Returns Type Description System.String A composed of value repeated count times."
  },
  "api/X10D.Text.CharSpanExtensions.html": {
    "href": "api/X10D.Text.CharSpanExtensions.html",
    "title": "Class CharSpanExtensions | X10D",
    "keywords": "Class CharSpanExtensions Extension methods for and of . Inheritance System.Object CharSpanExtensions Namespace : X10D.Text Assembly : X10D.dll Syntax public static class CharSpanExtensions : object Methods | Improve this Doc View Source CountSubstring(ReadOnlySpan<Char>, ReadOnlySpan<Char>) Counts the occurrences of a substring within the current character span. Declaration public static int CountSubstring(this ReadOnlySpan<char> haystack, ReadOnlySpan<char> needle) Parameters Type Name Description ReadOnlySpan < System.Char > haystack The haystack search space. ReadOnlySpan < System.Char > needle The character span to count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source CountSubstring(ReadOnlySpan<Char>, ReadOnlySpan<Char>, StringComparison) Counts the occurrences of a substring within the current character span, using a specified string comparison method. Declaration public static int CountSubstring(this ReadOnlySpan<char> haystack, ReadOnlySpan<char> needle, StringComparison comparison) Parameters Type Name Description ReadOnlySpan < System.Char > haystack The haystack search space. ReadOnlySpan < System.Char > needle The character span to count. StringComparison comparison The string comparison method used for determining substring count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source CountSubstring(Span<Char>, ReadOnlySpan<Char>) Counts the occurrences of a substring within the current character span. Declaration public static int CountSubstring(this Span<char> haystack, ReadOnlySpan<char> needle) Parameters Type Name Description Span < System.Char > haystack The haystack search space. ReadOnlySpan < System.Char > needle The character span to count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source CountSubstring(Span<Char>, ReadOnlySpan<Char>, StringComparison) Counts the occurrences of a substring within the current character span, using a specified string comparison method. Declaration public static int CountSubstring(this Span<char> haystack, ReadOnlySpan<char> needle, StringComparison comparison) Parameters Type Name Description Span < System.Char > haystack The haystack search space. ReadOnlySpan < System.Char > needle The character span to count. StringComparison comparison The string comparison method used for determining substring count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack ."
  },
  "api/X10D.Text.EnumerableExtensions.html": {
    "href": "api/X10D.Text.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | X10D",
    "keywords": "Class EnumerableExtensions Text-related extension methods for . Inheritance System.Object EnumerableExtensions Namespace : X10D.Text Assembly : X10D.dll Syntax public static class EnumerableExtensions : object Methods | Improve this Doc View Source Grep(IEnumerable<String>, String) Filters a sequence of strings by regular expression. Declaration public static IEnumerable<string> Grep(this IEnumerable<string> source, string pattern) Parameters Type Name Description IEnumerable < System.String > source The sequence of strings to filter. System.String pattern The regular expression pattern to use for matching. Returns Type Description IEnumerable < System.String > The filtered sequence. | Improve this Doc View Source Grep(IEnumerable<String>, String, Boolean) Filters a sequence of strings by regular expression, optionally allowing to ignore casing. Declaration public static IEnumerable<string> Grep(this IEnumerable<string> source, string pattern, bool ignoreCase) Parameters Type Name Description IEnumerable < System.String > source The sequence of strings to filter. System.String pattern The regular expression pattern to use for matching. System.Boolean ignoreCase true to ignore casing when matching; otherwise, false . Returns Type Description IEnumerable < System.String > The filtered sequence."
  },
  "api/X10D.Text.html": {
    "href": "api/X10D.Text.html",
    "title": "Namespace X10D.Text | X10D",
    "keywords": "Namespace X10D.Text Classes CharExtensions Text-related extension methods for . CharSpanExtensions Extension methods for and of . EnumerableExtensions Text-related extension methods for . StringBuilderReader Represents a reads from a . StringExtensions Text-related extension methods for ."
  },
  "api/X10D.Text.StringBuilderReader.html": {
    "href": "api/X10D.Text.StringBuilderReader.html",
    "title": "Class StringBuilderReader | X10D",
    "keywords": "Class StringBuilderReader Represents a reads from a . Inheritance System.Object StringBuilderReader Namespace : X10D.Text Assembly : X10D.dll Syntax public class StringBuilderReader : TextReader Constructors | Improve this Doc View Source StringBuilderReader(StringBuilder) Initializes a new instance of the StringBuilderReader class. Declaration public StringBuilderReader(StringBuilder stringBuilder) Parameters Type Name Description StringBuilder stringBuilder The to wrap. Methods | Improve this Doc View Source Close() Declaration public override void Close() | Improve this Doc View Source Peek() Declaration public override int Peek() Returns Type Description System.Int32 | Improve this Doc View Source Read() Declaration public override int Read() Returns Type Description System.Int32 | Improve this Doc View Source Read(Span<Char>) Declaration public override int Read(Span<char> buffer) Parameters Type Name Description Span < System.Char > buffer Returns Type Description System.Int32 | Improve this Doc View Source Read(Char[], Int32, Int32) Declaration public override int Read(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count Returns Type Description System.Int32 | Improve this Doc View Source ReadAsync(Memory<Char>, CancellationToken) Asynchronously reads the characters from the current stream into a memory block. Declaration public override ValueTask<int> ReadAsync(Memory<char> buffer, CancellationToken cancellationToken = null) Parameters Type Name Description Memory < System.Char > buffer When this method returns, contains the specified memory block of characters replaced by the characters read from the current source. CancellationToken cancellationToken Ignored. Returns Type Description ValueTask < System.Int32 > A value task that represents the asynchronous read operation. The value of the type parameter contains the number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the buffer length, depending on whether the data is available within the stream. | Improve this Doc View Source ReadAsync(Char[], Int32, Int32) Declaration public override Task<int> ReadAsync(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count Returns Type Description Task < System.Int32 > | Improve this Doc View Source ReadBlock(Span<Char>) Declaration public override int ReadBlock(Span<char> buffer) Parameters Type Name Description Span < System.Char > buffer Returns Type Description System.Int32 | Improve this Doc View Source ReadBlock(Char[], Int32, Int32) Declaration public override int ReadBlock(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count Returns Type Description System.Int32 | Improve this Doc View Source ReadBlockAsync(Memory<Char>, CancellationToken) Asynchronously reads the characters from the current stream and writes the data to a buffer. Declaration public override ValueTask<int> ReadBlockAsync(Memory<char> buffer, CancellationToken cancellationToken = null) Parameters Type Name Description Memory < System.Char > buffer When this method returns, contains the specified memory block of characters replaced by the characters read from the current source. CancellationToken cancellationToken Ignored. Returns Type Description ValueTask < System.Int32 > A value task that represents the asynchronous read operation. The value of the type parameter contains the total number of characters read into the buffer. The result value can be less than the number of characters requested if the number of characters currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. | Improve this Doc View Source ReadBlockAsync(Char[], Int32, Int32) Declaration public override Task<int> ReadBlockAsync(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count Returns Type Description Task < System.Int32 > | Improve this Doc View Source ReadLine() Declaration public override string? ReadLine() Returns Type Description System.Nullable < System.String > | Improve this Doc View Source ReadLineAsync() Declaration public override Task<string?> ReadLineAsync() Returns Type Description Task < System.Nullable < System.String >> | Improve this Doc View Source ReadToEnd() Declaration public override string ReadToEnd() Returns Type Description System.String | Improve this Doc View Source ReadToEndAsync() Declaration public override Task<string> ReadToEndAsync() Returns Type Description Task < System.String > Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Text.StringExtensions.html": {
    "href": "api/X10D.Text.StringExtensions.html",
    "title": "Class StringExtensions | X10D",
    "keywords": "Class StringExtensions Text-related extension methods for . Inheritance System.Object StringExtensions Namespace : X10D.Text Assembly : X10D.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source AsNullIfEmpty(Nullable<String>) Normalizes a string which may be either null or empty to null . Declaration public static string? AsNullIfEmpty(this string? value) Parameters Type Name Description System.Nullable < System.String > value The value to normalize. Returns Type Description System.Nullable < System.String > null if value is null or empty; otherwise, value . | Improve this Doc View Source AsNullIfWhiteSpace(Nullable<String>) Normalizes a string which may be either null , empty, or consisting of only whitespace, to null . Declaration public static string? AsNullIfWhiteSpace(this string? value) Parameters Type Name Description System.Nullable < System.String > value The value to normalize. Returns Type Description System.Nullable < System.String > null if value is null , empty, or consists of only whitespace; otherwise, value . | Improve this Doc View Source Base64Decode(String) Converts the specified string, which encodes binary data as base-64 digits, to an equivalent plain text string. Declaration public static string Base64Decode(this string value) Parameters Type Name Description System.String value The base-64 string to convert. Returns Type Description System.String The plain text string representation of value . | Improve this Doc View Source Base64Encode(String) Converts the current string to its equivalent string representation that is encoded with base-64 digits. Declaration public static string Base64Encode(this string value) Parameters Type Name Description System.String value The plain text string to convert. Returns Type Description System.String The string representation, in base 64, of value . | Improve this Doc View Source ChangeEncoding(String, Encoding, Encoding) Converts this string from one encoding to another. Declaration public static string ChangeEncoding(this string value, Encoding sourceEncoding, Encoding destinationEncoding) Parameters Type Name Description System.String value The input string. Encoding sourceEncoding The input encoding. Encoding destinationEncoding The output encoding. Returns Type Description System.String Returns a new with its data converted to destinationEncoding . | Improve this Doc View Source CountSubstring(ReadOnlySpan<Char>, Char) Counts the occurrences of a character within the current character span. Declaration public static int CountSubstring(this ReadOnlySpan<char> haystack, char needle) Parameters Type Name Description ReadOnlySpan < System.Char > haystack The haystack search space. System.Char needle The character to count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source CountSubstring(Span<Char>, Char) Counts the occurrences of a character within the current character span. Declaration public static int CountSubstring(this Span<char> haystack, char needle) Parameters Type Name Description Span < System.Char > haystack The haystack search space. System.Char needle The character to count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source CountSubstring(String, Char) Counts the occurrences of a character within the current string. Declaration public static int CountSubstring(this string haystack, char needle) Parameters Type Name Description System.String haystack The haystack search space. System.Char needle The character to count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source CountSubstring(String, Nullable<String>) Counts the occurrences of a substring within the current string. Declaration public static int CountSubstring(this string haystack, string? needle) Parameters Type Name Description System.String haystack The haystack search space. System.Nullable < System.String > needle The substring to count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source CountSubstring(String, Nullable<String>, StringComparison) Counts the occurrences of a substring within the current string, using a specified string comparison method. Declaration public static int CountSubstring(this string haystack, string? needle, StringComparison comparison) Parameters Type Name Description System.String haystack The haystack search space. System.Nullable < System.String > needle The substring to count. StringComparison comparison The string comparison method used for determining substring count. Returns Type Description System.Int32 An integer representing the count of needle inside haystack . | Improve this Doc View Source EnsureEndsWith(Nullable<String>, Char) Ensures that the current string starts with a specified substring. Declaration public static string EnsureEndsWith(this string? value, char substring) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.Char substring The substring to prepend, if the current string does not already start with it. Returns Type Description System.String The combined string. | Improve this Doc View Source EnsureEndsWith(Nullable<String>, Char, StringComparison) Ensures that the current string starts with a specified substring. Declaration public static string EnsureEndsWith(this string? value, char substring, StringComparison comparisonType) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.Char substring The substring to prepend, if the current string does not already start with it. StringComparison comparisonType One of the enumeration values that determines how the substring is compared. Returns Type Description System.String The combined string. | Improve this Doc View Source EnsureEndsWith(Nullable<String>, String) Ensures that the current string starts with a specified substring. Declaration public static string EnsureEndsWith(this string? value, string substring) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.String substring The substring to prepend, if the current string does not already start with it. Returns Type Description System.String The combined string. | Improve this Doc View Source EnsureEndsWith(Nullable<String>, String, StringComparison) Ensures that the current string starts with a specified substring. Declaration public static string EnsureEndsWith(this string? value, string substring, StringComparison comparisonType) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.String substring The substring to prepend, if the current string does not already start with it. StringComparison comparisonType One of the enumeration values that determines how the substring is compared. Returns Type Description System.String The combined string. | Improve this Doc View Source EnsureStartsWith(Nullable<String>, Char) Ensures that the current string starts with a specified substring. Declaration public static string EnsureStartsWith(this string? value, char substring) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.Char substring The substring to prepend, if the current string does not already start with it. Returns Type Description System.String The combined string. | Improve this Doc View Source EnsureStartsWith(Nullable<String>, Char, StringComparison) Ensures that the current string starts with a specified substring. Declaration public static string EnsureStartsWith(this string? value, char substring, StringComparison comparisonType) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.Char substring The substring to prepend, if the current string does not already start with it. StringComparison comparisonType One of the enumeration values that determines how the substring is compared. Returns Type Description System.String The combined string. | Improve this Doc View Source EnsureStartsWith(Nullable<String>, String) Ensures that the current string starts with a specified substring. Declaration public static string EnsureStartsWith(this string? value, string substring) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.String substring The substring to prepend, if the current string does not already start with it. Returns Type Description System.String The combined string. | Improve this Doc View Source EnsureStartsWith(Nullable<String>, String, StringComparison) Ensures that the current string starts with a specified substring. Declaration public static string EnsureStartsWith(this string? value, string substring, StringComparison comparisonType) Parameters Type Name Description System.Nullable < System.String > value The string to check. System.String substring The substring to prepend, if the current string does not already start with it. StringComparison comparisonType One of the enumeration values that determines how the substring is compared. Returns Type Description System.String The combined string. | Improve this Doc View Source EnumParse<T>(String) Parses a into an . Declaration public static T EnumParse<T>(this string value) where T : struct, Enum Parameters Type Name Description System.String value The value to parse. Returns Type Description T The value corresponding to the . Type Parameters Name Description T The type of the . Remarks Credit for this method goes to Scott Dorman: ( http://geekswithblogs.net/sdorman/Default.aspx ). | Improve this Doc View Source EnumParse<T>(String, Boolean) Parses a into an . Declaration public static T EnumParse<T>(this string value, bool ignoreCase) where T : struct, Enum Parameters Type Name Description System.String value The value to parse. System.Boolean ignoreCase Whether or not to ignore casing. Returns Type Description T The value corresponding to the . Type Parameters Name Description T The type of the . Remarks Credit for this method goes to Scott Dorman: ( http://geekswithblogs.net/sdorman/Default.aspx ). | Improve this Doc View Source GetBytes(String) Gets a [] representing the value the with encoding. Declaration public static byte[] GetBytes(this string value) Parameters Type Name Description System.String value The string to convert. Returns Type Description System.Byte [] Returns a []. | Improve this Doc View Source GetBytes(String, Encoding) Gets a [] representing the value the with the provided encoding. Declaration public static byte[] GetBytes(this string value, Encoding encoding) Parameters Type Name Description System.String value The string to convert. Encoding encoding The encoding to use. Returns Type Description System.Byte [] Returns a []. | Improve this Doc View Source IsEmoji(String) Returns a value indicating whether this string constitutes an emoji. Declaration public static bool IsEmoji(this string value) Parameters Type Name Description System.String value The input string. Returns Type Description System.Boolean true if this string is an emoji; otherwise, false . | Improve this Doc View Source IsEmpty(String) Returns a value indicating whether the current string represents an empty string. Declaration public static bool IsEmpty(this string value) Parameters Type Name Description System.String value The value to check. Returns Type Description System.Boolean true if value is empty; otherwise, false . | Improve this Doc View Source IsLower(String) Determines if all alpha characters in this string are considered lowercase. Declaration public static bool IsLower(this string value) Parameters Type Name Description System.String value The input string. Returns Type Description System.Boolean true if all alpha characters in this string are lowercase; otherwise, false . | Improve this Doc View Source IsNullOrEmpty(Nullable<String>) Returns a value indicating whether the current string is null ( langword_csharp_Nothing in Visual Basic), or represents an empty string. Declaration public static bool IsNullOrEmpty(this string? value) Parameters Type Name Description System.Nullable < System.String > value The value to check. Returns Type Description System.Boolean true if value is null or empty; otherwise, false . | Improve this Doc View Source IsNullOrWhiteSpace(Nullable<String>) Returns a value indicating whether the current string is null ( langword_csharp_Nothing in Visual Basic), represents an empty string, or consists of only whitespace characters. Declaration public static bool IsNullOrWhiteSpace(this string? value) Parameters Type Name Description System.Nullable < System.String > value The value to check. Returns Type Description System.Boolean true if value is null , empty, or consists of only whitespace; otherwise, false . | Improve this Doc View Source IsPalindrome(String) Determines whether the current string is considered palindromic; that is, the letters within the string are the same when reversed. Declaration public static bool IsPalindrome(this string value) Parameters Type Name Description System.String value The value to check. Returns Type Description System.Boolean true if value is considered a palindromic string; otherwise, false . | Improve this Doc View Source IsUpper(String) Determines if all alpha characters in this string are considered uppercase. Declaration public static bool IsUpper(this string value) Parameters Type Name Description System.String value The input string. Returns Type Description System.Boolean true if all alpha characters in this string are uppercase; otherwise, false . | Improve this Doc View Source IsWhiteSpace(String) Returns a value indicating whether the current string represents an empty string, or consists of only whitespace characters. Declaration public static bool IsWhiteSpace(this string value) Parameters Type Name Description System.String value The value to check. Returns Type Description System.Boolean true if value is empty or consists of only whitespace; otherwise, false . | Improve this Doc View Source Randomize(String, Int32, Nullable<Random>) Returns a new string of a specified length by randomly selecting characters from the current string. Declaration public static string Randomize(this string source, int length, Random? random = null) Parameters Type Name Description System.String source The pool of characters to use. System.Int32 length The length of the new string returned. System.Nullable < Random > random The supplier. Returns Type Description System.String A new string whose length is equal to length which contains randomly selected characters from source . | Improve this Doc View Source Repeat(String, Int32) Repeats a string a specified number of times. Declaration public static string Repeat(this string value, int count) Parameters Type Name Description System.String value The string to repeat. System.Int32 count The repeat count. Returns Type Description System.String A string containing value repeated count times. | Improve this Doc View Source Reverse(String) Reverses the current string. Declaration public static string Reverse(this string value) Parameters Type Name Description System.String value The string to reverse. Returns Type Description System.String A whose characters are that of value in reverse order. | Improve this Doc View Source Shuffled(String, Nullable<Random>) Shuffles the characters in the string. Declaration public static string Shuffled(this string value, Random? random = null) Parameters Type Name Description System.String value The string to shuffle. System.Nullable < Random > random The instance to use for the shuffling. If null is specified, a shared instance is used. Returns Type Description System.String A new containing the characters in value , rearranged. | Improve this Doc View Source Split(String, Int32) Splits the into chunks that are no greater than chunkSize in length. Declaration public static IEnumerable<string> Split(this string value, int chunkSize) Parameters Type Name Description System.String value The string to split. System.Int32 chunkSize The maximum length of each string in the returned result. Returns Type Description IEnumerable < System.String > Returns an containing instances which are no greater than chunkSize in length. | Improve this Doc View Source StartsWithAny(Nullable<String>, StringComparison, String[]) Determines whether the beginning of this string instance matches any of the specified strings when compared using the specified comparison option. Declaration public static bool StartsWithAny(this string? value, StringComparison comparison, params string[] startValues) Parameters Type Name Description System.Nullable < System.String > value The value to compare. StringComparison comparison One of the enumeration values that determines how this string and value are compared. System.String [] startValues An array of string to compare. Returns Type Description System.Boolean true if value starts with any of the startValues ; otherwise, false . | Improve this Doc View Source StartsWithAny(Nullable<String>, String[]) Determines whether the beginning of this string instance matches any of the specified strings using the current culture for comparison. Declaration public static bool StartsWithAny(this string? value, params string[] startValues) Parameters Type Name Description System.Nullable < System.String > value The value to compare. System.String [] startValues An array of string to compare. Returns Type Description System.Boolean true if value starts with any of the startValues ; otherwise, false . | Improve this Doc View Source WithEmptyAlternative(Nullable<String>, Nullable<String>) Normalizes a string which may be either null or empty to a specified alternative. Declaration public static string? WithEmptyAlternative(this string? value, string? alternative) Parameters Type Name Description System.Nullable < System.String > value The value to normalize. System.Nullable < System.String > alternative The alternative string. Returns Type Description System.Nullable < System.String > alternative if value is null or empty; otherwise, value . | Improve this Doc View Source WithWhiteSpaceAlternative(Nullable<String>, Nullable<String>) Normalizes a string which may be either null , empty, or consisting of only whitespace, to a specified alternative. Declaration public static string? WithWhiteSpaceAlternative(this string? value, string? alternative) Parameters Type Name Description System.Nullable < System.String > value The value to normalize. System.Nullable < System.String > alternative The alternative string. Returns Type Description System.Nullable < System.String > alternative if value is null , empty, or consists of only whitespace; otherwise, value ."
  },
  "api/X10D.Time.ByteExtensions.html": {
    "href": "api/X10D.Time.ByteExtensions.html",
    "title": "Class ByteExtensions | X10D",
    "keywords": "Class ByteExtensions Time-related extension methods for . Inheritance System.Object ByteExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class ByteExtensions : object Methods | Improve this Doc View Source Days(Byte) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this byte value) Parameters Type Name Description System.Byte value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(Byte) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this byte value) Parameters Type Name Description System.Byte value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(Byte) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this byte value) Parameters Type Name Description System.Byte value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(Byte) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this byte value) Parameters Type Name Description System.Byte value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(Byte) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this byte value) Parameters Type Name Description System.Byte value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(Byte) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this byte value) Parameters Type Name Description System.Byte value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(Byte) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this byte value) Parameters Type Name Description System.Byte value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(Byte) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this byte value) Parameters Type Name Description System.Byte value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(Byte) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this byte value) Parameters Type Name Description System.Byte value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(Byte) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this byte value) Parameters Type Name Description System.Byte value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.CharSpanExtensions.html": {
    "href": "api/X10D.Time.CharSpanExtensions.html",
    "title": "Class CharSpanExtensions | X10D",
    "keywords": "Class CharSpanExtensions Time-related extension methods for of . Inheritance System.Object CharSpanExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class CharSpanExtensions : object Methods | Improve this Doc View Source ToTimeSpan(ReadOnlySpan<Char>) Parses this span of characters as a shorthand time span (e.g. 3w 2d 1h) and converts it to an instance of . Declaration public static TimeSpan ToTimeSpan(this ReadOnlySpan<char> input) Parameters Type Name Description ReadOnlySpan < System.Char > input The input span of characters. Floating point is not supported, but integers with the following units are supported: Suffix Meaning ms Milliseconds s Seconds m Minutes h Hours d Days w Weeks mo Months y Years Returns Type Description TimeSpan A new instance of ."
  },
  "api/X10D.Time.DateTimeExtensions.html": {
    "href": "api/X10D.Time.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | X10D",
    "keywords": "Class DateTimeExtensions Extension methods for . Inheritance System.Object DateTimeExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class DateTimeExtensions : object Methods | Improve this Doc View Source Age(DateTime) Returns the rounded-down integer number of years since a given date as of today. Declaration public static int Age(this DateTime value) Parameters Type Name Description DateTime value Returns Type Description System.Int32 The rounded-down integer number of years since value as of today. | Improve this Doc View Source Age(DateTime, DateTime) Returns the rounded-down integer number of years since a given date as of another specified date. Declaration public static int Age(this DateTime value, DateTime referenceDate) Parameters Type Name Description DateTime value DateTime referenceDate Returns Type Description System.Int32 The rounded-down integer number of years since value as of the date specified by referenceDate . | Improve this Doc View Source First(DateTime, DayOfWeek) Gets a date representing the first occurence of a specified day of the week in the current month. Declaration public static DateTime First(this DateTime value, DayOfWeek dayOfWeek) Parameters Type Name Description DateTime value DayOfWeek dayOfWeek The day of the week. Returns Type Description DateTime A representing the first occurence of dayOfWeek . | Improve this Doc View Source FirstDayOfMonth(DateTime) Gets a date representing the first day of the current month. Declaration public static DateTime FirstDayOfMonth(this DateTime value) Parameters Type Name Description DateTime value Returns Type Description DateTime A representing the first day of the current month. | Improve this Doc View Source GetIso8601WeekOfYear(DateTime) Gets the ISO-8601 week number of the year for the current date. Declaration public static int GetIso8601WeekOfYear(this DateTime value) Parameters Type Name Description DateTime value The date whose week number to return. Returns Type Description System.Int32 The ISO-8601 week number of the year. Remarks This implementation is directly inspired from a blog post . about this subject. | Improve this Doc View Source IsLeapYear(DateTime) Returns a value indicating whether the year represented by the current is a leap year. Declaration public static bool IsLeapYear(this DateTime value) Parameters Type Name Description DateTime value The date whose year to check. Returns Type Description System.Boolean true if the year represented by value is a leap year; otherwise, false . | Improve this Doc View Source Last(DateTime, DayOfWeek) Gets a date representing the final occurence of a specified day of the week in the current month. Declaration public static DateTime Last(this DateTime value, DayOfWeek dayOfWeek) Parameters Type Name Description DateTime value DayOfWeek dayOfWeek The day of the week. Returns Type Description DateTime A representing the final occurence of dayOfWeek . | Improve this Doc View Source LastDayOfMonth(DateTime) Gets a date representing the last day of the current month. Declaration public static DateTime LastDayOfMonth(this DateTime value) Parameters Type Name Description DateTime value Returns Type Description DateTime A representing the last day of the current month. | Improve this Doc View Source Next(DateTime, DayOfWeek) Gets a date representing the next occurence of a specified day of the week in the current month. Declaration public static DateTime Next(this DateTime value, DayOfWeek dayOfWeek) Parameters Type Name Description DateTime value DayOfWeek dayOfWeek The day of the week. Returns Type Description DateTime A representing the next occurence of dayOfWeek . | Improve this Doc View Source ToUnixTimeMilliseconds(DateTime) Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z. Declaration public static long ToUnixTimeMilliseconds(this DateTime value) Parameters Type Name Description DateTime value The current date. Returns Type Description System.Int64 The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z. | Improve this Doc View Source ToUnixTimeSeconds(DateTime) Returns the number of seconds that have elapsed since 1970-01-01T00:00:00.000Z. Declaration public static long ToUnixTimeSeconds(this DateTime value) Parameters Type Name Description DateTime value The current date. Returns Type Description System.Int64 The number of seconds that have elapsed since 1970-01-01T00:00:00.000Z."
  },
  "api/X10D.Time.DateTimeOffsetExtensions.html": {
    "href": "api/X10D.Time.DateTimeOffsetExtensions.html",
    "title": "Class DateTimeOffsetExtensions | X10D",
    "keywords": "Class DateTimeOffsetExtensions Extension methods for . Inheritance System.Object DateTimeOffsetExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class DateTimeOffsetExtensions : object Methods | Improve this Doc View Source Age(DateTimeOffset) Returns the rounded-down integer number of years since a given date as of today. Declaration public static int Age(this DateTimeOffset value) Parameters Type Name Description DateTimeOffset value The date from which to calculate. Returns Type Description System.Int32 The rounded-down integer number of years since value as of today. | Improve this Doc View Source Age(DateTimeOffset, DateTimeOffset) Returns the rounded-down integer number of years since a given date as of another specified date. Declaration public static int Age(this DateTimeOffset value, DateTimeOffset referenceDate) Parameters Type Name Description DateTimeOffset value The date from which to calculate. DateTimeOffset referenceDate The date to use as the calculation reference. Returns Type Description System.Int32 The rounded-down integer number of years since value as of the date specified by referenceDate . | Improve this Doc View Source First(DateTimeOffset, DayOfWeek) Gets a date representing the first occurence of a specified day of the week in the current month. Declaration public static DateTimeOffset First(this DateTimeOffset value, DayOfWeek dayOfWeek) Parameters Type Name Description DateTimeOffset value The current date. DayOfWeek dayOfWeek The day of the week. Returns Type Description DateTimeOffset A representing the first occurence of dayOfWeek . | Improve this Doc View Source FirstDayOfMonth(DateTimeOffset) Gets a date representing the first day of the current month. Declaration public static DateTimeOffset FirstDayOfMonth(this DateTimeOffset value) Parameters Type Name Description DateTimeOffset value The current date. Returns Type Description DateTimeOffset A representing the first day of the current month. | Improve this Doc View Source GetIso8601WeekOfYear(DateTimeOffset) Gets the ISO-8601 week number of the year for the current date. Declaration public static int GetIso8601WeekOfYear(this DateTimeOffset value) Parameters Type Name Description DateTimeOffset value The date whose week number to return. Returns Type Description System.Int32 The ISO-8601 week number of the year. Remarks This implementation is directly inspired from a blog post . about this subject. | Improve this Doc View Source IsLeapYear(DateTimeOffset) Returns a value indicating whether the year represented by the current is a leap year. Declaration public static bool IsLeapYear(this DateTimeOffset value) Parameters Type Name Description DateTimeOffset value The date whose year to check. Returns Type Description System.Boolean true if the year represented by value is a leap year; otherwise, false . | Improve this Doc View Source Last(DateTimeOffset, DayOfWeek) Gets a date representing the final occurence of a specified day of the week in the current month. Declaration public static DateTimeOffset Last(this DateTimeOffset value, DayOfWeek dayOfWeek) Parameters Type Name Description DateTimeOffset value The current date. DayOfWeek dayOfWeek The day of the week. Returns Type Description DateTimeOffset A representing the final occurence of dayOfWeek . | Improve this Doc View Source LastDayOfMonth(DateTimeOffset) Gets a date representing the last day of the current month. Declaration public static DateTimeOffset LastDayOfMonth(this DateTimeOffset value) Parameters Type Name Description DateTimeOffset value The current date. Returns Type Description DateTimeOffset A representing the last day of the current month. | Improve this Doc View Source Next(DateTimeOffset, DayOfWeek) Gets a date representing the next occurence of a specified day of the week in the current month. Declaration public static DateTimeOffset Next(this DateTimeOffset value, DayOfWeek dayOfWeek) Parameters Type Name Description DateTimeOffset value The current date. DayOfWeek dayOfWeek The day of the week. Returns Type Description DateTimeOffset A representing the next occurence of dayOfWeek ."
  },
  "api/X10D.Time.DecimalExtensions.html": {
    "href": "api/X10D.Time.DecimalExtensions.html",
    "title": "Class DecimalExtensions | X10D",
    "keywords": "Class DecimalExtensions Time-related extension methods for . Inheritance System.Object DecimalExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class DecimalExtensions : object Methods | Improve this Doc View Source Days(Decimal) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this decimal value) Parameters Type Name Description System.Decimal value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Hours(Decimal) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this decimal value) Parameters Type Name Description System.Decimal value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Milliseconds(Decimal) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this decimal value) Parameters Type Name Description System.Decimal value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(Decimal) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this decimal value) Parameters Type Name Description System.Decimal value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(Decimal) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this decimal value) Parameters Type Name Description System.Decimal value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(Decimal) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this decimal value) Parameters Type Name Description System.Decimal value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.DoubleExtensions.html": {
    "href": "api/X10D.Time.DoubleExtensions.html",
    "title": "Class DoubleExtensions | X10D",
    "keywords": "Class DoubleExtensions Time-related extension methods for . Inheritance System.Object DoubleExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class DoubleExtensions : object Methods | Improve this Doc View Source Days(Double) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this double value) Parameters Type Name Description System.Double value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Hours(Double) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this double value) Parameters Type Name Description System.Double value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Milliseconds(Double) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this double value) Parameters Type Name Description System.Double value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(Double) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this double value) Parameters Type Name Description System.Double value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(Double) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this double value) Parameters Type Name Description System.Double value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(Double) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this double value) Parameters Type Name Description System.Double value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.html": {
    "href": "api/X10D.Time.html",
    "title": "Namespace X10D.Time | X10D",
    "keywords": "Namespace X10D.Time Classes ByteExtensions Time-related extension methods for . CharSpanExtensions Time-related extension methods for of . DateTimeExtensions Extension methods for . DateTimeOffsetExtensions Extension methods for . DecimalExtensions Time-related extension methods for . DoubleExtensions Time-related extension methods for . Int16Extensions Time-related extension methods for . Int32Extensions Time-related extension methods for . Int64Extensions Time-related extension methods for . SByteExtensions Time-related extension methods for . SingleExtensions Time-related extension methods for . StringExtensions Time-related extension methods for . TimeSpanExtensions Extension methods for . TimeSpanParser Represents a class which contains a parser which converts into . UInt16Extensions Time-related extension methods for . UInt32Extensions Time-related extension methods for . UInt64Extensions Time-related extension methods for ."
  },
  "api/X10D.Time.Int16Extensions.html": {
    "href": "api/X10D.Time.Int16Extensions.html",
    "title": "Class Int16Extensions | X10D",
    "keywords": "Class Int16Extensions Time-related extension methods for . Inheritance System.Object Int16Extensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class Int16Extensions : object Methods | Improve this Doc View Source Days(Int16) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this short value) Parameters Type Name Description System.Int16 value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(Int16) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this short value) Parameters Type Name Description System.Int16 value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(Int16) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this short value) Parameters Type Name Description System.Int16 value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(Int16) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this short value) Parameters Type Name Description System.Int16 value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(Int16) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this short value) Parameters Type Name Description System.Int16 value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(Int16) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this short value) Parameters Type Name Description System.Int16 value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(Int16) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this short value) Parameters Type Name Description System.Int16 value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(Int16) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this short value) Parameters Type Name Description System.Int16 value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(Int16) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this short value) Parameters Type Name Description System.Int16 value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(Int16) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this short value) Parameters Type Name Description System.Int16 value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.Int32Extensions.html": {
    "href": "api/X10D.Time.Int32Extensions.html",
    "title": "Class Int32Extensions | X10D",
    "keywords": "Class Int32Extensions Time-related extension methods for . Inheritance System.Object Int32Extensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class Int32Extensions : object Methods | Improve this Doc View Source Days(Int32) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this int value) Parameters Type Name Description System.Int32 value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(Int32) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this int value) Parameters Type Name Description System.Int32 value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(Int32) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this int value) Parameters Type Name Description System.Int32 value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(Int32) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this int value) Parameters Type Name Description System.Int32 value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(Int32) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this int value) Parameters Type Name Description System.Int32 value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(Int32) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this int value) Parameters Type Name Description System.Int32 value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(Int32) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this int value) Parameters Type Name Description System.Int32 value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(Int32) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this int value) Parameters Type Name Description System.Int32 value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(Int32) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this int value) Parameters Type Name Description System.Int32 value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(Int32) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this int value) Parameters Type Name Description System.Int32 value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.Int64Extensions.html": {
    "href": "api/X10D.Time.Int64Extensions.html",
    "title": "Class Int64Extensions | X10D",
    "keywords": "Class Int64Extensions Time-related extension methods for . Inheritance System.Object Int64Extensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class Int64Extensions : object Methods | Improve this Doc View Source Days(Int64) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this long value) Parameters Type Name Description System.Int64 value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(Int64) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this long value) Parameters Type Name Description System.Int64 value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(Int64) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this long value) Parameters Type Name Description System.Int64 value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(Int64) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this long value) Parameters Type Name Description System.Int64 value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(Int64) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this long value) Parameters Type Name Description System.Int64 value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(Int64) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this long value) Parameters Type Name Description System.Int64 value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(Int64) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this long value) Parameters Type Name Description System.Int64 value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(Int64) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this long value) Parameters Type Name Description System.Int64 value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(Int64) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this long value) Parameters Type Name Description System.Int64 value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(Int64) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this long value) Parameters Type Name Description System.Int64 value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.SByteExtensions.html": {
    "href": "api/X10D.Time.SByteExtensions.html",
    "title": "Class SByteExtensions | X10D",
    "keywords": "Class SByteExtensions Time-related extension methods for . Inheritance System.Object SByteExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class SByteExtensions : object Methods | Improve this Doc View Source Days(SByte) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this sbyte value) Parameters Type Name Description System.SByte value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(SByte) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this sbyte value) Parameters Type Name Description System.SByte value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(SByte) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this sbyte value) Parameters Type Name Description System.SByte value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(SByte) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this sbyte value) Parameters Type Name Description System.SByte value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(SByte) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this sbyte value) Parameters Type Name Description System.SByte value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(SByte) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this sbyte value) Parameters Type Name Description System.SByte value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(SByte) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this sbyte value) Parameters Type Name Description System.SByte value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(SByte) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this sbyte value) Parameters Type Name Description System.SByte value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(SByte) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this sbyte value) Parameters Type Name Description System.SByte value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(SByte) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this sbyte value) Parameters Type Name Description System.SByte value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.SingleExtensions.html": {
    "href": "api/X10D.Time.SingleExtensions.html",
    "title": "Class SingleExtensions | X10D",
    "keywords": "Class SingleExtensions Time-related extension methods for . Inheritance System.Object SingleExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class SingleExtensions : object Methods | Improve this Doc View Source Days(Single) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this float value) Parameters Type Name Description System.Single value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Hours(Single) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this float value) Parameters Type Name Description System.Single value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Milliseconds(Single) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this float value) Parameters Type Name Description System.Single value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(Single) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this float value) Parameters Type Name Description System.Single value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(Single) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this float value) Parameters Type Name Description System.Single value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(Single) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this float value) Parameters Type Name Description System.Single value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.StringExtensions.html": {
    "href": "api/X10D.Time.StringExtensions.html",
    "title": "Class StringExtensions | X10D",
    "keywords": "Class StringExtensions Time-related extension methods for . Inheritance System.Object StringExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source ToTimeSpan(String) Parses a shorthand time span string (e.g. 3w 2d 1h) and converts it to an instance of . Declaration public static TimeSpan ToTimeSpan(this string input) Parameters Type Name Description System.String input The input string. Floating point is not supported, but integers with the following units are supported: Suffix Meaning ms Milliseconds s Seconds m Minutes h Hours d Days w Weeks mo Months y Years Returns Type Description TimeSpan A new instance of ."
  },
  "api/X10D.Time.TimeSpanExtensions.html": {
    "href": "api/X10D.Time.TimeSpanExtensions.html",
    "title": "Class TimeSpanExtensions | X10D",
    "keywords": "Class TimeSpanExtensions Extension methods for . Inheritance System.Object TimeSpanExtensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class TimeSpanExtensions : object Methods | Improve this Doc View Source Ago(TimeSpan) Returns a that is a specified duration in the past relative to the current time. Declaration public static DateTime Ago(this TimeSpan value) Parameters Type Name Description TimeSpan value The whose duration to subtract. Returns Type Description DateTime A that is a duration of value in the past relative to the current time. | Improve this Doc View Source FromNow(TimeSpan) Returns a that is a specified duration in the future relative to the current time. Declaration public static DateTime FromNow(this TimeSpan value) Parameters Type Name Description TimeSpan value The whose duration to add. Returns Type Description DateTime A that is a duration of value in the future relative to the current time."
  },
  "api/X10D.Time.TimeSpanParser.html": {
    "href": "api/X10D.Time.TimeSpanParser.html",
    "title": "Class TimeSpanParser | X10D",
    "keywords": "Class TimeSpanParser Represents a class which contains a parser which converts into . Inheritance System.Object TimeSpanParser Namespace : X10D.Time Assembly : X10D.dll Syntax public static class TimeSpanParser : object Methods | Improve this Doc View Source TryParse(ReadOnlySpan<Char>, out TimeSpan) Attempts to parses a shorthand time span (e.g. 3w 2d 1h) as a span of characters, converting it to an instance of which represents that duration of time. Declaration public static bool TryParse(ReadOnlySpan<char> value, out TimeSpan result) Parameters Type Name Description ReadOnlySpan < System.Char > value The input span of characters. Floating point is not supported, but range the following units are supported: Suffix Meaning ms Milliseconds s Seconds m Minutes h Hours d Days w Weeks mo Months y Years TimeSpan result When this method returns, contains the parsed result. Returns Type Description System.Boolean true if the parse was successful, false otherwise. | Improve this Doc View Source TryParse(Nullable<String>, out TimeSpan) Attempts to parses a shorthand time span string (e.g. 3w 2d 1h), converting it to an instance of which represents that duration of time. Declaration public static bool TryParse(string? value, out TimeSpan result) Parameters Type Name Description System.Nullable < System.String > value The input string. Floating point is not supported, but range the following units are supported: Suffix Meaning ms Milliseconds s Seconds m Minutes h Hours d Days w Weeks mo Months y Years TimeSpan result When this method returns, contains the parsed result. Returns Type Description System.Boolean true if the parse was successful, false otherwise."
  },
  "api/X10D.Time.UInt16Extensions.html": {
    "href": "api/X10D.Time.UInt16Extensions.html",
    "title": "Class UInt16Extensions | X10D",
    "keywords": "Class UInt16Extensions Time-related extension methods for . Inheritance System.Object UInt16Extensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class UInt16Extensions : object Methods | Improve this Doc View Source Days(UInt16) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this ushort value) Parameters Type Name Description System.UInt16 value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(UInt16) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this ushort value) Parameters Type Name Description System.UInt16 value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(UInt16) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this ushort value) Parameters Type Name Description System.UInt16 value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(UInt16) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this ushort value) Parameters Type Name Description System.UInt16 value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(UInt16) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this ushort value) Parameters Type Name Description System.UInt16 value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(UInt16) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this ushort value) Parameters Type Name Description System.UInt16 value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(UInt16) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this ushort value) Parameters Type Name Description System.UInt16 value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(UInt16) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this ushort value) Parameters Type Name Description System.UInt16 value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(UInt16) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this ushort value) Parameters Type Name Description System.UInt16 value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(UInt16) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this ushort value) Parameters Type Name Description System.UInt16 value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.UInt32Extensions.html": {
    "href": "api/X10D.Time.UInt32Extensions.html",
    "title": "Class UInt32Extensions | X10D",
    "keywords": "Class UInt32Extensions Time-related extension methods for . Inheritance System.Object UInt32Extensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class UInt32Extensions : object Methods | Improve this Doc View Source Days(UInt32) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this uint value) Parameters Type Name Description System.UInt32 value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(UInt32) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this uint value) Parameters Type Name Description System.UInt32 value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(UInt32) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this uint value) Parameters Type Name Description System.UInt32 value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(UInt32) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this uint value) Parameters Type Name Description System.UInt32 value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(UInt32) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this uint value) Parameters Type Name Description System.UInt32 value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(UInt32) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this uint value) Parameters Type Name Description System.UInt32 value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(UInt32) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this uint value) Parameters Type Name Description System.UInt32 value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(UInt32) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this uint value) Parameters Type Name Description System.UInt32 value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(UInt32) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this uint value) Parameters Type Name Description System.UInt32 value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(UInt32) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this uint value) Parameters Type Name Description System.UInt32 value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Time.UInt64Extensions.html": {
    "href": "api/X10D.Time.UInt64Extensions.html",
    "title": "Class UInt64Extensions | X10D",
    "keywords": "Class UInt64Extensions Time-related extension methods for . Inheritance System.Object UInt64Extensions Namespace : X10D.Time Assembly : X10D.dll Syntax public static class UInt64Extensions : object Methods | Improve this Doc View Source Days(UInt64) Returns a that represents this value as the number of days. Declaration public static TimeSpan Days(this ulong value) Parameters Type Name Description System.UInt64 value The duration, in days. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source FromUnixTimeMilliseconds(UInt64) Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeMilliseconds(this ulong value) Parameters Type Name Description System.UInt64 value A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source FromUnixTimeSeconds(UInt64) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a value. Declaration public static DateTimeOffset FromUnixTimeSeconds(this ulong value) Parameters Type Name Description System.UInt64 value A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTimeOffset A date and time value that represents the same moment in time as the Unix time. | Improve this Doc View Source Hours(UInt64) Returns a that represents this value as the number of hours. Declaration public static TimeSpan Hours(this ulong value) Parameters Type Name Description System.UInt64 value The duration, in hours. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source IsLeapYear(UInt64) Returns a value indicating whether the current integer, representing a year, is a leap year. Declaration public static bool IsLeapYear(this ulong value) Parameters Type Name Description System.UInt64 value The value whose leap year status to check. Returns Type Description System.Boolean true if value refers to a leap year; otherwise, false . | Improve this Doc View Source Milliseconds(UInt64) Returns a that represents this value as the number of milliseconds. Declaration public static TimeSpan Milliseconds(this ulong value) Parameters Type Name Description System.UInt64 value The duration, in milliseconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Minutes(UInt64) Returns a that represents this value as the number of minutes. Declaration public static TimeSpan Minutes(this ulong value) Parameters Type Name Description System.UInt64 value The duration, in minutes. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Seconds(UInt64) Returns a that represents this value as the number of seconds. Declaration public static TimeSpan Seconds(this ulong value) Parameters Type Name Description System.UInt64 value The duration, in seconds. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Ticks(UInt64) Returns a that represents this value as the number of ticks. Declaration public static TimeSpan Ticks(this ulong value) Parameters Type Name Description System.UInt64 value The duration, in ticks. Returns Type Description TimeSpan A whose will equal value . | Improve this Doc View Source Weeks(UInt64) Returns a that represents this value as the number of weeks. Declaration public static TimeSpan Weeks(this ulong value) Parameters Type Name Description System.UInt64 value The duration, in weeks. Returns Type Description TimeSpan A whose will equal value × 7."
  },
  "api/X10D.Unity.ComponentExtensions.html": {
    "href": "api/X10D.Unity.ComponentExtensions.html",
    "title": "Class ComponentExtensions | X10D",
    "keywords": "Class ComponentExtensions Extension methods for . Inheritance System.Object ComponentExtensions Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public static class ComponentExtensions : object Methods | Improve this Doc View Source GetComponentsInChildrenOnly<T>(Component) Returns an array of components of the specified type, excluding components that live on the object to which this component is attached. Declaration public static T[] GetComponentsInChildrenOnly<T>(this Component component) Parameters Type Name Description Component component The component whose child components to retrieve. Returns Type Description T[] An array T representing the child components. Type Parameters Name Description T The type of the components to retrieve."
  },
  "api/X10D.Unity.DebugUtility.html": {
    "href": "api/X10D.Unity.DebugUtility.html",
    "title": "Class DebugUtility | X10D",
    "keywords": "Class DebugUtility An extended version of Unity's utility class which offers support for drawing simple primitives. Inheritance System.Object DebugUtility Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public static class DebugUtility : object Properties | Improve this Doc View Source isDebugBuild Gets a value indicating whether this is a debug build. Declaration public static bool isDebugBuild { get; } Property Value Type Description System.Boolean true if this is a debug build; otherwise, false . | Improve this Doc View Source isDeveloperConsoleVisible Gets a value indicating whether the developer console is visible. Declaration public static bool isDeveloperConsoleVisible { get; } Property Value Type Description System.Boolean true if the developer console is visible; otherwise, false . | Improve this Doc View Source unityLogger Gets the default Unity debug logger. Declaration public static ILogger unityLogger { get; } Property Value Type Description ILogger The Unity debug logger. Methods | Improve this Doc View Source Assert(Boolean) Asserts a condition. Declaration public static void Assert(bool condition) Parameters Type Name Description System.Boolean condition The condition to assert. | Improve this Doc View Source Assert(Boolean, Nullable<String>) Asserts a condition. Declaration public static void Assert(bool condition, string? message) Parameters Type Name Description System.Boolean condition The condition to assert. System.Nullable < System.String > message The message to log. | Improve this Doc View Source Assert(Boolean, Nullable<String>, Nullable<UnityEngine.Object>) Logs a message to the Unity Console. Declaration public static void Assert(bool condition, string? message, UnityEngine.Object? context) Parameters Type Name Description System.Boolean condition The condition to assert. System.Nullable < System.String > message The message to log. System.Nullable < UnityEngine.Object > context The object to which the assertion applies. | Improve this Doc View Source Assert(Boolean, UnityEngine.Object) Asserts a condition. Declaration public static void Assert(bool condition, UnityEngine.Object context) Parameters Type Name Description System.Boolean condition The condition to assert. UnityEngine.Object context The object to which the assertion applies. | Improve this Doc View Source Assert<T>(Boolean, T) Asserts a condition. Declaration public static void Assert<T>(bool condition, T message) Parameters Type Name Description System.Boolean condition The condition to assert. T message The message to log. Type Parameters Name Description T | Improve this Doc View Source Assert<T>(Boolean, T, Nullable<UnityEngine.Object>) Logs a message to the Unity Console. Declaration public static void Assert<T>(bool condition, T message, UnityEngine.Object? context) Parameters Type Name Description System.Boolean condition The condition to assert. T message The message to log. System.Nullable < UnityEngine.Object > context The object to which the assertion applies. Type Parameters Name Description T | Improve this Doc View Source Break() Pauses the editor. Declaration public static void Break() | Improve this Doc View Source ClearDeveloperConsole() Clears the developer console. Declaration public static void ClearDeveloperConsole() | Improve this Doc View Source DrawCircle(Vector2, Single, Int32) Draws a circle with the specified color. Declaration public static void DrawCircle(Vector2 center, float radius, int segments) Parameters Type Name Description Vector2 center The center point of the circle. System.Single radius The radius of the circle. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawCircle(Vector2, Single, Int32, Color) Draws a circle with the specified color. Declaration public static void DrawCircle(Vector2 center, float radius, int segments, in Color color) Parameters Type Name Description Vector2 center The center point of the circle. System.Single radius The radius of the circle. System.Int32 segments The number of segments to generate. Color color The color of the circle. | Improve this Doc View Source DrawCircle(Vector2, Single, Int32, Color, Single) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(Vector2 center, float radius, int segments, in Color color, float duration) Parameters Type Name Description Vector2 center The center point of the circle. System.Single radius The radius of the circle. System.Int32 segments The number of segments to generate. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. | Improve this Doc View Source DrawCircle(Vector2, Single, Int32, Color, Single, Boolean) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(Vector2 center, float radius, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector2 center The center point of the circle. System.Single radius The radius of the circle. System.Int32 segments The number of segments to generate. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the circle be obscured by objects closer to the camera. | Improve this Doc View Source DrawCircle(Vector2, Single, Int32, Vector3, Color, Single, Boolean) Draws a circle. Declaration public static void DrawCircle(Vector2 center, float radius, int segments, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector2 center The center point of the circle. System.Single radius The radius of the circle. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the circle be obscured by objects closer to the camera. | Improve this Doc View Source DrawCircle(Circle, Int32) Draws a circle with the specified color. Declaration public static void DrawCircle(in Circle circle, int segments) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawCircle(Circle, Int32, Color) Draws a circle with the specified color. Declaration public static void DrawCircle(in Circle circle, int segments, in Color color) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. Color color The color of the circle. | Improve this Doc View Source DrawCircle(Circle, Int32, Color, Single) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(in Circle circle, int segments, in Color color, float duration) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. | Improve this Doc View Source DrawCircle(Circle, Int32, Color, Single, Boolean) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(in Circle circle, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the circle be obscured by objects closer to the camera. | Improve this Doc View Source DrawCircle(Circle, Int32, Vector3) Draws a circle with the specified color. Declaration public static void DrawCircle(in Circle circle, int segments, in Vector3 offset) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. | Improve this Doc View Source DrawCircle(Circle, Int32, Vector3, Color) Draws a circle with the specified color. Declaration public static void DrawCircle(in Circle circle, int segments, in Vector3 offset, in Color color) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. Color color The color of the circle. | Improve this Doc View Source DrawCircle(Circle, Int32, Vector3, Color, Single) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(in Circle circle, int segments, in Vector3 offset, in Color color, float duration) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. | Improve this Doc View Source DrawCircle(Circle, Int32, Vector3, Color, Single, Boolean) Draws a circle. Declaration public static void DrawCircle(in Circle circle, int segments, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Circle circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the circle be obscured by objects closer to the camera. | Improve this Doc View Source DrawCircle(CircleF, Int32) Draws a circle with the specified color. Declaration public static void DrawCircle(in CircleF circle, int segments) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawCircle(CircleF, Int32, Color) Draws a circle with the specified color. Declaration public static void DrawCircle(in CircleF circle, int segments, in Color color) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. Color color The color of the circle. | Improve this Doc View Source DrawCircle(CircleF, Int32, Color, Single) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(in CircleF circle, int segments, in Color color, float duration) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. | Improve this Doc View Source DrawCircle(CircleF, Int32, Color, Single, Boolean) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(in CircleF circle, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the circle be obscured by objects closer to the camera. | Improve this Doc View Source DrawCircle(CircleF, Int32, Vector3) Draws a circle with the specified color. Declaration public static void DrawCircle(in CircleF circle, int segments, in Vector3 offset) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. | Improve this Doc View Source DrawCircle(CircleF, Int32, Vector3, Color) Draws a circle with the specified color. Declaration public static void DrawCircle(in CircleF circle, int segments, in Vector3 offset, in Color color) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. Color color The color of the circle. | Improve this Doc View Source DrawCircle(CircleF, Int32, Vector3, Color, Single) Draws a circle with the specified color and duration. Declaration public static void DrawCircle(in CircleF circle, int segments, in Vector3 offset, in Color color, float duration) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. | Improve this Doc View Source DrawCircle(CircleF, Int32, Vector3, Color, Single, Boolean) Draws a circle. Declaration public static void DrawCircle(in CircleF circle, int segments, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description CircleF circle The circle to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the circle. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the circle be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(Vector2, Single, Single, Int32) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Vector2 center, float radiusX, float radiusY, int segments) Parameters Type Name Description Vector2 center The center point of the ellipse. System.Single radiusX The horizontal radius of the ellipse. System.Single radiusY The vertical radius of the ellipse. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawEllipse(Vector2, Single, Single, Int32, Color) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Vector2 center, float radiusX, float radiusY, int segments, in Color color) Parameters Type Name Description Vector2 center The center point of the ellipse. System.Single radiusX The horizontal radius of the ellipse. System.Single radiusY The vertical radius of the ellipse. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. | Improve this Doc View Source DrawEllipse(Vector2, Single, Single, Int32, Color, Single) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(Vector2 center, float radiusX, float radiusY, int segments, in Color color, float duration) Parameters Type Name Description Vector2 center The center point of the ellipse. System.Single radiusX The horizontal radius of the ellipse. System.Single radiusY The vertical radius of the ellipse. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. | Improve this Doc View Source DrawEllipse(Vector2, Single, Single, Int32, Color, Single, Boolean) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(Vector2 center, float radiusX, float radiusY, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector2 center The center point of the ellipse. System.Single radiusX The horizontal radius of the ellipse. System.Single radiusY The vertical radius of the ellipse. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(Vector2, Single, Single, Int32, Vector2, Color, Single, Boolean) Draws an ellipse. Declaration public static void DrawEllipse(Vector2 center, float radiusX, float radiusY, int segments, Vector2 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector2 center The center point of the ellipse. System.Single radiusX The horizontal radius of the ellipse. System.Single radiusY The vertical radius of the ellipse. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(Vector2, Vector2, Int32) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Vector2 center, Vector2 radius, int segments) Parameters Type Name Description Vector2 center The center point of the ellipse. Vector2 radius The radius of the ellipse. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawEllipse(Vector2, Vector2, Int32, Color) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Vector2 center, Vector2 radius, int segments, in Color color) Parameters Type Name Description Vector2 center The center point of the ellipse. Vector2 radius The radius of the ellipse. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. | Improve this Doc View Source DrawEllipse(Vector2, Vector2, Int32, Color, Single) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(Vector2 center, Vector2 radius, int segments, in Color color, float duration) Parameters Type Name Description Vector2 center The center point of the ellipse. Vector2 radius The radius of the ellipse. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. | Improve this Doc View Source DrawEllipse(Vector2, Vector2, Int32, Color, Single, Boolean) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(Vector2 center, Vector2 radius, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector2 center The center point of the ellipse. Vector2 radius The radius of the ellipse. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(Vector2, Vector2, Int32, Vector2, Color, Single, Boolean) Draws an ellipse. Declaration public static void DrawEllipse(Vector2 center, Vector2 radius, int segments, Vector2 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector2 center The center point of the ellipse. Vector2 radius The radius of the ellipse. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(Ellipse, Int32) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Ellipse ellipse, int segments) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawEllipse(Ellipse, Int32, Color) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Ellipse ellipse, int segments, in Color color) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. | Improve this Doc View Source DrawEllipse(Ellipse, Int32, Color, Single) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(Ellipse ellipse, int segments, in Color color, float duration) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. | Improve this Doc View Source DrawEllipse(Ellipse, Int32, Color, Single, Boolean) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(Ellipse ellipse, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(Ellipse, Int32, Vector2) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Ellipse ellipse, int segments, Vector2 offset) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. | Improve this Doc View Source DrawEllipse(Ellipse, Int32, Vector2, Color) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(Ellipse ellipse, int segments, Vector2 offset, in Color color) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. | Improve this Doc View Source DrawEllipse(Ellipse, Int32, Vector2, Color, Single) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(Ellipse ellipse, int segments, Vector2 offset, in Color color, float duration) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. | Improve this Doc View Source DrawEllipse(Ellipse, Int32, Vector2, Color, Single, Boolean) Draws an ellipse. Declaration public static void DrawEllipse(Ellipse ellipse, int segments, Vector2 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Ellipse ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(EllipseF, Int32) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(EllipseF ellipse, int segments) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawEllipse(EllipseF, Int32, Color) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(EllipseF ellipse, int segments, in Color color) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. | Improve this Doc View Source DrawEllipse(EllipseF, Int32, Color, Single) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(EllipseF ellipse, int segments, in Color color, float duration) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. | Improve this Doc View Source DrawEllipse(EllipseF, Int32, Color, Single, Boolean) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(EllipseF ellipse, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawEllipse(EllipseF, Int32, Vector2) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(EllipseF ellipse, int segments, Vector2 offset) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. | Improve this Doc View Source DrawEllipse(EllipseF, Int32, Vector2, Color) Draws an ellipse with the specified color. Declaration public static void DrawEllipse(EllipseF ellipse, int segments, Vector2 offset, in Color color) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. | Improve this Doc View Source DrawEllipse(EllipseF, Int32, Vector2, Color, Single) Draws an ellipse with the specified color and duration. Declaration public static void DrawEllipse(EllipseF ellipse, int segments, Vector2 offset, in Color color, float duration) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. | Improve this Doc View Source DrawEllipse(EllipseF, Int32, Vector2, Color, Single, Boolean) Draws an ellipse. Declaration public static void DrawEllipse(EllipseF ellipse, int segments, Vector2 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description EllipseF ellipse The ellipse to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the ellipse. Color color The color of the ellipse. System.Single duration The duration of the ellipse's visibility, in seconds. If 0 is passed, the ellipse is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the ellipse be obscured by objects closer to the camera. | Improve this Doc View Source DrawFunction(Func<Single, Single>, Single, Single) Draws a function plot. Declaration public static void DrawFunction(Func<float, float> function, float xMin, float xMax) Parameters Type Name Description Func < System.Single , System.Single > function The function to plot. System.Single xMin The minimum X value. System.Single xMax The maximum X value. | Improve this Doc View Source DrawFunction(Func<Single, Single>, Single, Single, Single, Vector3, Color, Single, Boolean) Draws a function plot. Declaration public static void DrawFunction(Func<float, float> function, float xMin, float xMax, float step, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Func < System.Single , System.Single > function The function to plot. System.Single xMin The minimum X value. System.Single xMax The maximum X value. System.Single step The X increment. Vector3 offset The drawing offset of the circle. Color color The color of the circle. System.Single duration The duration of the circle's visibility, in seconds. If 0 is passed, the circle is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the circle be obscured by objects closer to the camera. | Improve this Doc View Source DrawLine(Vector3, Vector3) Draws a line between start and end points. Declaration public static void DrawLine(Vector3 start, Vector3 end) Parameters Type Name Description Vector3 start The starting point. Vector3 end The ending point. | Improve this Doc View Source DrawLine(Vector3, Vector3, Color) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Vector3 start, Vector3 end, in Color color) Parameters Type Name Description Vector3 start The starting point. Vector3 end The ending point. Color color The color of the line. | Improve this Doc View Source DrawLine(Vector3, Vector3, Color, Single) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Vector3 start, Vector3 end, in Color color, float duration) Parameters Type Name Description Vector3 start The starting point. Vector3 end The ending point. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. | Improve this Doc View Source DrawLine(Vector3, Vector3, Color, Single, Boolean) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Vector3 start, Vector3 end, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector3 start The starting point. Vector3 end The ending point. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the line be obscured by objects closer to the camera. | Improve this Doc View Source DrawLine(Line) Draws a line between start and end points. Declaration public static void DrawLine(Line line) Parameters Type Name Description Line line The line to draw. | Improve this Doc View Source DrawLine(Line, Color) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Line line, in Color color) Parameters Type Name Description Line line The line to draw. Color color The color of the line. | Improve this Doc View Source DrawLine(Line, Color, Single) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Line line, in Color color, float duration) Parameters Type Name Description Line line The line to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. | Improve this Doc View Source DrawLine(Line, Color, Single, Boolean) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Line line, in Color color, float duration, bool depthTest) Parameters Type Name Description Line line The line to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the line be obscured by objects closer to the camera. | Improve this Doc View Source DrawLine(Line3D) Draws a line between start and end points. Declaration public static void DrawLine(Line3D line) Parameters Type Name Description Line3D line The line to draw. | Improve this Doc View Source DrawLine(Line3D, Color) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Line3D line, in Color color) Parameters Type Name Description Line3D line The line to draw. Color color The color of the line. | Improve this Doc View Source DrawLine(Line3D, Color, Single) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Line3D line, in Color color, float duration) Parameters Type Name Description Line3D line The line to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. | Improve this Doc View Source DrawLine(Line3D, Color, Single, Boolean) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(Line3D line, in Color color, float duration, bool depthTest) Parameters Type Name Description Line3D line The line to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the line be obscured by objects closer to the camera. | Improve this Doc View Source DrawLine(LineF) Draws a line between start and end points. Declaration public static void DrawLine(LineF line) Parameters Type Name Description LineF line The line to draw. | Improve this Doc View Source DrawLine(LineF, Color) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(LineF line, in Color color) Parameters Type Name Description LineF line The line to draw. Color color The color of the line. | Improve this Doc View Source DrawLine(LineF, Color, Single) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(LineF line, in Color color, float duration) Parameters Type Name Description LineF line The line to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. | Improve this Doc View Source DrawLine(LineF, Color, Single, Boolean) Draws a line between start and end points, with the specified color. Declaration public static void DrawLine(LineF line, in Color color, float duration, bool depthTest) Parameters Type Name Description LineF line The line to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the line be obscured by objects closer to the camera. | Improve this Doc View Source DrawPolygon(Polygon) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to draw. | Improve this Doc View Source DrawPolygon(Polygon, Color) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon, in Color color) Parameters Type Name Description Polygon polygon The polygon to draw. Color color The color to use for drawing. | Improve this Doc View Source DrawPolygon(Polygon, Color, Single) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon, in Color color, float duration) Parameters Type Name Description Polygon polygon The polygon to draw. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. | Improve this Doc View Source DrawPolygon(Polygon, Color, Single, Boolean) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon, in Color color, float duration, bool depthTest) Parameters Type Name Description Polygon polygon The polygon to draw. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawPolygon(Polygon, Vector3) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon, in Vector3 offset) Parameters Type Name Description Polygon polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. | Improve this Doc View Source DrawPolygon(Polygon, Vector3, Color) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon, in Vector3 offset, in Color color) Parameters Type Name Description Polygon polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. Color color The color to use for drawing. | Improve this Doc View Source DrawPolygon(Polygon, Vector3, Color, Single) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon, in Vector3 offset, in Color color, float duration) Parameters Type Name Description Polygon polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. | Improve this Doc View Source DrawPolygon(Polygon, Vector3, Color, Single, Boolean) Draws a polygon. Declaration public static void DrawPolygon(Polygon polygon, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Polygon polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawPolygon(PolygonF) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon) Parameters Type Name Description PolygonF polygon The polygon to draw. | Improve this Doc View Source DrawPolygon(PolygonF, Color) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon, in Color color) Parameters Type Name Description PolygonF polygon The polygon to draw. Color color The color to use for drawing. | Improve this Doc View Source DrawPolygon(PolygonF, Color, Single) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon, in Color color, float duration) Parameters Type Name Description PolygonF polygon The polygon to draw. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. | Improve this Doc View Source DrawPolygon(PolygonF, Color, Single, Boolean) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon, in Color color, float duration, bool depthTest) Parameters Type Name Description PolygonF polygon The polygon to draw. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawPolygon(PolygonF, Vector3) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon, in Vector3 offset) Parameters Type Name Description PolygonF polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. | Improve this Doc View Source DrawPolygon(PolygonF, Vector3, Color) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon, in Vector3 offset, in Color color) Parameters Type Name Description PolygonF polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. Color color The color to use for drawing. | Improve this Doc View Source DrawPolygon(PolygonF, Vector3, Color, Single) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon, in Vector3 offset, in Color color, float duration) Parameters Type Name Description PolygonF polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. | Improve this Doc View Source DrawPolygon(PolygonF, Vector3, Color, Single, Boolean) Draws a polygon. Declaration public static void DrawPolygon(PolygonF polygon, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description PolygonF polygon The polygon to draw. Vector3 offset The drawing offset of the polygon. Color color The color to use for drawing. System.Single duration The duration of the polygon's visibility, in seconds. If 0 is passed, the polygon is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawPolyhedron(Polyhedron) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. | Improve this Doc View Source DrawPolyhedron(Polyhedron, Color) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron, in Color color) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Color color The color to use for drawing. | Improve this Doc View Source DrawPolyhedron(Polyhedron, Color, Single) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron, in Color color, float duration) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Color color The color to use for drawing. System.Single duration The duration of the polyhedron's visibility, in seconds. If 0 is passed, the polyhedron is visible for a single frame. | Improve this Doc View Source DrawPolyhedron(Polyhedron, Color, Single, Boolean) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron, in Color color, float duration, bool depthTest) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Color color The color to use for drawing. System.Single duration The duration of the polyhedron's visibility, in seconds. If 0 is passed, the polyhedron is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawPolyhedron(Polyhedron, Vector3) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron, in Vector3 offset) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Vector3 offset The drawing offset of the polyhedron. | Improve this Doc View Source DrawPolyhedron(Polyhedron, Vector3, Color) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron, in Vector3 offset, in Color color) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Vector3 offset The drawing offset of the polyhedron. Color color The color to use for drawing. | Improve this Doc View Source DrawPolyhedron(Polyhedron, Vector3, Color, Single) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron, in Vector3 offset, in Color color, float duration) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Vector3 offset The drawing offset of the polyhedron. Color color The color to use for drawing. System.Single duration The duration of the polyhedron's visibility, in seconds. If 0 is passed, the polyhedron is visible for a single frame. | Improve this Doc View Source DrawPolyhedron(Polyhedron, Vector3, Color, Single, Boolean) Draws a polyhedron. Declaration public static void DrawPolyhedron(Polyhedron polyhedron, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Vector3 offset The drawing offset of the polyhedron. Color color The color to use for drawing. System.Single duration The duration of the polyhedron's visibility, in seconds. If 0 is passed, the polyhedron is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawRay(Ray) Draws a ray. Declaration public static void DrawRay(Ray ray) Parameters Type Name Description Ray ray The ray to draw. | Improve this Doc View Source DrawRay(Ray, Color) Draws a ray. Declaration public static void DrawRay(Ray ray, in Color color) Parameters Type Name Description Ray ray The ray to draw. Color color The color of the line. | Improve this Doc View Source DrawRay(Ray, Color, Single) Draws a ray. Declaration public static void DrawRay(Ray ray, in Color color, float duration) Parameters Type Name Description Ray ray The ray to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. | Improve this Doc View Source DrawRay(Ray, Color, Single, Boolean) Draws a ray. Declaration public static void DrawRay(Ray ray, in Color color, float duration, bool depthTest) Parameters Type Name Description Ray ray The ray to draw. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the line be obscured by objects closer to the camera. | Improve this Doc View Source DrawRay(Vector3, Vector3) Draws a ray. Declaration public static void DrawRay(Vector3 start, Vector3 direction) Parameters Type Name Description Vector3 start The starting point. Vector3 direction The direction. | Improve this Doc View Source DrawRay(Vector3, Vector3, Color) Draws a ray. Declaration public static void DrawRay(Vector3 start, Vector3 direction, in Color color) Parameters Type Name Description Vector3 start The starting point. Vector3 direction The direction. Color color The color of the line. | Improve this Doc View Source DrawRay(Vector3, Vector3, Color, Single) Draws a ray. Declaration public static void DrawRay(Vector3 start, Vector3 direction, in Color color, float duration) Parameters Type Name Description Vector3 start The starting point. Vector3 direction The direction. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. | Improve this Doc View Source DrawRay(Vector3, Vector3, Color, Single, Boolean) Draws a ray. Declaration public static void DrawRay(Vector3 start, Vector3 direction, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector3 start The starting point. Vector3 direction The direction. Color color The color of the line. System.Single duration The duration of the line's visibility, in seconds. If 0 is passed, the line is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the line be obscured by objects closer to the camera. | Improve this Doc View Source DrawRectangle(Rect, UnityEngine.Color) Draws a rectangle with the specified color. Declaration public static void DrawRectangle(Rect rect, in UnityEngine.Color color) Parameters Type Name Description Rect rect The rectangle to draw. UnityEngine.Color color The color of the box. | Improve this Doc View Source DrawRectangle(Rect, UnityEngine.Color, Single) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(Rect rect, in UnityEngine.Color color, float duration) Parameters Type Name Description Rect rect The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawRectangle(Rect, UnityEngine.Color, Single, Boolean) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(Rect rect, in UnityEngine.Color color, float duration, bool depthTest) Parameters Type Name Description Rect rect The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawRectangle(Rectangle, UnityEngine.Color) Draws a rectangle with the specified color. Declaration public static void DrawRectangle(Rectangle rectangle, in UnityEngine.Color color) Parameters Type Name Description Rectangle rectangle The rectangle to draw. UnityEngine.Color color The color of the box. | Improve this Doc View Source DrawRectangle(Rectangle, UnityEngine.Color, Single) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(Rectangle rectangle, in UnityEngine.Color color, float duration) Parameters Type Name Description Rectangle rectangle The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawRectangle(Rectangle, UnityEngine.Color, Single, Boolean) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(Rectangle rectangle, in UnityEngine.Color color, float duration, bool depthTest) Parameters Type Name Description Rectangle rectangle The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawRectangle(RectangleF, UnityEngine.Color) Draws a rectangle with the specified color. Declaration public static void DrawRectangle(RectangleF rectangle, in UnityEngine.Color color) Parameters Type Name Description RectangleF rectangle The rectangle to draw. UnityEngine.Color color The color of the box. | Improve this Doc View Source DrawRectangle(RectangleF, UnityEngine.Color, Single) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(RectangleF rectangle, in UnityEngine.Color color, float duration) Parameters Type Name Description RectangleF rectangle The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawRectangle(RectangleF, UnityEngine.Color, Single, Boolean) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(RectangleF rectangle, in UnityEngine.Color color, float duration, bool depthTest) Parameters Type Name Description RectangleF rectangle The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawRectangle(RectInt, UnityEngine.Color) Draws a rectangle with the specified color. Declaration public static void DrawRectangle(RectInt rect, in UnityEngine.Color color) Parameters Type Name Description RectInt rect The rectangle to draw. UnityEngine.Color color The color of the box. | Improve this Doc View Source DrawRectangle(RectInt, UnityEngine.Color, Single) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(RectInt rect, in UnityEngine.Color color, float duration) Parameters Type Name Description RectInt rect The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawRectangle(RectInt, UnityEngine.Color, Single, Boolean) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(RectInt rect, in UnityEngine.Color color, float duration, bool depthTest) Parameters Type Name Description RectInt rect The rectangle to draw. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawRectangle(Vector2, Vector2) Draws a rectangle. Declaration public static void DrawRectangle(Vector2 center, Vector2 size) Parameters Type Name Description Vector2 center The center point. Vector2 size The extents of the box. | Improve this Doc View Source DrawRectangle(Vector2, Vector2, UnityEngine.Color) Draws a rectangle with the specified color. Declaration public static void DrawRectangle(Vector2 center, Vector2 size, in UnityEngine.Color color) Parameters Type Name Description Vector2 center The center point. Vector2 size The extents of the box. UnityEngine.Color color The color of the box. | Improve this Doc View Source DrawRectangle(Vector2, Vector2, UnityEngine.Color, Single) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(Vector2 center, Vector2 size, in UnityEngine.Color color, float duration) Parameters Type Name Description Vector2 center The center point. Vector2 size The extents of the box. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawRectangle(Vector2, Vector2, UnityEngine.Color, Single, Boolean) Draws a rectangle with the specified color and duration. Declaration public static void DrawRectangle(Vector2 center, Vector2 size, in UnityEngine.Color color, float duration, bool depthTest) Parameters Type Name Description Vector2 center The center point. Vector2 size The extents of the box. UnityEngine.Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawSphere(Vector3, Single, Int32) Draws a sphere with the specified color. Declaration public static void DrawSphere(Vector3 center, float radius, int segments) Parameters Type Name Description Vector3 center The center point of the sphere. System.Single radius The radius of the sphere. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawSphere(Vector3, Single, Int32, Color) Draws a sphere with the specified color. Declaration public static void DrawSphere(Vector3 center, float radius, int segments, in Color color) Parameters Type Name Description Vector3 center The center point of the sphere. System.Single radius The radius of the sphere. System.Int32 segments The number of segments to generate. Color color The color of the sphere. | Improve this Doc View Source DrawSphere(Vector3, Single, Int32, Color, Single) Draws a sphere with the specified color and duration. Declaration public static void DrawSphere(Vector3 center, float radius, int segments, in Color color, float duration) Parameters Type Name Description Vector3 center The center point of the sphere. System.Single radius The radius of the sphere. System.Int32 segments The number of segments to generate. Color color The color of the sphere. System.Single duration The duration of the sphere's visibility, in seconds. If 0 is passed, the sphere is visible for a single frame. | Improve this Doc View Source DrawSphere(Vector3, Single, Int32, Color, Single, Boolean) Draws a sphere with the specified color and duration. Declaration public static void DrawSphere(Vector3 center, float radius, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector3 center The center point of the sphere. System.Single radius The radius of the sphere. System.Int32 segments The number of segments to generate. Color color The color of the sphere. System.Single duration The duration of the sphere's visibility, in seconds. If 0 is passed, the sphere is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the sphere be obscured by objects closer to the camera. | Improve this Doc View Source DrawSphere(Vector3, Single, Int32, Vector2, Color, Single, Boolean) Draws a sphere. Declaration public static void DrawSphere(Vector3 center, float radius, int segments, Vector2 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector3 center The center point of the sphere. System.Single radius The radius of the sphere. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the sphere. Color color The color of the sphere. System.Single duration The duration of the sphere's visibility, in seconds. If 0 is passed, the sphere is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the sphere be obscured by objects closer to the camera. | Improve this Doc View Source DrawSphere(Sphere, Int32) Draws a sphere with the specified color. Declaration public static void DrawSphere(Sphere sphere, int segments) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. | Improve this Doc View Source DrawSphere(Sphere, Int32, Color) Draws a sphere with the specified color. Declaration public static void DrawSphere(Sphere sphere, int segments, in Color color) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. Color color The color of the sphere. | Improve this Doc View Source DrawSphere(Sphere, Int32, Color, Single) Draws a sphere with the specified color and duration. Declaration public static void DrawSphere(Sphere sphere, int segments, in Color color, float duration) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. Color color The color of the sphere. System.Single duration The duration of the sphere's visibility, in seconds. If 0 is passed, the sphere is visible for a single frame. | Improve this Doc View Source DrawSphere(Sphere, Int32, Color, Single, Boolean) Draws a sphere with the specified color and duration. Declaration public static void DrawSphere(Sphere sphere, int segments, in Color color, float duration, bool depthTest) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. Color color The color of the sphere. System.Single duration The duration of the sphere's visibility, in seconds. If 0 is passed, the sphere is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the sphere be obscured by objects closer to the camera. | Improve this Doc View Source DrawSphere(Sphere, Int32, Vector2) Draws a sphere with the specified color. Declaration public static void DrawSphere(Sphere sphere, int segments, Vector2 offset) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the sphere. | Improve this Doc View Source DrawSphere(Sphere, Int32, Vector2, Color) Draws a sphere with the specified color. Declaration public static void DrawSphere(Sphere sphere, int segments, Vector2 offset, in Color color) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the sphere. Color color The color of the sphere. | Improve this Doc View Source DrawSphere(Sphere, Int32, Vector2, Color, Single) Draws a sphere with the specified color and duration. Declaration public static void DrawSphere(Sphere sphere, int segments, Vector2 offset, in Color color, float duration) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. Vector2 offset The drawing offset of the sphere. Color color The color of the sphere. System.Single duration The duration of the sphere's visibility, in seconds. If 0 is passed, the sphere is visible for a single frame. | Improve this Doc View Source DrawSphere(Sphere, Int32, Vector3, Color, Single, Boolean) Draws a sphere. Declaration public static void DrawSphere(Sphere sphere, int segments, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Sphere sphere The sphere to draw. System.Int32 segments The number of segments to generate. Vector3 offset The drawing offset of the sphere. Color color The color of the sphere. System.Single duration The duration of the sphere's visibility, in seconds. If 0 is passed, the sphere is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the sphere be obscured by objects closer to the camera. | Improve this Doc View Source DrawUnjoinedPolyhedron(Polyhedron, Vector3, Color, Single, Boolean) Draws a polyhedron. Declaration public static void DrawUnjoinedPolyhedron(Polyhedron polyhedron, in Vector3 offset, in Color color, float duration, bool depthTest) Parameters Type Name Description Polyhedron polyhedron The polyhedron to draw. Vector3 offset The drawing offset of the polyhedron. Color color The color to use for drawing. System.Single duration The duration of the polyhedron's visibility, in seconds. If 0 is passed, the polyhedron is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawWireCube(Bounds) Draws an axis-aligned bounding box. Declaration public static void DrawWireCube(in Bounds bounds) Parameters Type Name Description Bounds bounds The bounding box to draw. | Improve this Doc View Source DrawWireCube(Bounds, Color) Draws an axis-aligned bounding box. Declaration public static void DrawWireCube(in Bounds bounds, in Color color) Parameters Type Name Description Bounds bounds The bounding box to draw. Color color The color of the box. | Improve this Doc View Source DrawWireCube(Bounds, Color, Single) Draws an axis-aligned bounding box. Declaration public static void DrawWireCube(in Bounds bounds, in Color color, float duration) Parameters Type Name Description Bounds bounds The bounding box to draw. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawWireCube(Bounds, Color, Single, Boolean) Draws an axis-aligned bounding box. Declaration public static void DrawWireCube(in Bounds bounds, in Color color, float duration, bool depthTest) Parameters Type Name Description Bounds bounds The bounding box to draw. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawWireCube(Vector3, Vector3) Draws a wireframe cube with a center and a size. Declaration public static void DrawWireCube(Vector3 center, Vector3 size) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. | Improve this Doc View Source DrawWireCube(Vector3, Vector3, Color) Draws a wireframe cube with the specified color. Declaration public static void DrawWireCube(Vector3 center, Vector3 size, in Color color) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. Color color The color of the box. | Improve this Doc View Source DrawWireCube(Vector3, Vector3, Color, Single) Draws a wireframe cube with the specified color and duration. Declaration public static void DrawWireCube(Vector3 center, Vector3 size, in Color color, float duration) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawWireCube(Vector3, Vector3, Color, Single, Boolean) Draws a wireframe cube with the specified color and duration. Declaration public static void DrawWireCube(Vector3 center, Vector3 size, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawWireCube(Vector3, Vector3, Quaternion) Draws a wireframe cube with the specified orientation. Declaration public static void DrawWireCube(Vector3 center, Vector3 size, Quaternion orientation) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. Quaternion orientation The orientation of the box. | Improve this Doc View Source DrawWireCube(Vector3, Vector3, Quaternion, Color) Draws a wireframe cube with the specified orientation and color. Declaration public static void DrawWireCube(Vector3 center, Vector3 size, Quaternion orientation, in Color color) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. Quaternion orientation The orientation of the box. Color color The color of the box. | Improve this Doc View Source DrawWireCube(Vector3, Vector3, Quaternion, Color, Single) Draws a wireframe cube with the specified orientation, color, and duration. Declaration public static void DrawWireCube(Vector3 center, Vector3 size, Quaternion orientation, in Color color, float duration) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. Quaternion orientation The orientation of the box. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawWireCube(Vector3, Vector3, Quaternion, Color, Single, Boolean) Draws a wireframe cube with the specified orientation, color, and duration. Declaration public static void DrawWireCube(Vector3 center, Vector3 size, Quaternion orientation, in Color color, float duration, bool depthTest) Parameters Type Name Description Vector3 center The center point. Vector3 size The extents of the box. Quaternion orientation The orientation of the box. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source DrawWireCube(Cuboid, Color) Draws a wireframe cube with the specified color. Declaration public static void DrawWireCube(in Cuboid cuboid, in Color color) Parameters Type Name Description Cuboid cuboid The cuboid to draw. Color color The color of the box. | Improve this Doc View Source DrawWireCube(Cuboid, Color, Single) Draws a wireframe cube with the specified color and duration. Declaration public static void DrawWireCube(in Cuboid cuboid, in Color color, float duration) Parameters Type Name Description Cuboid cuboid The cuboid to draw. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. | Improve this Doc View Source DrawWireCube(Cuboid, Color, Single, Boolean) Draws a wireframe cube with the specified color and duration. Declaration public static void DrawWireCube(in Cuboid cuboid, in Color color, float duration, bool depthTest) Parameters Type Name Description Cuboid cuboid The cuboid to draw. Color color The color of the box. System.Single duration The duration of the box's visibility, in seconds. If 0 is passed, the box is visible for a single frame. System.Boolean depthTest true if depth test should be applied; otherwise, false . Passing true will have the box be obscured by objects closer to the camera. | Improve this Doc View Source ExtractStackTraceNoAlloc(Byte*, Int32, String) Populate an unmanaged buffer with the current managed call stack as a sequence of UTF-8 bytes, without allocating GC memory. Declaration public static int ExtractStackTraceNoAlloc(byte *buffer, int bufferMax, string projectFolder) Parameters Type Name Description System.Byte * buffer The target buffer to receive the callstack text. System.Int32 bufferMax The maximum number of bytes to write. System.String projectFolder The project folder path, to clean up path names. Returns Type Description System.Int32 The number of bytes written into the buffer. | Improve this Doc View Source Log(Nullable<String>) Logs a message to the Unity Console. Declaration public static void Log(string? message) Parameters Type Name Description System.Nullable < System.String > message The message to log. | Improve this Doc View Source Log(String, Nullable<UnityEngine.Object>) Logs a message to the Unity Console. Declaration public static void Log(string message, UnityEngine.Object? context) Parameters Type Name Description System.String message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. | Improve this Doc View Source Log<T>(T) Logs a message to the Unity Console. Declaration public static void Log<T>(T message) Parameters Type Name Description T message The message to log. Type Parameters Name Description T | Improve this Doc View Source Log<T>(T, Nullable<UnityEngine.Object>) Logs a message to the Unity Console. Declaration public static void Log<T>(T message, UnityEngine.Object? context) Parameters Type Name Description T message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. Type Parameters Name Description T | Improve this Doc View Source LogAssertion(Nullable<String>) Logs an assertion message to the Unity Console. Declaration public static void LogAssertion(string? message) Parameters Type Name Description System.Nullable < System.String > message The message to log. | Improve this Doc View Source LogAssertion(String, Nullable<UnityEngine.Object>) Logs an assertion message to the Unity Console. Declaration public static void LogAssertion(string message, UnityEngine.Object? context) Parameters Type Name Description System.String message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. | Improve this Doc View Source LogAssertion<T>(T) Logs an assertion message to the Unity Console. Declaration public static void LogAssertion<T>(T message) Parameters Type Name Description T message The message to log. Type Parameters Name Description T | Improve this Doc View Source LogAssertion<T>(T, Nullable<UnityEngine.Object>) Logs an assertion message to the Unity Console. Declaration public static void LogAssertion<T>(T message, UnityEngine.Object? context) Parameters Type Name Description T message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. Type Parameters Name Description T | Improve this Doc View Source LogError(Nullable<String>) Logs an error message to the Unity Console. Declaration public static void LogError(string? message) Parameters Type Name Description System.Nullable < System.String > message The message to log. | Improve this Doc View Source LogError(String, Nullable<UnityEngine.Object>) Logs an error message to the Unity Console. Declaration public static void LogError(string message, UnityEngine.Object? context) Parameters Type Name Description System.String message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. | Improve this Doc View Source LogError<T>(T) Logs an error message to the Unity Console. Declaration public static void LogError<T>(T message) Parameters Type Name Description T message The message to log. Type Parameters Name Description T | Improve this Doc View Source LogError<T>(T, Nullable<UnityEngine.Object>) Logs an error message to the Unity Console. Declaration public static void LogError<T>(T message, UnityEngine.Object? context) Parameters Type Name Description T message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. Type Parameters Name Description T | Improve this Doc View Source LogErrorFormat(Nullable<String>, Nullable<Object>[]) Logs a formatted error message to the Unity Console. Declaration public static void LogErrorFormat(string? format, params object? [] args) Parameters Type Name Description System.Nullable < System.String > format The format string of the message to log. System.Nullable < System.Object >[] args The format arguments. | Improve this Doc View Source LogErrorFormat(UnityEngine.Object, Nullable<String>, Nullable<Object>[]) Logs a formatted error message to the Unity Console. Declaration public static void LogErrorFormat(UnityEngine.Object context, string? format, params object? [] args) Parameters Type Name Description UnityEngine.Object context The object to which this message applies. System.Nullable < System.String > format The format string of the message to log. System.Nullable < System.Object >[] args The format arguments. | Improve this Doc View Source LogFormat(Nullable<String>, Nullable<Object>[]) Logs a formatted message to the Unity Console. Declaration public static void LogFormat(string? format, params object? [] args) Parameters Type Name Description System.Nullable < System.String > format The format string of the message to log. System.Nullable < System.Object >[] args The format arguments. | Improve this Doc View Source LogFormat(UnityEngine.Object, Nullable<String>, Nullable<Object>[]) Logs a formatted message to the Unity Console. Declaration public static void LogFormat(UnityEngine.Object context, string? format, params object? [] args) Parameters Type Name Description UnityEngine.Object context The object to which this message applies. System.Nullable < System.String > format The format string of the message to log. System.Nullable < System.Object >[] args The format arguments. | Improve this Doc View Source LogWarning(Nullable<String>) Logs a warning message to the Unity Console. Declaration public static void LogWarning(string? message) Parameters Type Name Description System.Nullable < System.String > message The message to log. | Improve this Doc View Source LogWarning(String, Nullable<UnityEngine.Object>) Logs a warning message to the Unity Console. Declaration public static void LogWarning(string message, UnityEngine.Object? context) Parameters Type Name Description System.String message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. | Improve this Doc View Source LogWarning<T>(T) Logs a warning message to the Unity Console. Declaration public static void LogWarning<T>(T message) Parameters Type Name Description T message The message to log. Type Parameters Name Description T | Improve this Doc View Source LogWarning<T>(T, Nullable<UnityEngine.Object>) Logs a warning message to the Unity Console. Declaration public static void LogWarning<T>(T message, UnityEngine.Object? context) Parameters Type Name Description T message The message to log. System.Nullable < UnityEngine.Object > context The object to which the message applies. Type Parameters Name Description T | Improve this Doc View Source LogWarningFormat(Nullable<String>, Nullable<Object>[]) Logs a formatted warning message to the Unity Console. Declaration public static void LogWarningFormat(string? format, params object? [] args) Parameters Type Name Description System.Nullable < System.String > format The format string of the message to log. System.Nullable < System.Object >[] args The format arguments. | Improve this Doc View Source LogWarningFormat(UnityEngine.Object, Nullable<String>, Nullable<Object>[]) Logs a formatted warning message to the Unity Console. Declaration public static void LogWarningFormat(UnityEngine.Object context, string? format, params object? [] args) Parameters Type Name Description UnityEngine.Object context The object to which this message applies. System.Nullable < System.String > format The format string of the message to log. System.Nullable < System.Object >[] args The format arguments."
  },
  "api/X10D.Unity.Drawing.Color32Extensions.html": {
    "href": "api/X10D.Unity.Drawing.Color32Extensions.html",
    "title": "Class Color32Extensions | X10D",
    "keywords": "Class Color32Extensions Drawing-related extensions for . Inheritance System.Object Color32Extensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class Color32Extensions : object Methods | Improve this Doc View Source Deconstruct(Color32, out Byte, out Byte, out Byte) Deconstructs the current color into its RGB components. Declaration public static void Deconstruct(this Color32 color, out byte r, out byte g, out byte b) Parameters Type Name Description Color32 color The source color. System.Byte r When this method returns, contains the component of color . System.Byte g When this method returns, contains the component of color . System.Byte b When this method returns, contains the component of color . | Improve this Doc View Source Deconstruct(Color32, out Byte, out Byte, out Byte, out Byte) Deconstructs the current color into its RGB components. Declaration public static void Deconstruct(this Color32 color, out byte a, out byte r, out byte g, out byte b) Parameters Type Name Description Color32 color The source color. System.Byte a When this method returns, contains the component of color . System.Byte r When this method returns, contains the component of color . System.Byte g When this method returns, contains the component of color . System.Byte b When this method returns, contains the component of color . | Improve this Doc View Source GetClosestConsoleColor(Color32) Returns a which most closely resembles the current color. Declaration public static ConsoleColor GetClosestConsoleColor(this Color32 color) Parameters Type Name Description Color32 color The source color. Returns Type Description ConsoleColor The closest . | Improve this Doc View Source Inverted(Color32) Returns a new with the red, green, and blue components inverted. Alpha is not affected. Declaration public static Color32 Inverted(this Color32 color) Parameters Type Name Description Color32 color The color to invert. Returns Type Description Color32 The inverted color. | Improve this Doc View Source ToSystemDrawingColor(Color32) Converts the current color to a . Declaration public static System.Drawing.Color ToSystemDrawingColor(this Color32 color) Parameters Type Name Description Color32 color The color to convert. Returns Type Description System.Drawing.Color The converted color. | Improve this Doc View Source ToUnityColor32(System.Drawing.Color) Converts the current color to a . Declaration public static Color32 ToUnityColor32(this System.Drawing.Color color) Parameters Type Name Description System.Drawing.Color color The color to convert. Returns Type Description Color32 The converted color. | Improve this Doc View Source WithA(Color32, Byte) Returns a vector whose red, green, and blue components are the same as the specified color, and whose alpha component is a new value. Declaration public static Color32 WithA(this Color32 color, byte a) Parameters Type Name Description Color32 color The color to copy. System.Byte a The new alpha component value. Returns Type Description Color32 A new instance of whose , , and components are the same as that of color , and whose component is a . | Improve this Doc View Source WithB(Color32, Byte) Returns a vector whose red, green, and alpha components are the same as the specified color, and whose blue component is a new value. Declaration public static Color32 WithB(this Color32 color, byte b) Parameters Type Name Description Color32 color The color to copy. System.Byte b The new blue component value. Returns Type Description Color32 A new instance of whose , , and components are the same as that of color , and whose component is b . | Improve this Doc View Source WithG(Color32, Byte) Returns a vector whose red, blue, and alpha components are the same as the specified color, and whose green component is a new value. Declaration public static Color32 WithG(this Color32 color, byte g) Parameters Type Name Description Color32 color The color to copy. System.Byte g The new green component value. Returns Type Description Color32 A new instance of whose , , and components are the same as that of color , and whose component is g . | Improve this Doc View Source WithR(Color32, Byte) Returns a vector whose green, blue, and alpha components are the same as the specified color, and whose red component is a new value. Declaration public static Color32 WithR(this Color32 color, byte r) Parameters Type Name Description Color32 color The color to copy. System.Byte r The new red component value. Returns Type Description Color32 A new instance of whose , , and components are the same as that of color , and whose component is r ."
  },
  "api/X10D.Unity.Drawing.ColorExtensions.html": {
    "href": "api/X10D.Unity.Drawing.ColorExtensions.html",
    "title": "Class ColorExtensions | X10D",
    "keywords": "Class ColorExtensions Drawing-related extensions for . Inheritance System.Object ColorExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class ColorExtensions : object Methods | Improve this Doc View Source Deconstruct(Color, out Single, out Single, out Single) Deconstructs the current color into its RGB components. Declaration public static void Deconstruct(this Color color, out float r, out float g, out float b) Parameters Type Name Description Color color The source color. System.Single r When this method returns, contains the component of color . System.Single g When this method returns, contains the component of color . System.Single b When this method returns, contains the component of color . | Improve this Doc View Source Deconstruct(Color, out Single, out Single, out Single, out Single) Deconstructs the current color into its ARGB components. Declaration public static void Deconstruct(this Color color, out float a, out float r, out float g, out float b) Parameters Type Name Description Color color The source color. System.Single a When this method returns, contains the component of color . System.Single r When this method returns, contains the component of color . System.Single g When this method returns, contains the component of color . System.Single b When this method returns, contains the component of color . | Improve this Doc View Source GetClosestConsoleColor(Color) Returns a which most closely resembles the current color. Declaration public static ConsoleColor GetClosestConsoleColor(this Color color) Parameters Type Name Description Color color The source color. Returns Type Description ConsoleColor The closest . | Improve this Doc View Source Inverted(Color) Returns a new with the red, green, and blue components inverted. Alpha is not affected. Declaration public static Color Inverted(this Color color) Parameters Type Name Description Color color The color to invert. Returns Type Description Color The inverted color. | Improve this Doc View Source ToSystemDrawingColor(Color) Converts the current color to a . Declaration public static System.Drawing.Color ToSystemDrawingColor(this Color color) Parameters Type Name Description Color color The color to convert. Returns Type Description System.Drawing.Color The converted color. | Improve this Doc View Source ToUnityColor(System.Drawing.Color) Converts the current color to a . Declaration public static Color ToUnityColor(this System.Drawing.Color color) Parameters Type Name Description System.Drawing.Color color The color to convert. Returns Type Description Color The converted color. | Improve this Doc View Source WithA(Color, Single) Returns a vector whose red, green, and blue components are the same as the specified color, and whose alpha component is a new value. Declaration public static Color WithA(this Color color, float a) Parameters Type Name Description Color color The color to copy. System.Single a The new alpha component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is a . | Improve this Doc View Source WithB(Color, Single) Returns a vector whose red, green, and alpha components are the same as the specified color, and whose blue component is a new value. Declaration public static Color WithB(this Color color, float b) Parameters Type Name Description Color color The color to copy. System.Single b The new blue component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is b . | Improve this Doc View Source WithG(Color, Single) Returns a vector whose red, blue, and alpha components are the same as the specified color, and whose green component is a new value. Declaration public static Color WithG(this Color color, float g) Parameters Type Name Description Color color The color to copy. System.Single g The new green component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is g . | Improve this Doc View Source WithR(Color, Single) Returns a vector whose green, blue, and alpha components are the same as the specified color, and whose red component is a new value. Declaration public static Color WithR(this Color color, float r) Parameters Type Name Description Color color The color to copy. System.Single r The new red component value. Returns Type Description Color A new instance of whose , , and components are the same as that of color , and whose component is r ."
  },
  "api/X10D.Unity.Drawing.html": {
    "href": "api/X10D.Unity.Drawing.html",
    "title": "Namespace X10D.Unity.Drawing | X10D",
    "keywords": "Namespace X10D.Unity.Drawing Classes Color32Extensions Drawing-related extensions for . ColorExtensions Drawing-related extensions for . PointExtensions Drawing-related extension methods for . PointFExtensions Drawing-related extension methods for . PolygonExtensions Drawing-related extension methods for Polygon . PolygonFExtensions Drawing-related extension methods for PolygonF . PolyhedronExtensions Drawing-related extension methods for Polyhedron . RandomExtensions Extension methods for . RectangleExtensions Drawing-related extension methods for . RectangleFExtensions Drawing-related extension methods for . RectExtensions Drawing-related extension methods for . RectIntExtensions Drawing-related extension methods for . SizeExtensions Drawing-related extension methods for . SizeFExtensions Drawing-related extension methods for ."
  },
  "api/X10D.Unity.Drawing.PointExtensions.html": {
    "href": "api/X10D.Unity.Drawing.PointExtensions.html",
    "title": "Class PointExtensions | X10D",
    "keywords": "Class PointExtensions Drawing-related extension methods for . Inheritance System.Object PointExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class PointExtensions : object Methods | Improve this Doc View Source ToUnityVector2(Point) Converts the current to a . Declaration public static Vector2 ToUnityVector2(this Point point) Parameters Type Name Description Point point The point to convert. Returns Type Description Vector2 The resulting . | Improve this Doc View Source ToUnityVector2Int(Point) Converts the current to a . Declaration public static Vector2Int ToUnityVector2Int(this Point value) Parameters Type Name Description Point value The point to convert. Returns Type Description Vector2Int The resulting ."
  },
  "api/X10D.Unity.Drawing.PointFExtensions.html": {
    "href": "api/X10D.Unity.Drawing.PointFExtensions.html",
    "title": "Class PointFExtensions | X10D",
    "keywords": "Class PointFExtensions Drawing-related extension methods for . Inheritance System.Object PointFExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class PointFExtensions : object Methods | Improve this Doc View Source IsOnLine(PointF, Vector2, Vector2) Determines if the current lies on the specified LineF . Declaration public static bool IsOnLine(this PointF point, Vector2 start, Vector2 end) Parameters Type Name Description PointF point The point to check. Vector2 start The starting point of the line. Vector2 end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source ToUnityVector2(PointF) Converts the current to a . Declaration public static Vector2 ToUnityVector2(this PointF point) Parameters Type Name Description PointF point The point to convert. Returns Type Description Vector2 The resulting ."
  },
  "api/X10D.Unity.Drawing.PolygonExtensions.html": {
    "href": "api/X10D.Unity.Drawing.PolygonExtensions.html",
    "title": "Class PolygonExtensions | X10D",
    "keywords": "Class PolygonExtensions Drawing-related extension methods for Polygon . Inheritance System.Object PolygonExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class PolygonExtensions : object Methods | Improve this Doc View Source AddVertex(Polygon, Vector2Int) Adds a vertex to this polygon. Declaration public static void AddVertex(this Polygon polygon, Vector2Int point) Parameters Type Name Description Polygon polygon The polygon whose points to update. Vector2Int point The point to add. | Improve this Doc View Source AddVertices(Polygon, IEnumerable<Vector2Int>) Adds a collection of vertices to this polygon. Declaration public static void AddVertices(this Polygon polygon, IEnumerable<Vector2Int> vertices) Parameters Type Name Description Polygon polygon The polygon whose vertices to update. IEnumerable < Vector2Int > vertices The vertices to add."
  },
  "api/X10D.Unity.Drawing.PolygonFExtensions.html": {
    "href": "api/X10D.Unity.Drawing.PolygonFExtensions.html",
    "title": "Class PolygonFExtensions | X10D",
    "keywords": "Class PolygonFExtensions Drawing-related extension methods for PolygonF . Inheritance System.Object PolygonFExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class PolygonFExtensions : object Methods | Improve this Doc View Source AddVertex(PolygonF, Vector2) Adds a point to this polygon. Declaration public static void AddVertex(this PolygonF polygon, Vector2 vertex) Parameters Type Name Description PolygonF polygon The polygon whose vertices to update. Vector2 vertex The vertex to add. | Improve this Doc View Source AddVertex(PolygonF, Vector2Int) Adds a point to this polygon. Declaration public static void AddVertex(this PolygonF polygon, Vector2Int vertex) Parameters Type Name Description PolygonF polygon The polygon whose vertices to update. Vector2Int vertex The vertex to add. | Improve this Doc View Source AddVertices(PolygonF, IEnumerable<Vector2>) Adds a collection of vertices to this polygon. Declaration public static void AddVertices(this PolygonF polygon, IEnumerable<Vector2> vertices) Parameters Type Name Description PolygonF polygon The polygon whose vertices to update. IEnumerable < Vector2 > vertices The vertices to add. | Improve this Doc View Source AddVertices(PolygonF, IEnumerable<Vector2Int>) Adds a collection of vertices to this polygon. Declaration public static void AddVertices(this PolygonF polygon, IEnumerable<Vector2Int> vertices) Parameters Type Name Description PolygonF polygon The polygon whose vertices to update. IEnumerable < Vector2Int > vertices The vertices to add."
  },
  "api/X10D.Unity.Drawing.PolyhedronExtensions.html": {
    "href": "api/X10D.Unity.Drawing.PolyhedronExtensions.html",
    "title": "Class PolyhedronExtensions | X10D",
    "keywords": "Class PolyhedronExtensions Drawing-related extension methods for Polyhedron . Inheritance System.Object PolyhedronExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class PolyhedronExtensions : object Methods | Improve this Doc View Source AddVertex(Polyhedron, Vector3) Adds a vertex to this polyhedron. Declaration public static void AddVertex(this Polyhedron polyhedron, Vector3 vertex) Parameters Type Name Description Polyhedron polyhedron The polyhedron whose vertices to update. Vector3 vertex The vertex to add. | Improve this Doc View Source AddVertex(Polyhedron, Vector3Int) Adds a vertex to this polyhedron. Declaration public static void AddVertex(this Polyhedron polyhedron, Vector3Int vertex) Parameters Type Name Description Polyhedron polyhedron The polyhedron whose vertices to update. Vector3Int vertex The vertex to add. | Improve this Doc View Source AddVertices(Polyhedron, IEnumerable<Vector3>) Adds a collection of vertices to this polyhedron. Declaration public static void AddVertices(this Polyhedron polyhedron, IEnumerable<Vector3> vertices) Parameters Type Name Description Polyhedron polyhedron The polyhedron whose vertices to update. IEnumerable < Vector3 > vertices The vertices to add. | Improve this Doc View Source AddVertices(Polyhedron, IEnumerable<Vector3Int>) Adds a collection of vertices to this polyhedron. Declaration public static void AddVertices(this Polyhedron polyhedron, IEnumerable<Vector3Int> vertices) Parameters Type Name Description Polyhedron polyhedron The polyhedron whose vertices to update. IEnumerable < Vector3Int > vertices The vertices to add."
  },
  "api/X10D.Unity.Drawing.RandomExtensions.html": {
    "href": "api/X10D.Unity.Drawing.RandomExtensions.html",
    "title": "Class RandomExtensions | X10D",
    "keywords": "Class RandomExtensions Extension methods for . Inheritance System.Object RandomExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class RandomExtensions : object Methods | Improve this Doc View Source NextColor32Argb(System.Random) Returns a color composed of random components for apha, red, green, and blue. Declaration public static Color32 NextColor32Argb(this System.Random random) Parameters Type Name Description System.Random random The instance. Returns Type Description Color32 A whose alpha, red, green, and blue components are all random. | Improve this Doc View Source NextColor32Rgb(System.Random) Returns a color of random components for red, green, and blue. Declaration public static Color32 NextColor32Rgb(this System.Random random) Parameters Type Name Description System.Random random The instance. Returns Type Description Color32 A whose red, green, and blue components are all random, and whose alpha is 255 | Improve this Doc View Source NextColorArgb(System.Random) Returns an HDR color composed of random components for apha, red, green, and blue. Declaration public static Color NextColorArgb(this System.Random random) Parameters Type Name Description System.Random random The instance. Returns Type Description Color A whose alpha, red, green, and blue components are all random. | Improve this Doc View Source NextColorRgb(System.Random) Returns an HDR color of random components for red, green, and blue. Declaration public static Color NextColorRgb(this System.Random random) Parameters Type Name Description System.Random random The instance. Returns Type Description Color A whose red, green, and blue components are all random, and whose alpha is 255"
  },
  "api/X10D.Unity.Drawing.RectangleExtensions.html": {
    "href": "api/X10D.Unity.Drawing.RectangleExtensions.html",
    "title": "Class RectangleExtensions | X10D",
    "keywords": "Class RectangleExtensions Drawing-related extension methods for . Inheritance System.Object RectangleExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class RectangleExtensions : object Methods | Improve this Doc View Source ToUnityRect(Rectangle) Converts the current to a . Declaration public static Rect ToUnityRect(this Rectangle rectangle) Parameters Type Name Description Rectangle rectangle The rectangle to convert. Returns Type Description Rect The converted rectangle. | Improve this Doc View Source ToUnityRectInt(Rectangle) Converts the current to a . Declaration public static RectInt ToUnityRectInt(this Rectangle rectangle) Parameters Type Name Description Rectangle rectangle The rectangle to convert. Returns Type Description RectInt The converted rectangle."
  },
  "api/X10D.Unity.Drawing.RectangleFExtensions.html": {
    "href": "api/X10D.Unity.Drawing.RectangleFExtensions.html",
    "title": "Class RectangleFExtensions | X10D",
    "keywords": "Class RectangleFExtensions Drawing-related extension methods for . Inheritance System.Object RectangleFExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class RectangleFExtensions : object Methods | Improve this Doc View Source ToUnityRect(RectangleF) Converts the current to a . Declaration public static Rect ToUnityRect(this RectangleF rectangle) Parameters Type Name Description RectangleF rectangle The rectangle to convert. Returns Type Description Rect The converted rectangle."
  },
  "api/X10D.Unity.Drawing.RectExtensions.html": {
    "href": "api/X10D.Unity.Drawing.RectExtensions.html",
    "title": "Class RectExtensions | X10D",
    "keywords": "Class RectExtensions Drawing-related extension methods for . Inheritance System.Object RectExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class RectExtensions : object Methods | Improve this Doc View Source ToSystemRectangleF(Rect) Converts the current to a . Declaration public static RectangleF ToSystemRectangleF(this Rect rectangle) Parameters Type Name Description Rect rectangle The rectangle to convert. Returns Type Description RectangleF The converted rectangle."
  },
  "api/X10D.Unity.Drawing.RectIntExtensions.html": {
    "href": "api/X10D.Unity.Drawing.RectIntExtensions.html",
    "title": "Class RectIntExtensions | X10D",
    "keywords": "Class RectIntExtensions Drawing-related extension methods for . Inheritance System.Object RectIntExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class RectIntExtensions : object Methods | Improve this Doc View Source ToSystemRectangle(RectInt) Converts the current to a . Declaration public static Rectangle ToSystemRectangle(this RectInt rectangle) Parameters Type Name Description RectInt rectangle The rectangle to convert. Returns Type Description Rectangle The converted rectangle. | Improve this Doc View Source ToSystemRectangleF(RectInt) Converts the current to a . Declaration public static RectangleF ToSystemRectangleF(this RectInt rectangle) Parameters Type Name Description RectInt rectangle The rectangle to convert. Returns Type Description RectangleF The converted rectangle."
  },
  "api/X10D.Unity.Drawing.SizeExtensions.html": {
    "href": "api/X10D.Unity.Drawing.SizeExtensions.html",
    "title": "Class SizeExtensions | X10D",
    "keywords": "Class SizeExtensions Drawing-related extension methods for . Inheritance System.Object SizeExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class SizeExtensions : object Methods | Improve this Doc View Source ToUnityVector2(Size) Converts the current to a . Declaration public static Vector2 ToUnityVector2(this Size size) Parameters Type Name Description Size size The size to convert. Returns Type Description Vector2 The resulting . | Improve this Doc View Source ToUnityVector2Int(Size) Converts the current to a . Declaration public static Vector2Int ToUnityVector2Int(this Size size) Parameters Type Name Description Size size The size to convert. Returns Type Description Vector2Int The resulting ."
  },
  "api/X10D.Unity.Drawing.SizeFExtensions.html": {
    "href": "api/X10D.Unity.Drawing.SizeFExtensions.html",
    "title": "Class SizeFExtensions | X10D",
    "keywords": "Class SizeFExtensions Drawing-related extension methods for . Inheritance System.Object SizeFExtensions Namespace : X10D.Unity.Drawing Assembly : X10D.Unity.dll Syntax public static class SizeFExtensions : object Methods | Improve this Doc View Source ToUnityVector2(SizeF) Converts the current to a . Declaration public static Vector2 ToUnityVector2(this SizeF size) Parameters Type Name Description SizeF size The size to convert. Returns Type Description Vector2 The resulting ."
  },
  "api/X10D.Unity.GameObjectExtensions.html": {
    "href": "api/X10D.Unity.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | X10D",
    "keywords": "Class GameObjectExtensions Extension methods for . Inheritance System.Object GameObjectExtensions Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public static class GameObjectExtensions : object Methods | Improve this Doc View Source GetComponentsInChildrenOnly<T>(GameObject) Returns an array of components of the specified type, excluding components that live on this game object. Declaration public static T[] GetComponentsInChildrenOnly<T>(this GameObject gameObject) Parameters Type Name Description GameObject gameObject The game object whose child components to retrieve. Returns Type Description T[] An array T representing the child components. Type Parameters Name Description T The type of the components to retrieve."
  },
  "api/X10D.Unity.html": {
    "href": "api/X10D.Unity.html",
    "title": "Namespace X10D.Unity | X10D",
    "keywords": "Namespace X10D.Unity Classes ComponentExtensions Extension methods for . DebugUtility An extended version of Unity's utility class which offers support for drawing simple primitives. GameObjectExtensions Extension methods for . RaycastHitExtensions Extension methods for . Singleton<T> Represents a class which implements the singleton pattern for a specific . This class is not thread-safe. TransformExtensions Extension methods for . Structs WaitForFrames Represents a yield instruction that waits for a specific number of frames. WaitForKeyDown Represents a yield instruction that waits for a key to be pressed. WaitForKeyUp Represents a yield instruction that waits for a key to be released. WaitForSecondsNoAlloc Represents a yield instruction which waits for a specified amount of seconds. WaitForSecondsRealtimeNoAlloc Represents a yield instruction which waits for a given amount of time, as provided by a . WaitForTimeSpan Represents a yield instruction which waits for a given amount of time, as provided by a . WaitForTimeSpanRealtime Represents a yield instruction which waits for a given amount of time, as provided by a ."
  },
  "api/X10D.Unity.Numerics.html": {
    "href": "api/X10D.Unity.Numerics.html",
    "title": "Namespace X10D.Unity.Numerics | X10D",
    "keywords": "Namespace X10D.Unity.Numerics Classes QuaternionExtensions Numeric-extensions for . RandomExtensions Extension methods for . Vector2Extensions Numeric-extensions for . Vector2IntExtensions Numeric-extensions for . Vector3Extensions Numeric-extensions for . Vector3IntExtensions Numeric-extensions for . Vector4Extensions Numeric-extensions for ."
  },
  "api/X10D.Unity.Numerics.QuaternionExtensions.html": {
    "href": "api/X10D.Unity.Numerics.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | X10D",
    "keywords": "Class QuaternionExtensions Numeric-extensions for . Inheritance System.Object QuaternionExtensions Namespace : X10D.Unity.Numerics Assembly : X10D.Unity.dll Syntax public static class QuaternionExtensions : object Methods | Improve this Doc View Source ToSystemQuaternion(Quaternion) Converts the current quaternion to a . Declaration public static System.Numerics.Quaternion ToSystemQuaternion(this Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion to convert. Returns Type Description System.Numerics.Quaternion The converted quaternion. | Improve this Doc View Source ToUnityQuaternion(System.Numerics.Quaternion) Converts the current quaternion to a . Declaration public static Quaternion ToUnityQuaternion(this System.Numerics.Quaternion quaternion) Parameters Type Name Description System.Numerics.Quaternion quaternion The quaternion to convert. Returns Type Description Quaternion The converted quaternion."
  },
  "api/X10D.Unity.Numerics.RandomExtensions.html": {
    "href": "api/X10D.Unity.Numerics.RandomExtensions.html",
    "title": "Class RandomExtensions | X10D",
    "keywords": "Class RandomExtensions Extension methods for . Inheritance System.Object RandomExtensions Namespace : X10D.Unity.Numerics Assembly : X10D.Unity.dll Syntax public static class RandomExtensions : object Methods | Improve this Doc View Source NextRotation(System.Random) Returns a randomly generated rotation as represented by a . Declaration public static Quaternion NextRotation(this System.Random random) Parameters Type Name Description System.Random random The instance. Returns Type Description Quaternion A constructed from 3 random single-precision floating point numbers representing the yaw, pitch, and roll. | Improve this Doc View Source NextRotationUniform(System.Random) Returns a randomly generated rotation with uniform distribution. Declaration public static Quaternion NextRotationUniform(this System.Random random) Parameters Type Name Description System.Random random The instance. Returns Type Description Quaternion A constructed with uniform distribution. | Improve this Doc View Source NextUnitVector2(System.Random) Returns a with magnitude 1 whose components indicate a random point on the unit circle. Declaration public static Vector2 NextUnitVector2(this System.Random random) Parameters Type Name Description System.Random random The instance Returns Type Description Vector2 A whose returns 1, and whose components indicate a random point on the unit circle. | Improve this Doc View Source NextUnitVector3(System.Random) Returns a with magnitude 1 whose components indicate a random point on the unit sphere. Declaration public static Vector3 NextUnitVector3(this System.Random random) Parameters Type Name Description System.Random random The instance Returns Type Description Vector3 A whose returns 1, and whose components indicate a random point on the unit sphere."
  },
  "api/X10D.Unity.Numerics.Vector2Extensions.html": {
    "href": "api/X10D.Unity.Numerics.Vector2Extensions.html",
    "title": "Class Vector2Extensions | X10D",
    "keywords": "Class Vector2Extensions Numeric-extensions for . Inheritance System.Object Vector2Extensions Namespace : X10D.Unity.Numerics Assembly : X10D.Unity.dll Syntax public static class Vector2Extensions : object Methods | Improve this Doc View Source Deconstruct(Vector2, out Single, out Single) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector2 vector, out float x, out float y) Parameters Type Name Description Vector2 vector The vector to deconstruct. System.Single x The X component value. System.Single y The Y component value. | Improve this Doc View Source IsOnLine(Vector2, PointF, PointF) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2 point, PointF start, PointF end) Parameters Type Name Description Vector2 point The point to check. PointF start The starting point of the line. PointF end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Vector2, Vector2, Vector2) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2 point, Vector2 start, Vector2 end) Parameters Type Name Description Vector2 point The point to check. Vector2 start The starting point of the line. Vector2 end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Vector2, LineF) Determines if the current lies on the specified LineF . Declaration public static bool IsOnLine(this Vector2 point, LineF line) Parameters Type Name Description Vector2 point The point to check. LineF line The line on which the point may lie. Returns Type Description System.Boolean true if point lies on the line defined by line ; otherwise false . | Improve this Doc View Source Round(Vector2) Rounds the components in the current to the nearest integer. Declaration public static Vector2 Round(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector whose components to round. Returns Type Description Vector2 The rounded vector. | Improve this Doc View Source Round(Vector2, Single) Rounds the components in the current to the nearest multiple of a specified number. Declaration public static Vector2 Round(this Vector2 vector, float nearest) Parameters Type Name Description Vector2 vector The vector whose components to round. System.Single nearest The nearest multiple to which the components should be rounded. Returns Type Description Vector2 The rounded vector. | Improve this Doc View Source ToSystemPointF(Vector2) Converts the current into a . Declaration public static PointF ToSystemPointF(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector to convert. Returns Type Description PointF The resulting . | Improve this Doc View Source ToSystemSizeF(Vector2) Converts the current into a . Declaration public static SizeF ToSystemSizeF(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector to convert. Returns Type Description SizeF The resulting . | Improve this Doc View Source ToSystemVector(Vector2) Converts the current vector to a . Declaration public static System.Numerics.Vector2 ToSystemVector(this Vector2 vector) Parameters Type Name Description Vector2 vector The vector to convert. Returns Type Description System.Numerics.Vector2 The converted vector. | Improve this Doc View Source ToUnityVector(System.Numerics.Vector2) Converts the current vector to a . Declaration public static Vector2 ToUnityVector(this System.Numerics.Vector2 vector) Parameters Type Name Description System.Numerics.Vector2 vector The vector to convert. Returns Type Description Vector2 The converted vector. | Improve this Doc View Source WithX(Vector2, Single) Returns a vector whose Y component is the same as the specified vector, and whose X component is a new value. Declaration public static Vector2 WithX(this Vector2 vector, float x) Parameters Type Name Description Vector2 vector The vector to copy. System.Single x The new X component value. Returns Type Description Vector2 A new instance of whose components is the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector2, Single) Returns a vector whose X component is the same as the specified vector, and whose Y component is a new value. Declaration public static Vector2 WithY(this Vector2 vector, float y) Parameters Type Name Description Vector2 vector The vector to copy. System.Single y The new Y component value. Returns Type Description Vector2 A new instance of whose components is the same as that of vector , and whose component is y ."
  },
  "api/X10D.Unity.Numerics.Vector2IntExtensions.html": {
    "href": "api/X10D.Unity.Numerics.Vector2IntExtensions.html",
    "title": "Class Vector2IntExtensions | X10D",
    "keywords": "Class Vector2IntExtensions Numeric-extensions for . Inheritance System.Object Vector2IntExtensions Namespace : X10D.Unity.Numerics Assembly : X10D.Unity.dll Syntax public static class Vector2IntExtensions : object Methods | Improve this Doc View Source Deconstruct(Vector2Int, out Int32, out Int32) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector2Int vector, out int x, out int y) Parameters Type Name Description Vector2Int vector The vector to deconstruct. System.Int32 x The X component value. System.Int32 y The Y component value. | Improve this Doc View Source IsOnLine(Vector2Int, PointF, PointF) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2Int point, PointF start, PointF end) Parameters Type Name Description Vector2Int point The point to check. PointF start The starting point of the line. PointF end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Vector2Int, Vector2, Vector2) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2Int point, Vector2 start, Vector2 end) Parameters Type Name Description Vector2Int point The point to check. Vector2 start The starting point of the line. Vector2 end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Vector2Int, Vector2Int, Vector2Int) Determines if the current lies on the specified line. Declaration public static bool IsOnLine(this Vector2Int point, Vector2Int start, Vector2Int end) Parameters Type Name Description Vector2Int point The point to check. Vector2Int start The starting point of the line. Vector2Int end The ending point of the line. Returns Type Description System.Boolean true if point lies on the line defined by start and end ; otherwise false . | Improve this Doc View Source IsOnLine(Vector2Int, LineF) Determines if the current lies on the specified LineF . Declaration public static bool IsOnLine(this Vector2Int point, LineF line) Parameters Type Name Description Vector2Int point The point to check. LineF line The line on which the point may lie. Returns Type Description System.Boolean true if point lies on the line defined by line ; otherwise false . | Improve this Doc View Source ToSystemPoint(Vector2Int) Converts the current into a . Declaration public static Point ToSystemPoint(this Vector2Int vector) Parameters Type Name Description Vector2Int vector The vector to convert. Returns Type Description Point The resulting . | Improve this Doc View Source ToSystemSize(Vector2Int) Converts the current into a . Declaration public static Size ToSystemSize(this Vector2Int vector) Parameters Type Name Description Vector2Int vector The vector to convert. Returns Type Description Size The resulting . | Improve this Doc View Source ToSystemVector(Vector2Int) Converts the current vector to a . Declaration public static System.Numerics.Vector2 ToSystemVector(this Vector2Int vector) Parameters Type Name Description Vector2Int vector The vector to convert. Returns Type Description System.Numerics.Vector2 The converted vector. | Improve this Doc View Source WithX(Vector2Int, Int32) Returns a vector whose Y component is the same as the specified vector, and whose X component is a new value. Declaration public static Vector2Int WithX(this Vector2Int vector, int x) Parameters Type Name Description Vector2Int vector The vector to copy. System.Int32 x The new X component value. Returns Type Description Vector2Int A new instance of whose components is the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector2Int, Int32) Returns a vector whose X component is the same as the specified vector, and whose Y component is a new value. Declaration public static Vector2Int WithY(this Vector2Int vector, int y) Parameters Type Name Description Vector2Int vector The vector to copy. System.Int32 y The new Y component value. Returns Type Description Vector2Int A new instance of whose components is the same as that of vector , and whose component is y ."
  },
  "api/X10D.Unity.Numerics.Vector3Extensions.html": {
    "href": "api/X10D.Unity.Numerics.Vector3Extensions.html",
    "title": "Class Vector3Extensions | X10D",
    "keywords": "Class Vector3Extensions Numeric-extensions for . Inheritance System.Object Vector3Extensions Namespace : X10D.Unity.Numerics Assembly : X10D.Unity.dll Syntax public static class Vector3Extensions : object Methods | Improve this Doc View Source Deconstruct(Vector3, out Single, out Single, out Single) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector3 vector, out float x, out float y, out float z) Parameters Type Name Description Vector3 vector The vector to deconstruct. System.Single x The X component value. System.Single y The Y component value. System.Single z The Z component value. | Improve this Doc View Source Round(Vector3) Rounds the components in the current to the nearest integer. Declaration public static Vector3 Round(this Vector3 vector) Parameters Type Name Description Vector3 vector The vector whose components to round. Returns Type Description Vector3 The rounded vector. | Improve this Doc View Source Round(Vector3, Single) Rounds the components in the current to the nearest multiple of a specified number. Declaration public static Vector3 Round(this Vector3 vector, float nearest) Parameters Type Name Description Vector3 vector The vector whose components to round. System.Single nearest The nearest multiple to which the components should be rounded. Returns Type Description Vector3 The rounded vector. | Improve this Doc View Source ToSystemVector(Vector3) Converts the current vector to a . Declaration public static System.Numerics.Vector3 ToSystemVector(this Vector3 vector) Parameters Type Name Description Vector3 vector The vector to convert. Returns Type Description System.Numerics.Vector3 The converted vector. | Improve this Doc View Source ToUnityVector(System.Numerics.Vector3) Converts the current vector to a . Declaration public static Vector3 ToUnityVector(this System.Numerics.Vector3 vector) Parameters Type Name Description System.Numerics.Vector3 vector The vector to convert. Returns Type Description Vector3 The converted vector. | Improve this Doc View Source WithX(Vector3, Single) Returns a vector whose Y and Z components are the same as the specified vector, and whose X component is a new value. Declaration public static Vector3 WithX(this Vector3 vector, float x) Parameters Type Name Description Vector3 vector The vector to copy. System.Single x The new X component value. Returns Type Description Vector3 A new instance of whose and components are the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector3, Single) Returns a vector whose X and Z components are the same as the specified vector, and whose Y component is a new value. Declaration public static Vector3 WithY(this Vector3 vector, float y) Parameters Type Name Description Vector3 vector The vector to copy. System.Single y The new Y component value. Returns Type Description Vector3 A new instance of whose and components are the same as that of vector , and whose component is y . | Improve this Doc View Source WithZ(Vector3, Single) Returns a vector whose X and Y components are the same as the specified vector, and whose Z component is a new value. Declaration public static Vector3 WithZ(this Vector3 vector, float z) Parameters Type Name Description Vector3 vector The vector to copy. System.Single z The new Z component value. Returns Type Description Vector3 A new instance of whose and components are the same as that of vector , and whose component is z ."
  },
  "api/X10D.Unity.Numerics.Vector3IntExtensions.html": {
    "href": "api/X10D.Unity.Numerics.Vector3IntExtensions.html",
    "title": "Class Vector3IntExtensions | X10D",
    "keywords": "Class Vector3IntExtensions Numeric-extensions for . Inheritance System.Object Vector3IntExtensions Namespace : X10D.Unity.Numerics Assembly : X10D.Unity.dll Syntax public static class Vector3IntExtensions : object Methods | Improve this Doc View Source Deconstruct(Vector3Int, out Int32, out Int32, out Int32) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector3Int vector, out int x, out int y, out int z) Parameters Type Name Description Vector3Int vector The vector to deconstruct. System.Int32 x The X component value. System.Int32 y The Y component value. System.Int32 z The Z component value. | Improve this Doc View Source ToSystemVector(Vector3Int) Converts the current vector to a . Declaration public static System.Numerics.Vector3 ToSystemVector(this Vector3Int vector) Parameters Type Name Description Vector3Int vector The vector to convert. Returns Type Description System.Numerics.Vector3 The converted vector. | Improve this Doc View Source WithX(Vector3Int, Int32) Returns a vector whose Y and Z components are the same as the specified vector, and whose X component is a new value. Declaration public static Vector3Int WithX(this Vector3Int vector, int x) Parameters Type Name Description Vector3Int vector The vector to copy. System.Int32 x The new X component value. Returns Type Description Vector3Int A new instance of whose and components are the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector3Int, Int32) Returns a vector whose X and Z components are the same as the specified vector, and whose Y component is a new value. Declaration public static Vector3Int WithY(this Vector3Int vector, int y) Parameters Type Name Description Vector3Int vector The vector to copy. System.Int32 y The new Y component value. Returns Type Description Vector3Int A new instance of whose and components are the same as that of vector , and whose component is y . | Improve this Doc View Source WithZ(Vector3Int, Int32) Returns a vector whose X and Y components are the same as the specified vector, and whose Z component is a new value. Declaration public static Vector3Int WithZ(this Vector3Int vector, int z) Parameters Type Name Description Vector3Int vector The vector to copy. System.Int32 z The new Z component value. Returns Type Description Vector3Int A new instance of whose and components are the same as that of vector , and whose component is z ."
  },
  "api/X10D.Unity.Numerics.Vector4Extensions.html": {
    "href": "api/X10D.Unity.Numerics.Vector4Extensions.html",
    "title": "Class Vector4Extensions | X10D",
    "keywords": "Class Vector4Extensions Numeric-extensions for . Inheritance System.Object Vector4Extensions Namespace : X10D.Unity.Numerics Assembly : X10D.Unity.dll Syntax public static class Vector4Extensions : object Methods | Improve this Doc View Source Deconstruct(Vector4, out Single, out Single, out Single, out Single) Deconstructs the current into its components. Declaration public static void Deconstruct(this Vector4 vector, out float x, out float y, out float z, out float w) Parameters Type Name Description Vector4 vector The vector to deconstruct. System.Single x The X component value. System.Single y The Y component value. System.Single z The Z component value. System.Single w The W component value. | Improve this Doc View Source Round(Vector4) Rounds the components in the current to the nearest integer. Declaration public static Vector4 Round(this Vector4 vector) Parameters Type Name Description Vector4 vector The vector whose components to round. Returns Type Description Vector4 The rounded vector. | Improve this Doc View Source Round(Vector4, Single) Rounds the components in the current to the nearest multiple of a specified number. Declaration public static Vector4 Round(this Vector4 vector, float nearest) Parameters Type Name Description Vector4 vector The vector whose components to round. System.Single nearest The nearest multiple to which the components should be rounded. Returns Type Description Vector4 The rounded vector. | Improve this Doc View Source ToSystemVector(Vector4) Converts the current vector to a . Declaration public static System.Numerics.Vector4 ToSystemVector(this Vector4 vector) Parameters Type Name Description Vector4 vector The vector to convert. Returns Type Description System.Numerics.Vector4 The converted vector. | Improve this Doc View Source ToUnityVector(System.Numerics.Vector4) Converts the current vector to a . Declaration public static Vector4 ToUnityVector(this System.Numerics.Vector4 vector) Parameters Type Name Description System.Numerics.Vector4 vector The vector to convert. Returns Type Description Vector4 The converted vector. | Improve this Doc View Source WithW(Vector4, Single) Returns a vector whose X, Y, and Z components are the same as the specified vector, and whose W component is a new value. Declaration public static Vector4 WithW(this Vector4 vector, float w) Parameters Type Name Description Vector4 vector The vector to copy. System.Single w The new W component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is w . | Improve this Doc View Source WithX(Vector4, Single) Returns a vector whose Y, Z, and W components are the same as the specified vector, and whose X component is a new value. Declaration public static Vector4 WithX(this Vector4 vector, float x) Parameters Type Name Description Vector4 vector The vector to copy. System.Single x The new X component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is x . | Improve this Doc View Source WithY(Vector4, Single) Returns a vector whose X, Z, and W components are the same as the specified vector, and whose Y component is a new value. Declaration public static Vector4 WithY(this Vector4 vector, float y) Parameters Type Name Description Vector4 vector The vector to copy. System.Single y The new Y component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is y . | Improve this Doc View Source WithZ(Vector4, Single) Returns a vector whose X, Y, and W components are the same as the specified vector, and whose Z component is a new value. Declaration public static Vector4 WithZ(this Vector4 vector, float z) Parameters Type Name Description Vector4 vector The vector to copy. System.Single z The new Z component value. Returns Type Description Vector4 A new instance of whose , , and components are the same as that of vector , and whose component is z ."
  },
  "api/X10D.Unity.RaycastHitExtensions.html": {
    "href": "api/X10D.Unity.RaycastHitExtensions.html",
    "title": "Class RaycastHitExtensions | X10D",
    "keywords": "Class RaycastHitExtensions Extension methods for . Inheritance System.Object RaycastHitExtensions Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public static class RaycastHitExtensions : object Methods | Improve this Doc View Source GetComponent(RaycastHit, Type) Gets the component of the specified type from the object that was hit by the raycast. Declaration public static Component? GetComponent(this RaycastHit hit, Type componentType) Parameters Type Name Description RaycastHit hit The raycast hit. Type componentType The type of the component to retrieve. Returns Type Description System.Nullable < Component > The component of the specified type from the object that was hit by the raycast, or null if no component of the specified type was found. | Improve this Doc View Source GetComponent<T>(RaycastHit) Gets the component of the specified type from the object that was hit by the raycast. Declaration public static T GetComponent<T>(this RaycastHit hit) Parameters Type Name Description RaycastHit hit The raycast hit. Returns Type Description T The component of the specified type from the object that was hit by the raycast, or null if no component of the specified type was found. Type Parameters Name Description T The type of the component to retrieve. | Improve this Doc View Source TryGetComponent(RaycastHit, Type, out Nullable<Component>) Attempts to get the component of the specified type from the object that was hit by the raycast, and returns a value that indicates whether the operation succeeded. Declaration public static bool TryGetComponent(this RaycastHit hit, Type componentType, out Component? component) Parameters Type Name Description RaycastHit hit The raycast hit. Type componentType The type of the component to retrieve. System.Nullable < Component > component When this method returns, contains the component of the specified type from the object that was hit by the raycast, or null if no component of the specified type was found. Returns Type Description System.Boolean true if the component of the specified type was found; otherwise, false . | Improve this Doc View Source TryGetComponent<T>(RaycastHit, out T) Attempts to get the component of the specified type from the object that was hit by the raycast, and returns a value that indicates whether the operation succeeded. Declaration public static bool TryGetComponent<T>(this RaycastHit hit, out T component) Parameters Type Name Description RaycastHit hit The raycast hit. T component When this method returns, contains the component of the specified type from the object that was hit by the raycast, or null if no component of the specified type was found. Returns Type Description System.Boolean true if the component of the specified type was found; otherwise, false . Type Parameters Name Description T The type of the component to retrieve."
  },
  "api/X10D.Unity.Singleton-1.html": {
    "href": "api/X10D.Unity.Singleton-1.html",
    "title": "Class Singleton<T> | X10D",
    "keywords": "Class Singleton<T> Represents a class which implements the singleton pattern for a specific . This class is not thread-safe. Inheritance System.Object Singleton<T> Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T> Type Parameters Name Description T The type of the singleton. Properties | Improve this Doc View Source Instance Gets the instance of the singleton. Declaration public static T Instance { get; } Property Value Type Description T The singleton instance. Methods | Improve this Doc View Source Awake() Called when the script instance is being loaded. Declaration protected virtual void Awake() | Improve this Doc View Source OnDestroy() Called when the object is destroyed. Declaration protected virtual void OnDestroy() Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Unity.TransformExtensions.html": {
    "href": "api/X10D.Unity.TransformExtensions.html",
    "title": "Class TransformExtensions | X10D",
    "keywords": "Class TransformExtensions Extension methods for . Inheritance System.Object TransformExtensions Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public static class TransformExtensions : object Methods | Improve this Doc View Source LookAt(Transform, GameObject) Rotates this transform so the forward vector points at another game object. Declaration public static void LookAt(this Transform transform, GameObject target) Parameters Type Name Description Transform transform The transform whose rotation will be changed. GameObject target The game object to look at. | Improve this Doc View Source LookAt(Transform, GameObject, Vector3) Rotates this transform so the forward vector points at another game object. Declaration public static void LookAt(this Transform transform, GameObject target, Vector3 worldUp) Parameters Type Name Description Transform transform The transform whose rotation will be changed. GameObject target The game object to look at. Vector3 worldUp A vector specifying the upward direction. | Improve this Doc View Source SetParent(Transform, GameObject) Sets the parent of this transform. Declaration public static void SetParent(this Transform transform, GameObject parent) Parameters Type Name Description Transform transform The transform whose parent to change. GameObject parent The new parent. | Improve this Doc View Source SetParent(Transform, GameObject, Boolean) Sets the parent of this transform. Declaration public static void SetParent(this Transform transform, GameObject parent, bool worldPositionStays) Parameters Type Name Description Transform transform The transform whose parent to change. GameObject parent The new parent. System.Boolean worldPositionStays true to modify the parent-relative position, scale and rotation such that the object keeps the same world space position, rotation and scale as before; otherwise, false ."
  },
  "api/X10D.Unity.WaitForFrames.html": {
    "href": "api/X10D.Unity.WaitForFrames.html",
    "title": "Struct WaitForFrames | X10D",
    "keywords": "Struct WaitForFrames Represents a yield instruction that waits for a specific number of frames. Implements IEnumerator Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public struct WaitForFrames : IEnumerator Constructors | Improve this Doc View Source WaitForFrames(Int32) Initializes a new instance of the WaitForFrames struct. Declaration public WaitForFrames(int frameCount) Parameters Type Name Description System.Int32 frameCount The frame count. Properties | Improve this Doc View Source Current Declaration public object Current { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Unity.WaitForKeyDown.html": {
    "href": "api/X10D.Unity.WaitForKeyDown.html",
    "title": "Struct WaitForKeyDown | X10D",
    "keywords": "Struct WaitForKeyDown Represents a yield instruction that waits for a key to be pressed. Implements IEnumerator Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public struct WaitForKeyDown : IEnumerator Constructors | Improve this Doc View Source WaitForKeyDown(KeyCode) Initializes a new instance of the WaitForKeyDown struct. Declaration public WaitForKeyDown(KeyCode keyCode) Parameters Type Name Description KeyCode keyCode The key to wait for. Properties | Improve this Doc View Source Current Declaration public object Current { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Unity.WaitForKeyUp.html": {
    "href": "api/X10D.Unity.WaitForKeyUp.html",
    "title": "Struct WaitForKeyUp | X10D",
    "keywords": "Struct WaitForKeyUp Represents a yield instruction that waits for a key to be released. Implements IEnumerator Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public struct WaitForKeyUp : IEnumerator Constructors | Improve this Doc View Source WaitForKeyUp(KeyCode) Initializes a new instance of the WaitForKeyUp struct. Declaration public WaitForKeyUp(KeyCode keyCode) Parameters Type Name Description KeyCode keyCode The key to wait for. Properties | Improve this Doc View Source Current Declaration public object Current { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Unity.WaitForSecondsNoAlloc.html": {
    "href": "api/X10D.Unity.WaitForSecondsNoAlloc.html",
    "title": "Struct WaitForSecondsNoAlloc | X10D",
    "keywords": "Struct WaitForSecondsNoAlloc Represents a yield instruction which waits for a specified amount of seconds. Implements IEnumerator Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public struct WaitForSecondsNoAlloc : IEnumerator Remarks This struct exists as an allocation-free alternative to . Constructors | Improve this Doc View Source WaitForSecondsNoAlloc(Single) Initializes a new instance of the WaitForTimeSpan struct. Declaration public WaitForSecondsNoAlloc(float duration) Parameters Type Name Description System.Single duration The duration of the pause, in seconds. Properties | Improve this Doc View Source Current Declaration public object Current { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Unity.WaitForSecondsRealtimeNoAlloc.html": {
    "href": "api/X10D.Unity.WaitForSecondsRealtimeNoAlloc.html",
    "title": "Struct WaitForSecondsRealtimeNoAlloc | X10D",
    "keywords": "Struct WaitForSecondsRealtimeNoAlloc Represents a yield instruction which waits for a given amount of time, as provided by a . Implements IEnumerator Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public struct WaitForSecondsRealtimeNoAlloc : IEnumerator Remarks This struct exists as an allocation-free alternative to . Constructors | Improve this Doc View Source WaitForSecondsRealtimeNoAlloc(Single) Initializes a new instance of the WaitForTimeSpan struct. Declaration public WaitForSecondsRealtimeNoAlloc(float duration) Parameters Type Name Description System.Single duration The duration of the pause, in seconds. Properties | Improve this Doc View Source Current Declaration public object Current { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Unity.WaitForTimeSpan.html": {
    "href": "api/X10D.Unity.WaitForTimeSpan.html",
    "title": "Struct WaitForTimeSpan | X10D",
    "keywords": "Struct WaitForTimeSpan Represents a yield instruction which waits for a given amount of time, as provided by a . Implements IEnumerator Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public struct WaitForTimeSpan : IEnumerator Constructors | Improve this Doc View Source WaitForTimeSpan(TimeSpan) Initializes a new instance of the WaitForTimeSpan struct. Declaration public WaitForTimeSpan(TimeSpan duration) Parameters Type Name Description TimeSpan duration The duration of the pause. Properties | Improve this Doc View Source Current Declaration public object Current { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "api/X10D.Unity.WaitForTimeSpanRealtime.html": {
    "href": "api/X10D.Unity.WaitForTimeSpanRealtime.html",
    "title": "Struct WaitForTimeSpanRealtime | X10D",
    "keywords": "Struct WaitForTimeSpanRealtime Represents a yield instruction which waits for a given amount of time, as provided by a . Implements IEnumerator Namespace : X10D.Unity Assembly : X10D.Unity.dll Syntax public struct WaitForTimeSpanRealtime : IEnumerator Constructors | Improve this Doc View Source WaitForTimeSpanRealtime(TimeSpan) Initializes a new instance of the WaitForTimeSpanRealtime struct. Declaration public WaitForTimeSpanRealtime(TimeSpan duration) Parameters Type Name Description TimeSpan duration The duration of the pause. Properties | Improve this Doc View Source Current Declaration public object Current { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator Extension Methods Extensions.AsArrayValue<T>(T) Extensions.AsEnumerableValue<T>(T) Extensions.RepeatValue<T>(T, Int32)"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | X10D",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | X10D",
    "keywords": "Introduction X10D (pronounced extend ), is a .NET package that provides extension methods for numerous types. The purpose of this library is to simplify a codebase by reducing the need for repeated code when performing common operations. Simplify your codebase. Take advantage of .NET. Use extension methods."
  }
}